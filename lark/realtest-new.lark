%import common.WS
%import common.CPP_COMMENT
%import common.WS_INLINE
%import common.NEWLINE
%import common.SIGNED_NUMBER -> NUMBER

%ignore WS
%ignore WS_INLINE
%ignore CPP_COMMENT

start: section+

section: notes_section | data_section | import_section | settings_section | benchmark_section | parameters_section | strategy_section | template_section | charts_section | trades_section

notes_section: "Notes:" NEWLINE? notes_content
notes_content: /[^\n]+/

data_section: "Data:" NEWLINE? declaration+
import_section: "Import:" NEWLINE? declaration+
settings_section: "Settings:" NEWLINE? declaration+
benchmark_section: "Benchmark:" NEWLINE? declaration+
parameters_section: "Parameters:" NEWLINE? declaration+
strategy_section: "Strategy:" NEWLINE? declaration+
template_section: "Template:" NEWLINE? declaration+
charts_section: "Charts:" NEWLINE? declaration+
trades_section: "Trades:" NEWLINE? declaration+

date_expr: date_literal | "Latest" | "Earliest"
date_identifier: /(?i)StartDate/ | /(?i)EndDate/
declaration: date_declaration | normal_declaration
date_declaration: date_identifier ":" _TAB? date_expr NEWLINE?
normal_declaration: identifier ":" _TAB? expression NEWLINE?
expression: logical_expr format_spec? CPP_COMMENT?
format_spec: /\{%[^}]*\}/
logical_expr: comparison_expr (logical_op comparison_expr)*
logical_op: "and" | "or"
comparison_expr: add_expr (comparison_op add_expr)*
add_expr: mul_expr (add_op mul_expr)*
mul_expr: indexed_expr (mul_op indexed_expr)*
mul_op: "*" | "/"
add_op: "+" | "-"
indexed_expr: primary ("[" NUMBER "]")?
primary: "(" expression ")" | base_expr
base_expr: function_call | identifier | NUMBER | stock_symbol | string_literal | field_list | path_name | null_value
date_literal: /\d{8}|\d{4}\/\d{2}\/\d{2}|\d{4}-\d{2}-\d{2}|\d{4}\.\d{2}\.\d{2}|\d{2}-[A-Za-z]{3}-\d{2,4}|\d{1,2}\/\d{1,2}\/\d{2,4}|\d{1,2}-\d{1,2}-\d{2,4}|\d{1,2}\.\d{1,2}\.\d{2,4}/
path_name: reserved_word path_literal? | path_literal
null_value:
reserved_word: /\?[a-z]+\?/
path_literal: /[^\s?]+/
field_list: field_item? ("," field_item? )*
field_item: identifier | stock_symbol | string_literal | symbol_item
symbol_item: /[%$][\w.]+/
comparison_op: "<" | ">" | "<=" | ">=" | "==" | "<>" | "!=" | "=" 
function_call: identifier "(" arguments? ")"
arguments: expression ("," expression)*
identifier: /[a-zA-Z_][a-zA-Z0-9_]*/
string_literal: /\${1,2}\w+/
stock_symbol: /\${1,2}[A-Z_][A-Z0-9_.]*/

_TAB: /\t/
