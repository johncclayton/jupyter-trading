RealTest User Guide
Copyright Â© 2020-2025 Systematic Solutions, LLCTable of Contents
1. Welcome!
....................................................................................................................................
                                                                                                                                      
142. Computer Requirements
............................................................................................................
                                                                                                              
153. File Types
....................................................................................................................................
                                                                                                                                      
164. File Paths
....................................................................................................................................
                                                                                                                                      
175. Backups
......................................................................................................................................
                                                                                                                                        
186. Examples and Tutorials
..............................................................................................................
                                                                                                                
196.1. Tutorial 1 - SPY Crossover
........................................................................................................
                                                                                                          
236.2. Tutorial 2 - Simple Optimization
................................................................................................
                                                                                                  
296.3. Tutorial 3 - Simple Scan
...........................................................................................................
                                                                                                             
366.4. Tutorial 4 - ETF Rotation
..........................................................................................................
                                                                                                            
397. Software User Interface
.............................................................................................................
                                                                                                               
457.1. Common Menus
......................................................................................................................
                                                                                                                        
467.1.1. File Menu
.........................................................................................................................
                                                                                                                           
467.1.2. Edit Menu
........................................................................................................................
                                                                                                                          
487.1.3. View Menu
.......................................................................................................................
                                                                                                                         
507.1.4. Data Menu
.......................................................................................................................
                                                                                                                         
517.1.5. Run Menu
........................................................................................................................
                                                                                                                          
527.1.6. Window Menu
..................................................................................................................
                                                                                                                    
537.1.7. Help Menu
.......................................................................................................................
                                                                                                                         
537.2. Child Window Menus
................................................................................................................
                                                                                                                  
547.2.1. Chart Menu
......................................................................................................................
                                                                                                                        
547.2.2. Graph Menu
.....................................................................................................................
                                                                                                                       
567.2.3. List Menu
.........................................................................................................................
                                                                                                                           
577.2.4. Log Menu
........................................................................................................................
                                                                                                                          
587.2.5. Plot Menu
........................................................................................................................
                                                                                                                          
587.2.6. ResGraph Menu
................................................................................................................
                                                                                                                  
597.2.7. Results Menu
...................................................................................................................
                                                                                                                     
617.2.8. Scan Menu
.......................................................................................................................
                                                                                                                         
627.2.9. Script Menu
......................................................................................................................
                                                                                                                        
637.2.10. Compare Menu
...............................................................................................................
                                                                                                                 
647.2.11. Trades Menu
..................................................................................................................
                                                                                                                    
657.3. Bars and Panels
.......................................................................................................................
                                                                                                                         
667.3.1. Tool Bar
..........................................................................................................................
                                                                                                                            
667.3.2. Status Bar
........................................................................................................................
                                                                                                                          
677.3.3. Settings Panel
..................................................................................................................
                                                                                                                    
687.3.4. Debug Panel
....................................................................................................................
                                                                                                                      
707.4. Text Editor Windows
................................................................................................................
                                                                                                                  
737.4.1. Script Windows
................................................................................................................
                                                                                                                  
737.4.2. Log Windows
...................................................................................................................
                                                                                                                     
747.5. List Windows
..........................................................................................................................
                                                                                                                            
757.5.1. Results Windows
..............................................................................................................
                                                                                                                
777.5.2. Trade List Windows
..........................................................................................................
                                                                                                            
787.5.3. Scan Windows
..................................................................................................................
                                                                                                                    
817.5.4. Trade Comparison Windows
...............................................................................................
                                                                                                 
837.5.5. Other List Windows
..........................................................................................................
                                                                                                            
857.6. Graphical Windows
..................................................................................................................
                                                                                                                    
857.6.1. Daily Stats Graphs
............................................................................................................
                                                                                                              
857.6.2. Optimization Results Graphs
..............................................................................................
                                                                                                
897.6.3. Candlestick/Bar Charts
......................................................................................................
                                                                                                        
907.6.4. Trade Plots and Analysis
....................................................................................................
                                                                                                      
937.7. Program Options Dialog
...........................................................................................................
                                                                                                             
1037.8. Report Options Dialog
..............................................................................................................
                                                                                                                
1067.9. RealTest Function Key Reference
...............................................................................................
                                                                                                 
1078. Importing Bar Data
....................................................................................................................
                                                                                                                      
1108.1. Norgate Data Import
................................................................................................................
                                                                                                                  
1108.2. CSI Futures Import
..................................................................................................................
                                                                                                                    
113
18.3. CSI Stocks Import
...................................................................................................................
                                                                                                                     
1188.4. CSV Import
.............................................................................................................................
                                                                                                                               
1228.5. MetaStock Import
....................................................................................................................
                                                                                                                      
1228.6. Tiingo Import
..........................................................................................................................
                                                                                                                            
1238.7. Yahoo Import
..........................................................................................................................
                                                                                                                            
1248.8. Multi-Source Import
.................................................................................................................
                                                                                                                   
1258.9. Symbol Information Files
..........................................................................................................
                                                                                                            
1278.10. Futures Symbol Information
....................................................................................................
                                                                                                      
1288.11. Event List Files
......................................................................................................................
                                                                                                                        
1298.12. Dividend and Constituency Events
...........................................................................................
                                                                                             
1299. Running Scans
............................................................................................................................
                                                                                                                              
13110. Running Tests
...........................................................................................................................
                                                                                                                             
13210.1. Multiple Tests and Optimization 
.............................................................................................
                                                                                               
13210.2. Walk-Forward Tests
...............................................................................................................
                                                                                                                 
13411. Using an Imported Trade List
..................................................................................................
                                                                                                    
13812. Using Command Line Mode
......................................................................................................
                                                                                                        
14213. Using Multiple Instances
..........................................................................................................
                                                                                                            
14414. Analyzing Test Results
.............................................................................................................
                                                                                                               
14514.1. Test Summary Report
.............................................................................................................
                                                                                                               
14614.2. Test Details Log
....................................................................................................................
                                                                                                                      
14715. Trading Your System
................................................................................................................
                                                                                                                  
14915.1. Tomorrow's Orders
................................................................................................................
                                                                                                                  
14915.2. Generated Order Types
..........................................................................................................
                                                                                                            
15215.3. OrderClerk
............................................................................................................................
                                                                                                                              
15415.4. CSV Order Baskets
.................................................................................................................
                                                                                                                   
15415.5. IB Rebalance Tool
..................................................................................................................
                                                                                                                    
15715.6. Multi-Row Scan
.....................................................................................................................
                                                                                                                       
15815.7. Test Output Scan
...................................................................................................................
                                                                                                                     
15916. Backtest Engine Details
............................................................................................................
                                                                                                              
16116.1. Asset Allocation and Position Sizing
.........................................................................................
                                                                                           
16216.2. Capacity Constraints
...............................................................................................................
                                                                                                                 
16316.3. Compounding
........................................................................................................................
                                                                                                                          
16516.4. Split Handling
........................................................................................................................
                                                                                                                          
16816.5. Dividend Handling
.................................................................................................................
                                                                                                                   
17016.6. Intraday Fills With Daily Bars
..................................................................................................
                                                                                                    
17416.7. Intraday Fill Sequence Assumptions
.........................................................................................
                                                                                           
17516.8. Bar Sizes and Multiple Timeframes
...........................................................................................
                                                                                             
17516.9. Calendar Alignment
................................................................................................................
                                                                                                                  
17616.10. Calculation of Trade Excursions
.............................................................................................
                                                                                               
17716.11. The Current Bar in Formula Evaluation
...................................................................................
                                                                                     
17716.12. Specifying a Time Stop
.........................................................................................................
                                                                                                           
17816.13. Number of Bars Required for Functions and Indicators
.............................................................
                                                               
17816.14. Scaling In or Out of Positions
................................................................................................
                                                                                                  
18016.15. Referring to Past Trades in Strategy Formulas
.........................................................................
                                                                           
18316.16. Testing Multi-Currency Strategies
...........................................................................................
                                                                                             
18316.17. Using CSI Futures Data
.........................................................................................................
                                                                                                           
18617. Realtest Script Language
.........................................................................................................
                                                                                                           
19017.1. Bar Offsets
............................................................................................................................
                                                                                                                              
19117.2. Date Constants
......................................................................................................................
                                                                                                                        
19217.3. Other Constants
....................................................................................................................
                                                                                                                      
19317.4. Symbol References
.................................................................................................................
                                                                                                                   
19317.5. String Values
.........................................................................................................................
                                                                                                                           
19317.6. User-Defined Item Names
.......................................................................................................
                                                                                                         
19417.7. Item Name Overrides
.............................................................................................................
                                                                                                               
19517.8. Script Comments
...................................................................................................................
                                                                                                                     
19517.9. Conditional Comments
...........................................................................................................
                                                                                                             
19617.10. File Path Syntax
...................................................................................................................
                                                                                                                     
19717.11. Output Format Specification
..................................................................................................
                                                                                                    
19817.12. New Script Template
............................................................................................................
                                                                                                              
199
217.13. Combining Scripts
................................................................................................................
                                                                                                                  
19917.14. Default Scripts
.....................................................................................................................
                                                                                                                       
20017.15. Script Sections
.....................................................................................................................
                                                                                                                       
20117.15.1. Import Section
..............................................................................................................
                                                                                                                
20217.15.2. Data Section
.................................................................................................................
                                                                                                                   
20217.15.2.1. One-Pass Data Formulas
.........................................................................................
                                                                                           
20317.15.2.2. Self-Referential Items
.............................................................................................
                                                                                               
20517.15.2.3. Bar-Size-Specific Items
...........................................................................................
                                                                                             
20617.15.3. TestData and StratData Sections
....................................................................................
                                                                                      
20817.15.4. Scan and TestScan Sections
...........................................................................................
                                                                                             
21217.15.5. Settings Sections
..........................................................................................................
                                                                                                            
21317.15.6. Library Section
..............................................................................................................
                                                                                                                
21517.15.7. Strategy Section
............................................................................................................
                                                                                                              
21617.15.7.1. Strategy Names
.....................................................................................................
                                                                                                       
21717.15.7.2. Special Strategy Types
............................................................................................
                                                                                              
21717.15.7.3. Strategy Elements
..................................................................................................
                                                                                                    
21817.15.7.4. Strategy Element Value Types and Defaults
..............................................................
                                                                
21917.15.8. Parameters Section
.......................................................................................................
                                                                                                         
22117.15.9. Results Section
.............................................................................................................
                                                                                                               
22317.15.10. Graphs Section
............................................................................................................
                                                                                                              
22317.15.11. Trades Section
............................................................................................................
                                                                                                              
22517.15.12. Charts Section
.............................................................................................................
                                                                                                               
22617.15.13. Include Section
...........................................................................................................
                                                                                                             
22717.16. Formula Syntax
....................................................................................................................
                                                                                                                      
22817.16.1. Operators
.....................................................................................................................
                                                                                                                       
22917.16.2. Formula Evaluation
........................................................................................................
                                                                                                          
23017.16.3. Breadth Tags / Cross-Sectional Functions
........................................................................
                                                                          
23117.16.4. Special Syntax for Individual Futures Contract Testing
.......................................................
                                                         
23217.16.5. Statistics Values in Formulas
..........................................................................................
                                                                                            
23417.17. Syntax Element Categories
....................................................................................................
                                                                                                      
23517.17.1. Script Sections
..............................................................................................................
                                                                                                                
23517.17.2. Settings
.......................................................................................................................
                                                                                                                         
23617.17.3. Import Specification
......................................................................................................
                                                                                                        
23817.17.4. Strategy Elements
.........................................................................................................
                                                                                                           
23917.17.5. Bar Data Values
............................................................................................................
                                                                                                              
24117.17.6. Indicator Functions
.......................................................................................................
                                                                                                         
24217.17.7. Multi-Bar Functions
.......................................................................................................
                                                                                                         
24317.17.8. Cross-Sectional Functions
..............................................................................................
                                                                                                
24417.17.9. General-Purpose Functions
.............................................................................................
                                                                                               
24517.17.10. String Functions
..........................................................................................................
                                                                                                            
24717.17.11. Stock/Contract Information
..........................................................................................
                                                                                            
24717.17.12. Current Position Information
.........................................................................................
                                                                                           
24817.17.13. Current Strategy Information
........................................................................................
                                                                                          
24917.17.14. Test Statistics Arrays
...................................................................................................
                                                                                                     
24917.17.15. Trade Record Values
....................................................................................................
                                                                                                      
25117.17.16. Trade Statistics Functions
.............................................................................................
                                                                                               
25217.18. Syntax Element Details
.........................................................................................................
                                                                                                           
25217.18.1. #Avg
...........................................................................................................................
                                                                                                                             
25217.18.2. #ByCII
.........................................................................................................................
                                                                                                                           
25317.18.3. #ByEcon
......................................................................................................................
                                                                                                                        
25317.18.4. #ByGroup
....................................................................................................................
                                                                                                                      
25317.18.5. #ByIndu
......................................................................................................................
                                                                                                                        
25417.18.6. #ByListNum
.................................................................................................................
                                                                                                                   
25417.18.7. #ByMkt
........................................................................................................................
                                                                                                                          
25517.18.8. #BySect
.......................................................................................................................
                                                                                                                         
25517.18.9. #Count
........................................................................................................................
                                                                                                                          
25517.18.10. #DenseRank
...............................................................................................................
                                                                                                                 
25617.18.11. #Highest
....................................................................................................................
                                                                                                                      
25617.18.12. #Lowest
.....................................................................................................................
                                                                                                                       
257
317.18.13. #Median
....................................................................................................................
                                                                                                                      
25717.18.14. #OnePerDate
..............................................................................................................
                                                                                                                
25717.18.15. #OnePerSym
..............................................................................................................
                                                                                                                
25817.18.16. #PercentRank
.............................................................................................................
                                                                                                               
25817.18.17. #Rank
........................................................................................................................
                                                                                                                          
25917.18.18. #SlowCalc
..................................................................................................................
                                                                                                                    
25917.18.19. #StdDev
....................................................................................................................
                                                                                                                      
25917.18.20. #Sum
........................................................................................................................
                                                                                                                          
26017.18.21. ?CII
...........................................................................................................................
                                                                                                                             
26017.18.22. ?Currency
...................................................................................................................
                                                                                                                     
26017.18.23. ?Domicile
...................................................................................................................
                                                                                                                     
26017.18.24. ?EconSect
...................................................................................................................
                                                                                                                     
26117.18.25. ?EndDate
...................................................................................................................
                                                                                                                     
26117.18.26. ?EquityType
................................................................................................................
                                                                                                                  
26117.18.27. ?Exchange
..................................................................................................................
                                                                                                                    
26217.18.28. ?IndGroup
..................................................................................................................
                                                                                                                    
26217.18.29. ?Industry
....................................................................................................................
                                                                                                                      
26217.18.30. ?ListingType
...............................................................................................................
                                                                                                                 
26217.18.31. ?LocalTime
.................................................................................................................
                                                                                                                   
26317.18.32. ?Name
.......................................................................................................................
                                                                                                                         
26317.18.33. ?ReportingCurrency
.....................................................................................................
                                                                                                       
26317.18.34. ?RunMode
..................................................................................................................
                                                                                                                    
26317.18.35. ?ScriptName
...............................................................................................................
                                                                                                                 
26417.18.36. ?Sector
......................................................................................................................
                                                                                                                        
26417.18.37. ?Strategy
....................................................................................................................
                                                                                                                      
26417.18.38. ?StratType
..................................................................................................................
                                                                                                                    
26417.18.39. ?StartDate
..................................................................................................................
                                                                                                                    
26517.18.40. ?Symbol
.....................................................................................................................
                                                                                                                       
26517.18.41. ?Type
........................................................................................................................
                                                                                                                          
26517.18.42. Abs
............................................................................................................................
                                                                                                                              
26617.18.43. AccountSize
................................................................................................................
                                                                                                                  
26617.18.44. AccountType
...............................................................................................................
                                                                                                                 
26617.18.45. Adjustment
.................................................................................................................
                                                                                                                   
26717.18.46. ADX
...........................................................................................................................
                                                                                                                             
26717.18.47. AEMA
.........................................................................................................................
                                                                                                                           
26817.18.48. AESD
.........................................................................................................................
                                                                                                                           
26817.18.49. Allocation
...................................................................................................................
                                                                                                                     
26917.18.50. AllowMissingBar
..........................................................................................................
                                                                                                            
27017.18.51. AllowNoVolume
...........................................................................................................
                                                                                                             
27017.18.52. AllowSameName
.........................................................................................................
                                                                                                           
27117.18.53. AlwaysImport
.............................................................................................................
                                                                                                               
27117.18.54. Ambiguity
...................................................................................................................
                                                                                                                     
27117.18.55. ArcCos
.......................................................................................................................
                                                                                                                         
27217.18.56. ArcSin
........................................................................................................................
                                                                                                                          
27217.18.57. ArcTan
.......................................................................................................................
                                                                                                                         
27217.18.58. Arg1-Arg9
...................................................................................................................
                                                                                                                     
27317.18.59. Assert
........................................................................................................................
                                                                                                                          
27317.18.60. ATR
...........................................................................................................................
                                                                                                                             
27417.18.61. BarDate
......................................................................................................................
                                                                                                                        
27517.18.62. BarNum
......................................................................................................................
                                                                                                                        
27517.18.63. BarsHeld
....................................................................................................................
                                                                                                                      
27517.18.64. BarsLeft
.....................................................................................................................
                                                                                                                       
27517.18.65. BarSize
.......................................................................................................................
                                                                                                                         
27617.18.66. BarStart
.....................................................................................................................
                                                                                                                       
27617.18.67. BBBot
........................................................................................................................
                                                                                                                          
27617.18.68. BBBotF
.......................................................................................................................
                                                                                                                         
27717.18.69. BBPct
.........................................................................................................................
                                                                                                                           
27717.18.70. BBPctF
.......................................................................................................................
                                                                                                                         
27817.18.71. BBTop
........................................................................................................................
                                                                                                                          
278
417.18.72. BBTopF
......................................................................................................................
                                                                                                                        
27917.18.73. BBTrend
.....................................................................................................................
                                                                                                                       
27917.18.74. BBTrendF
...................................................................................................................
                                                                                                                     
28017.18.75. BBWidth
.....................................................................................................................
                                                                                                                       
28017.18.76. BBWidthF
...................................................................................................................
                                                                                                                     
28117.18.77. Benchmark
.................................................................................................................
                                                                                                                   
28117.18.78. Bound
........................................................................................................................
                                                                                                                          
28117.18.79. CalendarSym
...............................................................................................................
                                                                                                                 
28217.18.80. CashInOut
..................................................................................................................
                                                                                                                    
28217.18.81. CashIntPct
..................................................................................................................
                                                                                                                    
28317.18.82. CashList
.....................................................................................................................
                                                                                                                       
28317.18.83. Category (definition)
....................................................................................................
                                                                                                      
28417.18.84. Category (reference)
....................................................................................................
                                                                                                      
28517.18.85. CCI
............................................................................................................................
                                                                                                                              
28517.18.86. CDF
...........................................................................................................................
                                                                                                                             
28517.18.87. Charts
........................................................................................................................
                                                                                                                          
28617.18.88. CIIFamily
...................................................................................................................
                                                                                                                     
28617.18.89. CIILevel
.....................................................................................................................
                                                                                                                       
28617.18.90. Classification
...............................................................................................................
                                                                                                                 
28717.18.91. Close or C
...................................................................................................................
                                                                                                                     
28717.18.92. CloseSlip
....................................................................................................................
                                                                                                                      
28717.18.93. Combined (function)
....................................................................................................
                                                                                                      
28817.18.94. Combined (section)
.....................................................................................................
                                                                                                       
28817.18.95. CommCurrency
............................................................................................................
                                                                                                              
28817.18.96. Commission
................................................................................................................
                                                                                                                  
28917.18.97. Compounded
..............................................................................................................
                                                                                                                
28917.18.98. Constituency
...............................................................................................................
                                                                                                                 
29017.18.99. Correl
.........................................................................................................................
                                                                                                                           
29117.18.100. CorrelAvg
..................................................................................................................
                                                                                                                    
29217.18.101. CorrelMed
.................................................................................................................
                                                                                                                   
29217.18.102. CorrelMin
..................................................................................................................
                                                                                                                    
29317.18.103. CorrMinSym
..............................................................................................................
                                                                                                                
29317.18.104. CorrelMax
.................................................................................................................
                                                                                                                   
29417.18.105. CorrelMaxSym
...........................................................................................................
                                                                                                             
29417.18.106. Cosine
......................................................................................................................
                                                                                                                        
29517.18.107. Cross
.......................................................................................................................
                                                                                                                         
29517.18.108. CountTrue
................................................................................................................
                                                                                                                  
29517.18.109. CRSI
........................................................................................................................
                                                                                                                          
29617.18.110. CSVDateFmt
.............................................................................................................
                                                                                                               
29617.18.111. CSVDelim
.................................................................................................................
                                                                                                                   
29717.18.112. CSVFields
.................................................................................................................
                                                                                                                   
29717.18.113. CSVFile
.....................................................................................................................
                                                                                                                       
29817.18.114. CSVNumFmt
..............................................................................................................
                                                                                                                
29817.18.115. Currency
...................................................................................................................
                                                                                                                     
29917.18.116. Data
........................................................................................................................
                                                                                                                          
29917.18.117. DataFile
....................................................................................................................
                                                                                                                      
29917.18.118. DataPath
..................................................................................................................
                                                                                                                    
30017.18.119. DataSource
...............................................................................................................
                                                                                                                 
30017.18.120. DataType
..................................................................................................................
                                                                                                                    
30017.18.121. Date
........................................................................................................................
                                                                                                                          
30117.18.122. DateBars
..................................................................................................................
                                                                                                                    
30117.18.123. DateDay
...................................................................................................................
                                                                                                                     
30217.18.124. DateDisplay
..............................................................................................................
                                                                                                                
30217.18.125. DateInput
.................................................................................................................
                                                                                                                   
30217.18.126. DateMonth
................................................................................................................
                                                                                                                  
30317.18.127. DateSym
..................................................................................................................
                                                                                                                    
30317.18.128. DateYear
..................................................................................................................
                                                                                                                    
30317.18.129. Day
..........................................................................................................................
                                                                                                                            
30417.18.130. DayOfWeek
...............................................................................................................
                                                                                                                 
304
517.18.131. DayOfYear
................................................................................................................
                                                                                                                  
30417.18.132. Days
........................................................................................................................
                                                                                                                          
30517.18.133. DaysPerYear
.............................................................................................................
                                                                                                               
30517.18.134. DebugEntry
...............................................................................................................
                                                                                                                 
30617.18.135. DebugEval
................................................................................................................
                                                                                                                  
30617.18.136. DebugExit
.................................................................................................................
                                                                                                                   
30717.18.137. DebugTargetStop
......................................................................................................
                                                                                                        
30717.18.138. DEMA
.......................................................................................................................
                                                                                                                         
30817.18.139. Dividend
...................................................................................................................
                                                                                                                     
30817.18.140. DllDataCalc
...............................................................................................................
                                                                                                                 
30917.18.141. DynamicSizing
...........................................................................................................
                                                                                                             
30917.18.142. EMA or XAvg
.............................................................................................................
                                                                                                               
31017.18.143. EndDate (Import)
......................................................................................................
                                                                                                        
31017.18.144. EndDate (Setting)
......................................................................................................
                                                                                                        
31117.18.145. EndOfMonth
..............................................................................................................
                                                                                                                
31117.18.146. EndOfQuarter
............................................................................................................
                                                                                                              
31117.18.147. EndOfTestExits
..........................................................................................................
                                                                                                            
31217.18.148. EndOfWeek
...............................................................................................................
                                                                                                                 
31217.18.149. EndOfYear
................................................................................................................
                                                                                                                  
31317.18.150. EntryDate
.................................................................................................................
                                                                                                                   
31317.18.151. EntryLimit
.................................................................................................................
                                                                                                                   
31317.18.152. EntryRank
.................................................................................................................
                                                                                                                   
31417.18.153. EntryScore
................................................................................................................
                                                                                                                  
31417.18.154. EntrySetup
................................................................................................................
                                                                                                                  
31517.18.155. EntrySkip
..................................................................................................................
                                                                                                                    
31517.18.156. EntryStop
.................................................................................................................
                                                                                                                   
31617.18.157. EntryTime
.................................................................................................................
                                                                                                                   
31617.18.158. EntryTradeValue
........................................................................................................
                                                                                                          
31717.18.159. ESD
.........................................................................................................................
                                                                                                                           
31817.18.160. Event
.......................................................................................................................
                                                                                                                         
31817.18.161. EventListFile
.............................................................................................................
                                                                                                               
31917.18.162. ExchangeMap
............................................................................................................
                                                                                                              
31917.18.163. ExcludeIf
..................................................................................................................
                                                                                                                    
32117.18.164. ExcludeList
...............................................................................................................
                                                                                                                 
32117.18.165. ExitLimit
...................................................................................................................
                                                                                                                     
32217.18.166. ExitLimitQty
..............................................................................................................
                                                                                                                
32217.18.167. ExitLimitTime
............................................................................................................
                                                                                                              
32317.18.168. ExitNum
...................................................................................................................
                                                                                                                     
32317.18.169. ExitQty
.....................................................................................................................
                                                                                                                       
32417.18.170. ExitRank
...................................................................................................................
                                                                                                                     
32417.18.171. ExitRule
....................................................................................................................
                                                                                                                      
32517.18.172. ExitScore
..................................................................................................................
                                                                                                                    
32617.18.173. ExitStop
...................................................................................................................
                                                                                                                     
32617.18.174. ExitStopQty
..............................................................................................................
                                                                                                                
32617.18.175. ExitStopTime
............................................................................................................
                                                                                                              
32717.18.176. ExitTime
...................................................................................................................
                                                                                                                     
32817.18.177. ExitTradeValue
..........................................................................................................
                                                                                                            
32817.18.178. Exp
..........................................................................................................................
                                                                                                                            
32817.18.179. Extern
......................................................................................................................
                                                                                                                        
32917.18.180. Extra
........................................................................................................................
                                                                                                                          
32917.18.181. F.xxx / F.xxx.Date
......................................................................................................
                                                                                                        
33017.18.182. FeesInOut
................................................................................................................
                                                                                                                  
33117.18.183. FeesList
....................................................................................................................
                                                                                                                      
33217.18.184. FillFraction
................................................................................................................
                                                                                                                  
33217.18.185. FillPrice
....................................................................................................................
                                                                                                                      
33317.18.186. FillPriceAvg
...............................................................................................................
                                                                                                                 
33317.18.187. FillPriceMax
...............................................................................................................
                                                                                                                 
33317.18.188. FillPriceMin
...............................................................................................................
                                                                                                                 
33417.18.189. FillQty
......................................................................................................................
                                                                                                                        
334
617.18.190. FillValue
...................................................................................................................
                                                                                                                     
33417.18.191. FilterNum
.................................................................................................................
                                                                                                                   
33517.18.192. Find
.........................................................................................................................
                                                                                                                           
33517.18.193. Format
.....................................................................................................................
                                                                                                                       
33517.18.194. FormatDate
..............................................................................................................
                                                                                                                
33617.18.195. Fundamentals
...........................................................................................................
                                                                                                             
33617.18.196. FunBar
.....................................................................................................................
                                                                                                                       
33717.18.197. FunStat
....................................................................................................................
                                                                                                                      
33817.18.198. FuturesMargin
...........................................................................................................
                                                                                                             
33817.18.199. FxRatio
.....................................................................................................................
                                                                                                                       
33917.18.200. GetField
....................................................................................................................
                                                                                                                      
33917.18.201. GreedyScoring
...........................................................................................................
                                                                                                             
34017.18.202. Graphs
.....................................................................................................................
                                                                                                                       
34017.18.203. High or H
.................................................................................................................
                                                                                                                   
34117.18.204. Highest or HHV
.........................................................................................................
                                                                                                           
34117.18.205. HMA or HAvg
............................................................................................................
                                                                                                              
34117.18.206. HolidayList
................................................................................................................
                                                                                                                  
34217.18.207. HVOL
.......................................................................................................................
                                                                                                                         
34217.18.208. ICDF
........................................................................................................................
                                                                                                                          
34317.18.209. IF
............................................................................................................................
                                                                                                                              
34317.18.210. IgnoreDividends
........................................................................................................
                                                                                                          
34417.18.211. Import
.....................................................................................................................
                                                                                                                       
34417.18.212. Include
.....................................................................................................................
                                                                                                                       
34417.18.213. IncludeList
................................................................................................................
                                                                                                                  
34517.18.214. InXXX
......................................................................................................................
                                                                                                                        
34617.18.215. InfoID
......................................................................................................................
                                                                                                                        
34617.18.216. InfoDelist / InfoExpiry
................................................................................................
                                                                                                  
34717.18.217. InfoFloat
..................................................................................................................
                                                                                                                    
34717.18.218. InfoGICS
..................................................................................................................
                                                                                                                    
34717.18.219. InfoMargin
................................................................................................................
                                                                                                                  
34817.18.220. InfoShares
................................................................................................................
                                                                                                                  
34817.18.221. InfoTRBC
..................................................................................................................
                                                                                                                    
34817.18.222. InList
.......................................................................................................................
                                                                                                                         
34917.18.223. InSet
........................................................................................................................
                                                                                                                          
34917.18.224. IsExit
.......................................................................................................................
                                                                                                                         
35017.18.225. IsNan
.......................................................................................................................
                                                                                                                         
35017.18.226. IsOrder
....................................................................................................................
                                                                                                                      
35217.18.227. IsSetup
....................................................................................................................
                                                                                                                      
35217.18.228. IsTracker
..................................................................................................................
                                                                                                                    
35217.18.229. Item
........................................................................................................................
                                                                                                                          
35317.18.230. KAMA
.......................................................................................................................
                                                                                                                         
35317.18.231. KBBot
.......................................................................................................................
                                                                                                                         
35417.18.232. KBTop
......................................................................................................................
                                                                                                                        
35417.18.233. KeepAdjusted
............................................................................................................
                                                                                                              
35517.18.234. KeepNonIncluded
......................................................................................................
                                                                                                        
35517.18.235. KeepRedundant
.........................................................................................................
                                                                                                           
35617.18.236. KeepTrades
...............................................................................................................
                                                                                                                 
35717.18.237. Kurtosis
....................................................................................................................
                                                                                                                      
35717.18.238. Left
..........................................................................................................................
                                                                                                                            
35717.18.239. Length
.....................................................................................................................
                                                                                                                       
35817.18.240. Library
......................................................................................................................
                                                                                                                        
35817.18.241. LimitExtra
.................................................................................................................
                                                                                                                   
35817.18.242. LimitSlip
...................................................................................................................
                                                                                                                     
35917.18.243. LinReg
......................................................................................................................
                                                                                                                        
35917.18.244. ListNum
....................................................................................................................
                                                                                                                      
36017.18.245. Log
..........................................................................................................................
                                                                                                                            
36017.18.246. LogFile
.....................................................................................................................
                                                                                                                       
36117.18.247. Logit
........................................................................................................................
                                                                                                                          
36217.18.248. Low or L
...................................................................................................................
                                                                                                                     
362
717.18.249. Lowest or LLV
...........................................................................................................
                                                                                                             
36217.18.250. MA or Avg
.................................................................................................................
                                                                                                                   
36317.18.251. MACD
.......................................................................................................................
                                                                                                                         
36317.18.252. MACDH
....................................................................................................................
                                                                                                                      
36317.18.253. MACDS
.....................................................................................................................
                                                                                                                       
36417.18.254. MarginIntPct
.............................................................................................................
                                                                                                               
36417.18.255. MarkToMarket
...........................................................................................................
                                                                                                             
36517.18.256. Match
.......................................................................................................................
                                                                                                                         
36517.18.257. Max
.........................................................................................................................
                                                                                                                           
36617.18.258. MaxN
.......................................................................................................................
                                                                                                                         
36717.18.259. MaxCatExp
................................................................................................................
                                                                                                                  
36717.18.260. MaxCatInv
................................................................................................................
                                                                                                                  
36717.18.261. MaxEntries
................................................................................................................
                                                                                                                  
36817.18.262. MaxExposure
.............................................................................................................
                                                                                                               
36817.18.263. MaxInvested
.............................................................................................................
                                                                                                               
36917.18.264. MaxLongExp
.............................................................................................................
                                                                                                               
37017.18.265. MaxLongInv
..............................................................................................................
                                                                                                                
37017.18.266. MaxNetExp
...............................................................................................................
                                                                                                                 
37117.18.267. MaxNetInv
................................................................................................................
                                                                                                                  
37117.18.268. MaxNewExp
..............................................................................................................
                                                                                                                
37217.18.269. MaxNewInv
...............................................................................................................
                                                                                                                 
37217.18.270. MaxNewPos
..............................................................................................................
                                                                                                                
37217.18.271. MaxPerTurn
..............................................................................................................
                                                                                                                
37317.18.272. MaxPositions
.............................................................................................................
                                                                                                               
37317.18.273. MaxSameCat
.............................................................................................................
                                                                                                               
37417.18.274. MaxSameSym
............................................................................................................
                                                                                                              
37417.18.275. MaxSetups
................................................................................................................
                                                                                                                  
37517.18.276. MaxShortExp
.............................................................................................................
                                                                                                               
37517.18.277. MaxShortInv
.............................................................................................................
                                                                                                               
37617.18.278. MaxSymExp
..............................................................................................................
                                                                                                                
37617.18.279. MaxSymInv
...............................................................................................................
                                                                                                                 
37717.18.280. MDI
.........................................................................................................................
                                                                                                                           
37717.18.281. Median
.....................................................................................................................
                                                                                                                       
37817.18.282. Mid
..........................................................................................................................
                                                                                                                            
37817.18.283. Min
..........................................................................................................................
                                                                                                                            
37817.18.284. MinN
........................................................................................................................
                                                                                                                          
37917.18.285. MinFreeCash
.............................................................................................................
                                                                                                               
37917.18.286. MinNetExp
................................................................................................................
                                                                                                                  
38017.18.287. MinNetInv
.................................................................................................................
                                                                                                                   
38017.18.288. MissingBars
...............................................................................................................
                                                                                                                 
38117.18.289. Month
......................................................................................................................
                                                                                                                        
38117.18.290. Namespace
...............................................................................................................
                                                                                                                 
38217.18.291. NextOpen
.................................................................................................................
                                                                                                                   
38317.18.292. NoNan
......................................................................................................................
                                                                                                                        
38317.18.293. Notes
.......................................................................................................................
                                                                                                                         
38317.18.294. NoWeekends
.............................................................................................................
                                                                                                               
38417.18.295. NthOfMonth
..............................................................................................................
                                                                                                                
38417.18.296. NumBars
..................................................................................................................
                                                                                                                    
38517.18.297. OBV
.........................................................................................................................
                                                                                                                           
38517.18.298. Open or O
................................................................................................................
                                                                                                                  
38617.18.299. OpenSlip
..................................................................................................................
                                                                                                                    
38617.18.300. OptimizeSettings
.......................................................................................................
                                                                                                         
38617.18.301. OrderClerkFolder
.......................................................................................................
                                                                                                         
38717.18.302. OrderNote / OrderExtra
..............................................................................................
                                                                                                
38817.18.303. OrderPrice
................................................................................................................
                                                                                                                  
38917.18.304. OrderRank
................................................................................................................
                                                                                                                  
38917.18.305. OrdersComment
........................................................................................................
                                                                                                          
39017.18.306. OrderSettings
............................................................................................................
                                                                                                              
39017.18.307. OrdersFile
.................................................................................................................
                                                                                                                   
390
817.18.308. OrdersFreeCash
.........................................................................................................
                                                                                                           
39117.18.309. OrdersInclude
...........................................................................................................
                                                                                                             
39117.18.310. OrdersLiveData
.........................................................................................................
                                                                                                           
39117.18.311. OrdersMktAsLmtPct
....................................................................................................
                                                                                                      
39217.18.312. OrdersMode
..............................................................................................................
                                                                                                                
39217.18.313. OrdersNetLiq
.............................................................................................................
                                                                                                               
39317.18.314. OrdersTemplate
........................................................................................................
                                                                                                          
39417.18.315. OrdersUseQtyIn
........................................................................................................
                                                                                                          
39517.18.316. OrderSum
.................................................................................................................
                                                                                                                   
39517.18.317. PadAlignSym
.............................................................................................................
                                                                                                               
39517.18.318. Padding
....................................................................................................................
                                                                                                                      
39617.18.319. Parameters
...............................................................................................................
                                                                                                                 
39617.18.320. PDI
..........................................................................................................................
                                                                                                                            
39717.18.321. Peak
........................................................................................................................
                                                                                                                          
39717.18.322. PeakBars
..................................................................................................................
                                                                                                                    
39817.18.323. PercentRank
..............................................................................................................
                                                                                                                
39817.18.324. PercentRankN
...........................................................................................................
                                                                                                             
39917.18.325. PointValue
................................................................................................................
                                                                                                                  
39917.18.326. PrevExitLimit
.............................................................................................................
                                                                                                               
40017.18.327. PrevExitStop
.............................................................................................................
                                                                                                               
40017.18.328. Product
....................................................................................................................
                                                                                                                      
40117.18.329. PositionSum
..............................................................................................................
                                                                                                                
40117.18.330. PriceRound
...............................................................................................................
                                                                                                                 
40217.18.331. QtyFinal
...................................................................................................................
                                                                                                                     
40217.18.332. QtyPrice
...................................................................................................................
                                                                                                                     
40317.18.333. QtyRound
.................................................................................................................
                                                                                                                   
40417.18.334. QtyType
...................................................................................................................
                                                                                                                     
40417.18.335. Quantity
...................................................................................................................
                                                                                                                     
40517.18.336. Random
...................................................................................................................
                                                                                                                     
40517.18.337. RandomSeed
.............................................................................................................
                                                                                                               
40617.18.338. Range or R
...............................................................................................................
                                                                                                                 
40617.18.339. Rank
........................................................................................................................
                                                                                                                          
40717.18.340. RankN
......................................................................................................................
                                                                                                                        
40717.18.341. Reason
.....................................................................................................................
                                                                                                                       
40717.18.342. Reduce
.....................................................................................................................
                                                                                                                       
40817.18.343. RemoveLatest
...........................................................................................................
                                                                                                             
40817.18.344. Replace
....................................................................................................................
                                                                                                                      
40917.18.345. ReportContent
...........................................................................................................
                                                                                                             
40917.18.346. ReportsFolder
...........................................................................................................
                                                                                                             
40917.18.347. Rescale
....................................................................................................................
                                                                                                                      
41017.18.348. Results
.....................................................................................................................
                                                                                                                       
41017.18.349. ResultsFile
................................................................................................................
                                                                                                                  
41017.18.350. Right
........................................................................................................................
                                                                                                                          
41117.18.351. RiskFreeRateSym
.......................................................................................................
                                                                                                         
41117.18.352. ROC or PctChg
..........................................................................................................
                                                                                                            
41217.18.353. RollCost
....................................................................................................................
                                                                                                                      
41217.18.354. Round
......................................................................................................................
                                                                                                                        
41317.18.355. RSI
..........................................................................................................................
                                                                                                                            
41317.18.356. RRSI
........................................................................................................................
                                                                                                                          
41417.18.357. RsiF
.........................................................................................................................
                                                                                                                           
41417.18.358. S.Alloc
......................................................................................................................
                                                                                                                        
41517.18.359. S.BPx
.......................................................................................................................
                                                                                                                         
41517.18.360. S.CashInOut
.............................................................................................................
                                                                                                               
41617.18.361. S.Comms
..................................................................................................................
                                                                                                                    
41617.18.362. S.Compounded
..........................................................................................................
                                                                                                            
41617.18.363. S.Date
......................................................................................................................
                                                                                                                        
41717.18.364. S.DDBars
..................................................................................................................
                                                                                                                    
41717.18.365. S.DDDlr
....................................................................................................................
                                                                                                                      
41717.18.366. S.DDPct
....................................................................................................................
                                                                                                                      
417
917.18.367. S.Dividends
...............................................................................................................
                                                                                                                 
41817.18.368. S.Entries
...................................................................................................................
                                                                                                                     
41817.18.369. S.EntryOrders
............................................................................................................
                                                                                                              
41817.18.370. S.Equity
....................................................................................................................
                                                                                                                      
41817.18.371. S.Exits
......................................................................................................................
                                                                                                                        
41917.18.372. S.Exposure
...............................................................................................................
                                                                                                                 
41917.18.373. S.FeesInOut
..............................................................................................................
                                                                                                                
41917.18.374. S.First
......................................................................................................................
                                                                                                                        
42017.18.375. S.FreeCash
...............................................................................................................
                                                                                                                 
42017.18.376. S.FuturesMargin
........................................................................................................
                                                                                                          
42117.18.377. S.Interest
.................................................................................................................
                                                                                                                   
42117.18.378. S.Invested
................................................................................................................
                                                                                                                  
42117.18.379. S.LongExp
................................................................................................................
                                                                                                                  
42217.18.380. S.LongInv
.................................................................................................................
                                                                                                                   
42217.18.381. S.LossAmt
................................................................................................................
                                                                                                                  
42217.18.382. S.LossBars
................................................................................................................
                                                                                                                  
42217.18.383. S.Losses
...................................................................................................................
                                                                                                                     
42317.18.384. S.LossPct
..................................................................................................................
                                                                                                                    
42317.18.385. S.LossPctAlloc
...........................................................................................................
                                                                                                             
42317.18.386. S.M2M
......................................................................................................................
                                                                                                                        
42317.18.387. S.MAE
......................................................................................................................
                                                                                                                        
42317.18.388. S.MFE
......................................................................................................................
                                                                                                                        
42417.18.389. S.MarginReq
.............................................................................................................
                                                                                                               
42417.18.390. S.MaxAlloc
................................................................................................................
                                                                                                                  
42417.18.391. S.MaxDDBars
............................................................................................................
                                                                                                              
42417.18.392. S.MaxDDDlr
..............................................................................................................
                                                                                                                
42517.18.393. S.MaxDDPct
..............................................................................................................
                                                                                                                
42517.18.394. S.MaxEquity
..............................................................................................................
                                                                                                                
42517.18.395. S.MinAlloc
.................................................................................................................
                                                                                                                   
42517.18.396. S.MinEquity
...............................................................................................................
                                                                                                                 
42517.18.397. S.NetDlr
...................................................................................................................
                                                                                                                     
42617.18.398. S.NetFx
....................................................................................................................
                                                                                                                      
42617.18.399. S.NetPct
...................................................................................................................
                                                                                                                     
42617.18.400. S.Number
.................................................................................................................
                                                                                                                   
42617.18.401. S.Positions
................................................................................................................
                                                                                                                  
42717.18.402. S.RiskFreeRate
..........................................................................................................
                                                                                                            
42717.18.403. S.RollCosts
...............................................................................................................
                                                                                                                 
42817.18.404. S.Setups
...................................................................................................................
                                                                                                                     
42817.18.405. S.ShortExp
................................................................................................................
                                                                                                                  
42817.18.406. S.ShortInv
................................................................................................................
                                                                                                                  
42817.18.407. S.Slips
......................................................................................................................
                                                                                                                        
42917.18.408. S.StartEquity
.............................................................................................................
                                                                                                               
42917.18.409. S.Stops
....................................................................................................................
                                                                                                                      
42917.18.410. S.Targets
..................................................................................................................
                                                                                                                    
42917.18.411. S.TradeBars
..............................................................................................................
                                                                                                                
43017.18.412. S.TradeDlr
................................................................................................................
                                                                                                                  
43017.18.413. S.TradePct
................................................................................................................
                                                                                                                  
43017.18.414. S.TradePctAlloc
.........................................................................................................
                                                                                                           
43017.18.415. S.TWEQ
...................................................................................................................
                                                                                                                     
43017.18.416. S.Usage
....................................................................................................................
                                                                                                                      
43117.18.417. S.WinAmt
.................................................................................................................
                                                                                                                   
43117.18.418. S.WinBars
.................................................................................................................
                                                                                                                   
43117.18.419. S.WinPct
...................................................................................................................
                                                                                                                     
43117.18.420. S.WinPctAlloc
............................................................................................................
                                                                                                              
43217.18.421. S.Wins
.....................................................................................................................
                                                                                                                       
43217.18.422. SAR
.........................................................................................................................
                                                                                                                           
43217.18.423. SarF
.........................................................................................................................
                                                                                                                           
43217.18.424. SaveAs
.....................................................................................................................
                                                                                                                       
43317.18.425. SaveChartsTo
............................................................................................................
                                                                                                              
433
1017.18.426. SavePositionsAs
........................................................................................................
                                                                                                          
43417.18.427. SaveScanAs
..............................................................................................................
                                                                                                                
43417.18.428. SaveStatsAs
..............................................................................................................
                                                                                                                
43417.18.429. SaveTestListAs
..........................................................................................................
                                                                                                            
43517.18.430. SaveTradesAs
............................................................................................................
                                                                                                              
43517.18.431. SaveTradesType
........................................................................................................
                                                                                                          
43617.18.432. Scan
........................................................................................................................
                                                                                                                          
43617.18.433. ScanInclude
..............................................................................................................
                                                                                                                
43617.18.434. ScanNoDefCols
..........................................................................................................
                                                                                                            
43617.18.435. ScanNoHeader
..........................................................................................................
                                                                                                            
43717.18.436. ScanNoWindow
.........................................................................................................
                                                                                                           
43717.18.437. ScanSettings
.............................................................................................................
                                                                                                               
43717.18.438. Select
.......................................................................................................................
                                                                                                                         
43717.18.439. Sequence
..................................................................................................................
                                                                                                                    
43817.18.440. Settings
....................................................................................................................
                                                                                                                      
43917.18.441. SetupRank
................................................................................................................
                                                                                                                  
43917.18.442. SetupScore
...............................................................................................................
                                                                                                                 
43917.18.443. SetupSkip
.................................................................................................................
                                                                                                                   
44017.18.444. SetupSum
.................................................................................................................
                                                                                                                   
44017.18.445. Shares or Contracts
...................................................................................................
                                                                                                     
44017.18.446. ShortLoanIntPct
........................................................................................................
                                                                                                          
44117.18.447. ShortPrcdsIntPct
........................................................................................................
                                                                                                          
44117.18.448. Side (position)
..........................................................................................................
                                                                                                            
44217.18.449. Side (strategy)
..........................................................................................................
                                                                                                            
44217.18.450. Sign
.........................................................................................................................
                                                                                                                           
44217.18.451. SigSpike
...................................................................................................................
                                                                                                                     
44317.18.452. SinceHigh
.................................................................................................................
                                                                                                                   
44317.18.453. SinceLow
..................................................................................................................
                                                                                                                    
44317.18.454. SinceTrue
.................................................................................................................
                                                                                                                   
44417.18.455. Sine
.........................................................................................................................
                                                                                                                           
44417.18.456. Skewness
.................................................................................................................
                                                                                                                   
44517.18.457. SkipTestIf
.................................................................................................................
                                                                                                                   
44517.18.458. Slippage
...................................................................................................................
                                                                                                                     
44617.18.459. Slope
.......................................................................................................................
                                                                                                                         
44717.18.460. Spearman
.................................................................................................................
                                                                                                                   
44717.18.461. Split
.........................................................................................................................
                                                                                                                           
44717.18.462. Sqr
..........................................................................................................................
                                                                                                                            
44817.18.463. StartDate (Import)
.....................................................................................................
                                                                                                       
44817.18.464. StartDate (Setting)
....................................................................................................
                                                                                                      
44917.18.465. StartPercent
..............................................................................................................
                                                                                                                
44917.18.466. StatsGroup
...............................................................................................................
                                                                                                                 
44917.18.467. StatsIncludeCash
.......................................................................................................
                                                                                                         
45017.18.468. StdDev
.....................................................................................................................
                                                                                                                       
45017.18.469. StdErr
......................................................................................................................
                                                                                                                        
45117.18.470. STOC
.......................................................................................................................
                                                                                                                         
45217.18.471. StopSlip
....................................................................................................................
                                                                                                                      
45317.18.472. StratData
..................................................................................................................
                                                                                                                    
45317.18.473. Strategy
...................................................................................................................
                                                                                                                     
45317.18.474. StrategyScore
............................................................................................................
                                                                                                              
45317.18.475. StratNum
..................................................................................................................
                                                                                                                    
45417.18.476. StratRef
....................................................................................................................
                                                                                                                      
45417.18.477. Sum
.........................................................................................................................
                                                                                                                           
45517.18.478. SumSince
.................................................................................................................
                                                                                                                   
45517.18.479. SumSQ
.....................................................................................................................
                                                                                                                       
45617.18.480. SuperTrend
...............................................................................................................
                                                                                                                 
45617.18.481. Switch
......................................................................................................................
                                                                                                                        
45717.18.482. Symbol
.....................................................................................................................
                                                                                                                       
45717.18.483. SymChangeList
..........................................................................................................
                                                                                                            
45817.18.484. SymInfoFile
..............................................................................................................
                                                                                                                
459
1117.18.485. SymRef
....................................................................................................................
                                                                                                                      
45917.18.486. T.Bars
......................................................................................................................
                                                                                                                        
46017.18.487. T.CommIn
................................................................................................................
                                                                                                                  
46017.18.488. T.CommOut
..............................................................................................................
                                                                                                                
46017.18.489. T.DateIn
...................................................................................................................
                                                                                                                     
46017.18.490. T.DateOut
................................................................................................................
                                                                                                                  
46117.18.491. T.Div
........................................................................................................................
                                                                                                                          
46117.18.492. T.Fraction
.................................................................................................................
                                                                                                                   
46117.18.493. T.FxIn
......................................................................................................................
                                                                                                                        
46117.18.494. T.FxOut
....................................................................................................................
                                                                                                                      
46217.18.495. T.Highest
.................................................................................................................
                                                                                                                   
46217.18.496. T.Lowest
..................................................................................................................
                                                                                                                    
46217.18.497. T.NetFx
....................................................................................................................
                                                                                                                      
46217.18.498. T.NetPct
...................................................................................................................
                                                                                                                     
46317.18.499. T.Points
....................................................................................................................
                                                                                                                      
46317.18.500. T.PriceIn
..................................................................................................................
                                                                                                                    
46317.18.501. T.PriceOut
................................................................................................................
                                                                                                                  
46317.18.502. T.Profit
.....................................................................................................................
                                                                                                                       
46417.18.503. T.PtVal
.....................................................................................................................
                                                                                                                       
46417.18.504. T.QtyIn
....................................................................................................................
                                                                                                                      
46417.18.505. T.QtyOut
..................................................................................................................
                                                                                                                    
46417.18.506. T.Reason
..................................................................................................................
                                                                                                                    
46417.18.507. T.RollCosts
...............................................................................................................
                                                                                                                 
46617.18.508. T.Side
......................................................................................................................
                                                                                                                        
46617.18.509. T.SlipIn
....................................................................................................................
                                                                                                                      
46617.18.510. T.SlipOut
..................................................................................................................
                                                                                                                    
46617.18.511. T.SplitIn
...................................................................................................................
                                                                                                                     
46617.18.512. T.SplitOut
.................................................................................................................
                                                                                                                   
46617.18.513. T.Strat
.....................................................................................................................
                                                                                                                       
46717.18.514. T.TimeIn
..................................................................................................................
                                                                                                                    
46717.18.515. T.TimeOut
................................................................................................................
                                                                                                                  
46717.18.516. T.ValueIn
.................................................................................................................
                                                                                                                   
46717.18.517. T.ValueOut
...............................................................................................................
                                                                                                                 
46817.18.518. Tangent
...................................................................................................................
                                                                                                                     
46817.18.519. TanH
........................................................................................................................
                                                                                                                          
46817.18.520. TargetPrice
...............................................................................................................
                                                                                                                 
46917.18.521. TEMA
.......................................................................................................................
                                                                                                                         
46917.18.522. Template
..................................................................................................................
                                                                                                                    
47017.18.523. TestInclude
...............................................................................................................
                                                                                                                 
47017.18.524. TestData
..................................................................................................................
                                                                                                                    
47017.18.525. TestName
.................................................................................................................
                                                                                                                   
47117.18.526. TestOutput
...............................................................................................................
                                                                                                                 
47117.18.527. TestScan
..................................................................................................................
                                                                                                                    
47117.18.528. TestScanAllDates
.......................................................................................................
                                                                                                         
47217.18.529. TestSettings
..............................................................................................................
                                                                                                                
47217.18.530. This
.........................................................................................................................
                                                                                                                           
47217.18.531. TickSize
....................................................................................................................
                                                                                                                      
47317.18.532. TLAdjusted
...............................................................................................................
                                                                                                                 
47317.18.533. TLAdoptPos
..............................................................................................................
                                                                                                                
47417.18.534. TLDateFmt
................................................................................................................
                                                                                                                  
47417.18.535. TLDelim
....................................................................................................................
                                                                                                                      
47417.18.536. TLEndDate
................................................................................................................
                                                                                                                  
47517.18.537. TLFields
....................................................................................................................
                                                                                                                      
47517.18.538. TLNumFmt
................................................................................................................
                                                                                                                  
47617.18.539. TLStratName
.............................................................................................................
                                                                                                               
47717.18.540. TLTimeShift
..............................................................................................................
                                                                                                                
47717.18.541. TLValueIn
.................................................................................................................
                                                                                                                   
47817.18.542. TLValueOut
...............................................................................................................
                                                                                                                 
47817.18.543. ToDate
.....................................................................................................................
                                                                                                                       
478
1217.18.544. ToLower
...................................................................................................................
                                                                                                                     
47917.18.545. ToNum
.....................................................................................................................
                                                                                                                       
47917.18.546. ToUpper
...................................................................................................................
                                                                                                                     
47917.18.547. Top
..........................................................................................................................
                                                                                                                            
48017.18.548. Tracker
.....................................................................................................................
                                                                                                                       
48017.18.549. TradeList
..................................................................................................................
                                                                                                                    
48117.18.550. Trades
......................................................................................................................
                                                                                                                        
48117.18.551. TradeStatAvg
............................................................................................................
                                                                                                              
48117.18.552. TradeStatMax
............................................................................................................
                                                                                                              
48217.18.553. TradeStatMin
............................................................................................................
                                                                                                              
48217.18.554. TradeStatStdDev
.......................................................................................................
                                                                                                         
48317.18.555. TradeStatSum
...........................................................................................................
                                                                                                             
48317.18.556. Trough
.....................................................................................................................
                                                                                                                       
48317.18.557. TroughBars
...............................................................................................................
                                                                                                                 
48417.18.558. TrueInRow
...............................................................................................................
                                                                                                                 
48417.18.559. TrueRange or TR
.......................................................................................................
                                                                                                         
48517.18.560. UntilTrue
..................................................................................................................
                                                                                                                    
48517.18.561. Update
.....................................................................................................................
                                                                                                                       
48617.18.562. UseAvailableBars
.......................................................................................................
                                                                                                         
48617.18.563. Using
.......................................................................................................................
                                                                                                                         
48617.18.564. Volume or V
..............................................................................................................
                                                                                                                
48717.18.565. VWMA
......................................................................................................................
                                                                                                                        
48717.18.566. WalkForward
.............................................................................................................
                                                                                                               
48817.18.567. Week
.......................................................................................................................
                                                                                                                         
48817.18.568. WhenTrue
.................................................................................................................
                                                                                                                   
48817.18.569. WMA or WAvg
...........................................................................................................
                                                                                                             
48917.18.570. Year
.........................................................................................................................
                                                                                                                           
48917.18.571. YInt
.........................................................................................................................
                                                                                                                           
489
131. Welcome!
 Welcome to RealTest!
RealTest is a multi-strategy portfolio-level backtesting tool. Trading systems modeled in RealTest can use any number of different trading instruments and can include any number of different trading strategies. This ability to easily model multi-strategy multi-instrument systems opens the door to a diversified approach to systematic trading that is difficult or impossible to test with other software.There is a lot of information in this User Guide. Start by diving in and trying the four brief Tutorials with the software. After that, go back and forth between study and experimentation. There is also a series of video tutorials available on the mhptrading YouTube channel.While evaluating and using the software feel free to also join the RealTest User Forum.As you peruse the contents panel on the left, please note that the expandable items are also topics with their own text. Click on the item name (e.g. Software User Interface or Backtest Engine Details), not just the > symbol, in order to view this information.If you happen to find any typos or have any suggestions about how this document could be more helpful, please don't hesitate to communicate them to help@mhptrading.com. Thank you!
142. Computer Requirements
RealTest is written in the C programming language using the native Windows API (as opposed to MFC or .NET). It was originally a 32-bit application, then for some time had both 32-bit and 64-bit versions. Now only the 64-bit version is maintained.In many ways, RealTest is a vintage early-1990s-style Windows desktop application.There are no external libraries or components required, so installation is simple and clean. The only change the installer makes to the Windows Registry is to associate the file types .RTS, .RTR and .RTD with this application. Persistent settings are stored in the realtest.ini file in the program's installation directory, rather than in the Registry. RealTest must therefore be installed to a directory which has write permission.With no data loaded, RealTest occupies less than 10mb of RAM. Data in memory occupies 64 bytes for every bar of every stock, plus 8 additional bytes per bar for each user-created data item in the active script. In practice, a set of strategies using a universe of all US common stocks going back 10 years can be tested on a computer with 4GB of RAM. For best results when including more than 10 years and/or delisted symbols, 16GB of RAM is recommended.RealTest will use up to 32 CPU threads if available. Multi-threading is only used for importing data and calculating your custom Data column formulas. The backtest engine is single-threaded but very efficient. Any CPU made in the past decade or so will be fast enough to run lots of tests in a small amount of time.Your screen should have at least 1920x1080 pixels. RealTest is "DPI-aware" and fully supports higher resolutions such as 4K and/or scaling factors other than 100%.RealTest also works fine on a cloud-based virtual machine, or a Mac running BootCamp or Parallels. 
153. File Types
RealTest registers three file types with Windows: 
 RealTest Data (.RTD)
 RealTest Script (.RTS)
 RealTest Results (.RTR)
 Data files are created by running scripts that include Import definitions. Currently supported data sources are:Â· Norgate Data (this is the recommended data source for use with RealTest and is fully integrated)Â· Yahoo Finance (quick and easy free data source, but with some quality issues and limitations)Â· Tiingo (offers free and paid options, both of which require registration to get an API key)Â· CSI Futures (a highly-recommended data source for end-of-day futures)Â· CSI Stocks (also a good source for stock data)Â· local CSV files (comma-delimited text, one file per symbol, one row per daily bar -- if you have CSV data you can use it)Â· local MetaStock databases
 Script files are created by writing Scripts using the RealTest script editor, or any external text file editor of your choice.A script is a plain text file containing a collection of parameters and formulas, organized in sections and sub-sections that correspond to the various tasks involved in the trading system research workflow. 
 Results files are created by running scripts that include Strategy definitions and then saving the Results window contents.A Results window or RTR file contains records of one or more tests that were run.Each of these test records includes:Â· The script and parameters that were used to run the testÂ· Daily summary statistics for each day in the testÂ· List of trades from the test (optional, and optionally including skipped trades)As with data files, this information is stored in the same binary format that it occupies in memory. 
164. File Paths
The default installation folder for RealTest is C:\RealTest. You have the option to specify a different path during installation if desired. The installer creates the following sub-folders under this folder:Â· Scripts - a place to put your own scriptsÂ· Scripts\Examples - a set of example scriptsÂ· Data - a place to put your imported data filesÂ· Output - a place to organize all kinds of RealTest output files, such as scans, trade lists, results files, etc.Â· Output\Info - stock information reports will go hereÂ· Output\Logs - test log files will go hereÂ· Output\Orders - generated order lists will go hereÂ· Output\Reports - test summary reports will go hereThe default parent folder of all of the above is the installation folder, e.g. C:\RealTest.The Program Options dialog box (via the View menu) provides a way to specify different locations for any of the main three default paths (Scripts, Data, Output).Please note that whenever you decide to change a default path location, you are responsible for renaming and/or moving the actual folders yourself.
175. Backups
RealTest creates a folder called "Backups" within the installation folder (by default C:\RealTest\Backups).Whenever a script file (*.rts) is saved, the prior version is first copied to the backups folder and renamed to add a version number, e.g. myscript(1).rts.Version numbers of previously backed up scripts are first incremented, so that (1) is always the most recent backup, (2) the second most recent, etc.The maximum number of backups of each file to keep is controlled by a setting in the Script Options dialog box and defaults to 3.The RealTest.ini configuration file is also automatically backed up each time it is saved, using the same mechanism and max backups setting.No other file types are backed up as the others (data, results, logs, etc.) can be recreated by re-running scripts.It, of course, highly recommended to add your RealTest scripts folder(s) and the backup folder to your list of folders to be backed up by whatever automatic local or cloud backup services you are using, i.e., to also maintain backups of these critical files in a location other than your working computer.When configuring external backups of RealTest files and folders, it is advisable to exclude data files (*.rtd), as they can be quite large and are easy to recreate. It is also advisable to exclude your Data folder and/or *.rtd files from your anti-virus scanning software for better performance.
186. Examples and Tutorials
The topics that follow provide four simple guided Tutorials that can be used when getting to know RealTest. There is also a series of tutorial videos on the mhptrading YouTube channel.The Examples folder (C:\RealTest\Scripts\Examples) contains the following:
Tutorial ScriptsÂ· sample1.rts - simple moving average crossover strategy for SPY (see Tutorial 1)Â· sample2.rts - a parameterized version of sample1, allowing for optimization (see Tutorial 2)Â· sample2a.rts - a three-parameter version of sample2 (also used in Tutorial 2)Â· sample_scan.rts - introduces the Data section and the scanner (see Tutorial 3)Â· sector_etfs.rts - implements a monthly rotational strategy for the S&P 500 sector ETFs (see Tutorial 4)
Import ExamplesÂ· import_csv.rts - shows how to specify CSV data import (data not provided)Â· import_ms.rts - shows how to specify MetaStock data import (data not provided)Â· import_multi.rts - shows how to combine data from multiple sources into a single RTD fileÂ· import_norgate.rts - shows how to import data directly from Norgate NDU, and how to access Norgate's index constituency dataÂ· import_tiingo.rts - shows how to import data from Tiingo, if you have an API keyÂ· import_yahoo.rts - shows how to import all the SPX components from Yahoo (see Tutorial 3)Â· djia_earnings.rts - shows how to use an Event List File to include earnings dates in your imported dataÂ· djia_make_syminfo.rts - shows how to create a Symbol Information File with Norgate metadata for use with other data sourcesÂ· djia_use_syminfo.rts - shows how to use a symbol information file to add metadata to a Yahoo importÂ· actual_trades.rts - shows how to "test" a list of actual trades using an Imported Trade List file, includes templates for various trade list formats
Scanning ExamplesÂ· breadth.rts - shows how to use cross-sectional formulas in the Data Section to calculate and chart a market-breadth indicatorÂ· correl_multi.rts - demonstrates the multi-symbol correlation functions by building a correlation matrix for DJIA constituentsÂ· gics_indu_rank.rts - shows how to find the top X stocks in the top Y industries using GICS classificationÂ· ibd_rs.rts - shows how to calculate IBD's relative strength ranks for any universe of stocksÂ· index_breadth.rts - shows the best way to calculate breadth statistics using only historical index constituents each dayÂ· multi_filter_scan.rts - shows how to write a scan that creates multiple rows per symbol per date with different data in each rowÂ· opex_and_vxex.rts - calculates monthly options expiration and VIX futures expiration dates
19Â· sctr.rts - shows how to calculate "StockCharts Trend Rank" for any universe of stocksÂ· stockbee_mm.rts - shows how to calculate current and historical values for the Stockbee Market Monitor breadth indicators
Indicators and TechniquesÂ· actual_trades.rts - shows how to "play back" a list of trades from a CSV fileÂ· anchored_vwap.rts - shows how to calculate volume-weighted average price anchored to a specific past dateÂ· annual_taxes.rts - calculates capital gains and dividend income taxes for any script by simply including it at the endÂ· beta_indicator.rts - shows how to calculate "beta" of individual stocks vs. an indexÂ· dividend_yield_series.rts - shows how to calculate the dividend yield series for all stocksÂ· ehlers_windows.rts - implements a set of indicators presented by John Ehlers in the Sept. 2021 issue of TASCÂ· fundamentals.rts - shows how to import and scan for Norgate current fundamentalsÂ· management_fees.rts - calculates management and performance fees for any script by simply including it at the endÂ· oc_all_actual.rts - shows how to structure a script to play back OrderClerkTrades.csv with multiple strategies (possibly from different scripts)Â· supertrend.rts - shows how to calculate and plot the "supertrend" indicator (dual trailing stops)Â· trail_half.rts - shows how to divide a strategy into two half-allocation strategies to implement "take half off at a target and trail the rest"Â· yield_rank.rts - shows how to calculate annualized dividend yield from actual dividends and rank stocks by their yields
Single-Strategy SystemsÂ· cii_rotate.rts - shows how to use Norgate's Corresponding Industry Index capability to hold the top 3 stocks of the top 5 industries each monthÂ· clenow_stocks_on_move.rts - implements this strategy from a well-known book (dynamic sizing is done the old way)Â· clenow_stocks_on_move_dynamic.rts - implements the same strategy as above using dynamic sizing modeÂ· dalio_all_weather.rts - implements the Ray Dalio "All-Weather Portfolio"Â· dalio_all_weather_maxdiff.rts - same as above but waits for X% difference before rebalancingÂ· dividend_capture.rts - shows how to use Norgate dividend data and a slightly unusual approach to capturing dividendsÂ· flipper.rts - a simple implementation of the Nick Radge "Flipper" strategy ideaÂ· higher_lows.rts - a trend-following strategy that uses a series of higher pivot lows as an entry signalÂ· hybrid_asset_allocation.rts - implements this Keller and Keuning monthly ETF rotational strategyÂ· hybrid_asset_allocation_dynamic.rts - implements the above with partial entries and exitsÂ· keltner_pullback.rts - a pullback-after-momentum strategy based on the work of Adam Grimes, uses risk-based position sizingÂ· ndx_rotate.rts - a simple momentum-based rotational strategy using Nasdaq 100 component stocks
20Â· ndx_rotate_factor_test.rts - shows how to loop through a set of completely different formulas using the optimizerÂ· ndx_rotate_make_tradelist.rts - makes trade list for use with the ndx_plus_wtf_tradelist.rts exampleÂ· ndx_rotate_rebalance.rts - monthly rebalance version using dymanic sizing modeÂ· ndx_rotate_weekly_reduce.rts - a variation of ndx_rotate that reduces position size during drawdownsÂ· oex_tf_fresh_signal.rts - simple trend-following strategy that only enters on a "fresh signal"Â· optimal_diversity.rts - uses "greedy scoring" to calculate an optimally diversified portfolio from the S&P 100 universeÂ· radge_bbo.rts - the "BBO" strategy from Holy Grails by Nick RadgeÂ· sector_etfs_breadth.rts - monthly rotation using sector constituent breadth to rank the ETFsÂ· simple_day_trade.rts - implements a simple long-only "day trading strategy" that enters with limit orders and exits market-on-close (MOC)Â· simple_day_trade_basket_orders.rts - shows how easy it is to to generate a daily IB Basket Trader order file for this strategyÂ· simple_day_trade_basket_scan.rts - shows how produce the same order list using a Scan, in case you ever needed toÂ· spy_tlt_uis.rts - demonstrates using Walk-Forward optimization to implement a SPY/TLT strategy from an articleÂ· tf_dynamic_size.rts - a simple trend-following strategy that resizes positions when distance from stop changesÂ· tf_sell_half_at_1R.rts - a simple trend-following strategy that sells half at a 1R target and trails a stop for the remainderÂ· trend_following_basics.rts - illustrates a variety of stop techniques, risk-based position sizing, and "fresh breakout" detectionÂ· vigilant_asset_allocation.rts - implements this Keller and Keuning monthly ETF rotational strategyÂ· vxx_long_short.rts - be long or short the VXX ETF depending on VIX term structureÂ· weekly_moc_asx - a simplified weekly mean-reversion strategyÂ· weekly_moc_asx_daily_weekly.rts - the above implemented as a weekly strategy within a daily scriptÂ· weekly_moc_asx_daily_daily.rts - the above implemented as weekly logic in a daily strategyÂ· weekly_trend_follow.rts - a weekly Russell 1000 trend-following strategy similar to the Nick Radge "Weekend Trend Trader"Â· weekly_trend_follow_make_tradelist.rts - makes trade list for use with the ndx_plus_wtf_tradelist.rts example
Multi-Strategy SystemsÂ· bensdorp_book.rts - an implementation of the strategies described in Automated Stock Trading Systems by Laurens BensdorpÂ· combined.rts - demonstrates how to combine strategies that use different symbol universesÂ· combined_multi_bar_size.rts - shows how strategies in a script can each use their own bar size and refer to external bar sizesÂ· combined_rebalance.rts - a version of combined.rts that models running each strategy in its own account with periodic transfersÂ· goal_30_15.rts - a response to a challenge to show a set of strategies with > 30% ROR and < 
2115% MaxDD (from 2014-2021)Â· goal_30_15_asx.rts - a version of the above tailored for the Australian market ($XAO constituents)Â· goal_30_15_tsx.rts - a version of the above tailored for the Canadian market ($SPTSXconstituents)Â· mhp_classic.rts - provided for those who might be curious about the kinds of strategies Marsten traded in the early 2000sÂ· multi_moc_top_down.rts - combines four variations of simple_day_trade.rts using top-down setup selectionÂ· ndx_plus_wtf_script.rts - combines two single-strategy examples into one script directlyÂ· ndx_plus_wtf_tradelist.rts - combines two single-strategy examples by playing back their trade lists togetherÂ· oex_tf_top_down.rts - combines three OEX trend-following strategies using top-down setup selectionÂ· oex_tf_auto_track - demonstrates use of auto-generated tracker benchmarks to favor strategies with the best recent performanceÂ· two_accounts.rts - compound two strategies together in one account with combined with a third strategy in a separate accountÂ· two_accounts_rebalance.rts - same as above with addition of periodic cash transfers to rebalance the accounts
Mean Reversion Theme and VariationsÂ· mr_sample.rts - presents a somewhat sophisticated long/short mean-reversion strategy pair using Norgate data (and an example of "tail risk" in January 2021)Â· mr_sample_common.rts - contains the common elements of the following three examples, each of which includes this scriptÂ· mr_sample_debug.rts - demonstrates use of strategy debugging formulas to look under the hood of a running test, and also demonstrates the usefulness of the Library script sectionÂ· mr_sample_orders.rts - shows how to configure this pair of strategies for OrderClerk order generationÂ· mr_sample_tracking.rts - shows how to test a strategy that only takes trades when its own equity curve is above a moving average (avoided above mentioned "tail risk"...)Â· mr_sample_tradelist.rts - shows how to combine strategies from separate scripts by using tradelist generation and playbackÂ· mr_sample_long_only.rts and mr_sample_short_only.rts are also provided for use with the above example
Futures ExamplesÂ· cl_term_structure.rts - plots the 8 most recent CL contracts and scans for the 12 most recent onesÂ· es_compare.rts - using Norgate futures data, tests buy and hold of two continuous contract series (adjusted and unadjusted) vs. rolling through each individual contractÂ· futures_calendar_spread.rts - shows two ways to construct calendar spreads using Norgate futures dataÂ· futures_trend_follow_csi.rts - long/short trend-following example using CSI back-adjusted continuous contract data to model individual contract tradingÂ· futures_volume_rank.rts - trend-following strategy that uses #Rank #ByMkt to trade the most active individual contract from each market and roll as neededÂ· gc_kelly.rts - demonstrates how to model Kelly Criterion position sizing using a simple 
22trend-following strategy for gold futuresÂ· vx_futures.rts - be long or short the front-month VX futures contract depending on the term structureÂ· vx_term_structure.rts - illustrates how to plot the entire VX futures term structure in the indicator pane of a $VIX chart
Files Used by Examples ScriptsÂ· actual_trades.csv - the list of trades used in the actual_trades.rts exampleÂ· chartist_api_template.csv - order list template file for "The Chartist Smart API" (Nick Radge) output formatÂ· djia_earnings.csv - a sample list of earnings dates for the DJIA components since 1/1/2019 (not guaranteed to be accurate)Â· djia_info.csv - a detailed symbol information metadata file for the DJIA componentsÂ· djia_syms.txt - symbols of the current DJIA componentsÂ· exchangemap_csi.csv - example ExchangeMap file with CSI futures exchange namesÂ· exchangemap_ndu.csv - example ExchangeMap file with Norgate futures exchange namesÂ· holidays.au.txt - example Australian market HolidayList file to use when generating ordersÂ· holidays.ca.txt - example Canadian market HolidayList file to use when generating ordersÂ· holidays.us.txt - example US market HolidayList file to use when generating orders (or simply use HolidayList: us_auto)Â· ibfutures_csi.csv - futures symbol mapping from CSI to IB (add to script with SymChangeList if needed)Â· ibfutures_ndu.csv - futures symbol mapping from Norgate to IB (ditto)Â· ib_basket_template.csv - order list template file for IB Basket Trader output formatÂ· spx_syminfo.csv - a detailed symbol information metadata file for the S&P 500 componentsÂ· spx_syms.txt - symbols of the current S&P 500 components
6.1. Tutorial 1 - SPY Crossover
To quickly learn the basics of using RealTest, letâs start with a very simple trading system: a moving average crossover signal for one symbol (SPY). When you first run RealTest, you will see that this example script has already been opened for you in a Script Window:
23The script includes three sections: Â· the Import section specifies how to obtain the data needed to run the backtestÂ· the Settings section tells RealTest what settings to use when running the testÂ· the Strategy section defines the trading strategyTo start, click on "Import" in the Tool Bar at the top of the main window.
 
If your computer is connected to the Internet, this will download the complete daily price and volume history for the SPY ETF from the Yahoo Finance website and then save it to your local disk in RealTestâs binary data format as a file called sample1.rtd.The import will probably take less than one second since there is only one symbol to retrieve.Next, click on the "Test" button.
 
Since thereâs only one symbol, one strategy, and not many calculations required, this backtest will run nearly instantaneously, after which a new window will appear.The Results Window shows the summary statistics for the test and provides access to underlying details:
 (There are other default columns, but theyâd make the image too wide to be readable here.)Double-click on the row of stats in the Results window to open the stats graphs.The Daily Stats Graph shows the equity curve:
24Use the buttons along the top of this window to look at some of the other default stats graph types:
Above was %drawdown (not so great in March 2020), below is drawdown duration.
25You can also use the left and right arrow keys to cycle through the different graph types. When there is more than one test in the results window, the up and down arrow keys let you easily see the same graph for different tests. The contents of the results window columns and graph window items are specified by formula and completely customizable.
Drilling down to the next level, a right-click on a test result row reveals the following popup menu:
26The first three items are the ones youâll use most often, so they also appear in the Tool Bar:
(Note that you must be in the Results window with a row of stats selected for these Tool Bar buttons to be active.)Click on "Graphs" to open the stats graphs for a test (in this example you already did this by double-clicking on the stats row).Click on "Plots" to access a variety of graphical trade-level analysis tools, such as a scatter plot:
27 Click on "Trades" to view the detailed trade list:
As with the results window, there are other columns to the right, and the content can be customized.Double-click on any row in the trade list to view that trade on a candlestick or bar chart:
28The chart automatically aligns with the trade timeframe. Press the UP or DOWN keys to cycle the chart through the trades in the list.That's the end of this first tutorial!To learn how to optimize the two parameters in this strategy, proceed to Tutorial 2.
6.2. Tutorial 2 - Simple Optimization
To start the second tutorial, first close all the child windows that were opened for the first tutorial. (This is not required, it just makes it easier to keep track of what you're doing.)
Click the File / Open icon, 
 then navigate to the Examples folder in the RealTest installation directory.
29Select "Sample2.rts" and open it.
This script will use the same data file as the one in the first tutorial, so there is no Import section.Rather than running a single test, we will now try the RealTest Optimizer.Notice the Parameters section in the script above. This defines named parameters that can be referred to in any strategy formula.Rather than hard-coding the 50/200 moving average crossover strategy as in Sample1.rts, the two moving average lengths are now parameters.
Press  
 and the following dialog will appear:
30For now, you can ignore most of the settings in this dialog. Just focus on the upper-left corner, where the Parameters that were defined in the script are shown. Also notice the lower-right corner, where the number of tests to be run is calculated and displayed.Click on the check box for each of the two parameters and observe what happens to the Maximum Test Count value. Once both have been checked it should indicate that 40 tests will be performed.
Click 
 and watch as a new Results Window appears and is quickly populated with test results. (On my machine this takes about 3 seconds.)Besides the usual columns of the Results Window, notice that two new columns have been added, showing the value of the two parameters for each test.
Try clicking on the buttons at the top of various columns in this window and notice that these cause the results to be sorted by that column. Sorting, for example, by NetProfit can give you a quick idea of which parameters would have done the best.Click the same column again to reverse the sort order. Shift-click other columns to create a multi-level sort. After sorting the results list by ascending NetProfit, double-click on the top row to open the Daily Stats Graph showing the equity curve.
31Now repeatedly press the down arrow key on your keyboard and watch as the graph changes to show each equity curve from the set of tests. If, as above, you sorted by NetProfit with lowest values first, the curve will gradually look better as you proceed with the down arrow. If you started with highest first, it will gradually look worse. You can even hold down the key and let it auto-repeat to see them all in rapid succession.Feel free to experiment with the buttons along the top of the graph (or the left and right arrow keys).To get a better sense of the relationship between these parameters and the corresponding test results, click on 
 in the Tool Bar to open the Optimization Results Graph.
32If you see a graph other than NetProfit, use the button bar to select NetProfit. Every column from the Results window can be graphed here.Note that the X-Axis shows values for both parameters under each bar (or, in this example, under every other bar -- the window would need to be made wider to see every bar label).Pressing the right mouse button within the graph opens a menu that can be used to change the display in many ways.
Selecting Sort Columns changes the graph to this:
33Now we can easily see that 60/200 had the highest net profit of the combinations we tested and that it appears to have been an outlier.Go back into the popup menu and select Heat Map. Now you'll see this nice-looking checkerboard:
Just another view of the same data, of course, but this makes it easier to see where the best results tend to cluster (in this case, the larger values for Long MA).(Some people like to see two-parameter optimization results displayed in a rotating 3D graph. Though these look flashy, they add no new information to what is already discernible from a simple heat map.)
To demonstrate the remaining capabilities of the optimization graph, please close all open windows and open the example script called Sample2a.rts.
34Run this script in Optimize mode, with all three parameters checked, and then open the Optimization Graph. It will open as a Heat Map, since that's the previous view it was shown in. 
There is one key difference as highlighted above. We can only show two parameters (as would also be true in a 3D graph), so now the Average result (Net Profit in this case) is graphed for all tests with each shown parameter pair.In this example, each NetProfit value is the average of the three different MidMA values for each pair of LongMA and ShortMA.Use the right-click popup menu to change the selection of which two parameters to graph.
35Now the heat map looks like this:
Now the NetProfit values are the average of the three different LongMA values for each pair of MidMA and ShortMA.That's the end of this second tutorial!For information about all of the other features of the RealTest Optimizer, see the Optimization Dialog topic.
6.3. Tutorial 3 - Simple Scan
To start the third tutorial, close any child windows that remain open, then open the script called import_yahoo.rts in the Examples folder (see the previous tutorial for instructions on how to do 
36that).
This example script contains only an Import section. 
Click on 
 to run the script and import data for each current (as of June 2022) stock in the S&P 500 index, along with the SPY ETF data, from 2015 through today. (Feel free to edit the SP500.txt file if the components have changed, or even better, use Norgate Data instead of Yahoo to automatically gain access to both current and historical index members.)You will see that the Yahoo import runs fairly quickly. This is because RealTest creates multiple threads for the import, each with a separate HTTP connection to the Yahoo servers.When the import has finished, close this script window and open the example script called sample_scan.rts.
This script introduces two new sections: Data and Scan. The Data section is probably the most important feature of RealTest. Please take a moment to read about the Data Section before continuing.Did that make sense? Good. Now please take a moment to read about the Scan Section as well.Now we are ready to simply run this scan. 
Press the 
 button and the scan output will appear:
37In this example, we are scanning only the most recent date in the data for stocks that are currently down at least 25% from their 126-day (half-year) highest close.At the time of this writing, 38 stocks met this condition.Now double-click on the first row to open a chart for that stock with that date as its right-most bar:
Once the chart window is open, you can use the down arrow key on your keyboard to cycle through 
38all the charts from the scan output (or press up to go back to the previous one). Notice that the scan window automatically highlights the line corresponding to the current chart symbol. To see both at once, just move and resize the two windows as desired.To see other things that can be done with scan output, open the Scan Menu either from the menu bar (when the scan is the active window) or by right-clicking within the scan window:
The entire contents of the scan can be copied to the clipboard (from which it will paste into Excel with columns preserved) or saved as a CSV file.There is also a SaveScanAs option in the Settings section, which, if specified, causes the scan output to be automatically saved every time the scan is run. This can be useful for something like producing a daily trading candidate list.That's the end of this third tutorial!
6.4. Tutorial 4 - ETF Rotation
In this next tutorial, a more elaborate backtest script will be introduced. Please close all currently open windows, and then open the file sector_etfs.rts from the Examples directory.
The above is, of course, a partial screenshot. This script is longer than the prior examples, and there's a lot going on, so take some time to study it carefully.This example contains elements introduced in prior tutorials, including Import, Settings, Parameters, Data and Strategy sections.Two new sections are introduced here, which are both derivations of Strategy: Template and 
39Benchmark.The Strategy section is where a trading strategy is defined for the purpose of backtesting it, as seen in the first two tutorials.The Template section is an optional element that can be used to avoid repeating the same elements in multiple strategies. In other words, it is where you might define any elements that are common to more than one strategy. In this example, the Template called "base" is only used by one strategy, so it doesn't serve any purpose besides illustrating what a Template is.In fact, this part of the script:
could just as easily have been written as follows, with the template omitted:
The two snippets above are functionally identical. The Using: base statement in the first snippet instructs the script parser to copy all the elements from the base template and insert them in the sector_etfs strategy. The idea behind this is to use "Template: base" for strategy elements such as Commission and Slippage that are often the same for every strategy.In contrast to Template, a Benchmark section defines a strategy that will be included as a separate entity in the backtest. It is "traded" for each date in the test just as a regular strategy is and will generate its own statistics and be given its own equity curve. The only difference between a benchmark and a strategy is that the benchmark's stats are not counted as part of the combined results of the backtest.In this script example, the benchmark is used to simply generate an equity curve for the SPY ETF in a buy-and-hold simulation, to make it easy to visually compare the strategy's equity curve to this common benchmark:
(Because Yahoo data is not dividend-adjusted but does include specific dividend amounts and dates, in order for the SPY dividends to be re-invested, the benchmark simulates exiting and re-entering the SPY position on each morning after an ex-dividend date.)Now on to the specific strategy and its implementation in this script.The concept is to trade the 9 standard sector ETFs derived from components of the S&P 500 index (XLB, XLE, XLF, XLI, XLK, XLP, XLU, XLV, XLY) using a monthly rotational rule based on momentum. The Data section defines all the variables needed to implement this strategy. Parameters are used in 
40data formulas to enable some optimization.
Â· Strength is simply the ratio of the current close to the lowest close in some number of days (63 by default, i.e., one calendar quarter)Â· MomoRank uses the cross-sectional rank function to calculate the strength's rank for each ETF for each date relative to the other ETFs on that dateÂ· ValueRank is the inverse of MomoRankÂ· MyRank selects which of the above two ranks to use depending on the Momo parameter (allows comparison of momentum vs. mean-reversion as the ranking criterion)Â· Note also that these two rank calculations deliberately exclude the SPY benchmark from the top ranks by checking the InList name in the rank formulaÂ· Rotate evaluates to TRUE (1) for the last trading day of each monthThe strategy is defined to use the above data items as follows:Â· EntrySetup must evaluate to TRUE (1) for there to be an entry at the next open. It will evaluate to TRUE for each ETF that is not SPY and whose rank is low enough (1 is top-ranked) to be within the MaxPositions threshold. All this will only occur if the next open will be the first open of a new month. The three clauses of the EntrySetup formula and the data elements that they refer to suffice to specify all of these factors.Â· ExitRule is one of several exit elements a strategy can have (in this case it's the only one). This rule simply says to exit if it's a new month and the ETF is no longer among the top ranked ETFs.Â· Quantity specifies the position size, in percent of current equity. S.Equity is the current account balance (including mark-to-market, i.e., net liquidation value) on any given date during the test, so this formula is simply a percentage of equity based on the Positions parameter.
To see all of this in action, first run this script first as 
 and then as 
 as we did in the first tutorial.A results window will appear with a new line for the test results (yours will be slightly different):
Not very promising. Let's open the equity graph to see how it looks in more detail (double-click on the above row):
41(Note that you can use the L key to toggle between Log scale and Arithmetic scale, or press the right mouse button on the graph to see this and other options on its menu.)This graph shows the purpose of the SPY benchmark. Buy and hold SPY is not included in the reported 5.04% ROR or 50.98% MaxDD. Those are the stats for the ETF strategy alone. But the SPY benchmark is included in the above graph as the red line, showing that, overall, this ETF rotational strategy did not beat buy-and-hold of the index, though prior to 2014 it was slightly ahead.Since we have some parameters, we can optimize them to see how that will affect the results. Click on 
 and then just select the Lookback parameter for now:
Run the 5 tests and look at the results:
Double-click on the top row (252 bars, a one-year lookback) to show how this parameter has slightly out-performed one we tested initially (63 bars, a one-quarter lookback):
42Now if you want to go nuts with data mining, go back into Optimize and check all 3 parameter boxes. Run all 50 tests and sort by net profit to see what would have worked best:
Now the rotation is substantially beating the benchmark. But which parameters were the winners?
Apparently relative weakness (mean reversion) did better than relative strength (momentum) in this 
43case. In fact, the top 17 results are all using this anti-momentum factor:
This is a good example of how we can sometimes learn something from an optimization, even if the goal is not (and should never be) to over-fit the parameters to the data for actual trading.This is the end of the fourth and final written tutorial in this User Guide.A series of video tutorials can be found on the mhptrading youtube channel.
447. Software User Interface
RealTest uses the classic Windows Multiple Document Interface paradigm. The main window contains a variety of child window types, and the main windowâs menu bar changes depending on which type of child window is currently selected. The child-specific menu is also always available as a popup menu by pressing the right mouse button within the child window.Child windows within the main window can be arranged manually or by using the commands on the Window menu. Child windows can be maximized or minimized as needed. Any specific window can be selected and activated using the Window menu as well.
To save you from always having to open the Window menu to activate a different child window, RealTest also provides Window Tabs. Click on a tab to activate that window, double-click to maximize or restore the window, or use the [X] to close the window. Drag the tabs to change their order if desired.
Child window/document types include:Â· ScriptsÂ· Results (columnar list of tests run with summary stats)Â· Stats Graphs (daily stats from a test)
45Â· Optimization Graphs (bar chart or heat map of optimization results by parameter)Â· Trades (list of trades from a test)Â· Trade Plots (scatter plot, trade-level profit curve, Monte Carlo analysis, etc.)Â· Scan (list of date/symbol / custom data output from a scan)Â· Charts (bar or candlestick chart from a trade list or scan)Â· Lists (general-purpose tabular data display)Â· Logs (optional text output from testing, analysis or debugging)In addition to these child windows, there are two permanent dialog boxes:1. Settings Panel (shown above)2. Debug Panel (not shown above)Each of these two dialogs can easily be hidden or shown using the "View" menu and/or dedicated function keys (F11 and F12).The Window Tabs, Tool Bar and Status Bar can also be optionally hidden or shown using the View menu.
7.1. Common Menus
The menu bar items described in this section are always present, no matter what type of child window is currently active.
7.1.1. File Menu
The File menu, as in most software, is used to open or save files, or to exit the program.
46Menu items with icons next to them are also accessible using the Tool Bar.A list of the 9 most recently opened files is automatically shown at the bottom of the menu.Selecting File / Open... presents a standard Windows file selection dialog.
The current folder shown in this dialog will always be the one that you last navigated to.The default file type selection is Script Files (*.RTS). To see other kinds of files, change this selection.
47Drag the lower-right corner of the dialog to change its size. The new size will be remembered next time you select a file.
7.1.2. Edit Menu
The Edit menu, as in most software, is used to do something with text in the active window.
Menu items with icons next to them are also accessible using the Tool Bar.
Use Edit / Find... to search for specific text:
The Find what field is automatically filled in with the selected text (or text under the cursor if none is selected) in the editor.
Use Edit / Replace... to find specific text and replace it with other text, either once or multiple times:
48Use Edit / Find In Files to search for text in a collection of files:
Double-click on any line of found text to open that file and highlight that instance of the text:
49The last item on the menu, Open File Under Cursor, changes to show the path of the specific file that would be opened when the cursor in the active window is within a valid file path:
This provides a quicker way to open an included script, a file used in Import, etc. rather than having to select it using File / Open.
7.1.3. View Menu
The View menu is used to show or hide specific parts of the RealTest main window.
Menu items with icons next to them are also accessible using the Tool Bar.The first five items on the menu function as toggle switches, as reflected by the text of the item saying "Hide" or "Show".
50The last two items invoke the Program Options and Report Options dialog boxes.
7.1.4. Data Menu
The Data menu is used to load or unload the active data file (.RTD) or show a chart.
Select Data File opens a file selection dialog to allow selection of the active data file (RTD). Once a data file is selected, the current file (if any) is unloaded from memory and the selected file is loaded into memory. Most of the time, the active data file is loaded automatically when a script is run, so there is rarely a need to use this menu item.
Log Data Info writes information about the currently loaded data file to a log window, including the Import Section that was used to create it.This is an example using the data file created by the import_norgate.rts example script:
Unload Data closes all windows that rely on data being in memory (Charts, Scans, etc.) and then releases active data from memory.
Show Chart provides a general-purpose way to open a Chart Window if a data file has been loaded into memory. A dialog box is opened with a list of available symbols to choose from:
51Once a chart has been opened, the symbol shown can be changed by using the up or down arrow keys or selecting Jump to Symbol from the Chart Menu.
7.1.5. Run Menu
The Run menu is used to run the active script and select the mode in which to run it.
Menu items with icons next to them are also accessible using the Tool Bar.The items on this menu are automatically enabled or disabled to reflect the contents of the active script.Check and Apply validates the syntax of the active script. If the script contains one or more sections that define window contents (Charts, Graphs, Results, Trades) then it also updates all open windows of those types as specified in the script. Note that it is not necessary to select this item prior to any of the "Run" items -- they all automatically perform the check and apply operation before running.Run Test runs all Strategy (and Benchmark) sections of the active script as a single test using default parameters. Before the test is run, the Data section is recalculated as needed.Run Optimization opens the Optimization Dialog, from which one or more tests are run in one of several possible optimization modes.Run Import runs the Import section of the active script.Run Scan runs the Scan section of the active script.Run Orders generates brokerage orders for the next market date after the test EndDate by first running the test up to that date, then applying the Strategy rules to the data and open positions as of that date.Stop stops whatever operation is currently running.
527.1.6. Window Menu
The Window menu is used to change the way child windows are displayed or to activate a specific child window.
If you open more than 9 windows open and/or want to select several specific windows to close at once, open the Windows Dialog from the above menu or by pressing Ctrl+W.
7.1.7. Help Menu
The Help menu is used to open the help file (RealTest User Guide) or the About dialog.
53Selecting Help Topics (most often done by pressing F1) opens the User Guide and finds the section most relevant to the currently active window.If a Script window is active, pressing F1 will look for a help topic relevant to the currently selected text or the text that the cursor is in.
7.2. Child Window Menus
The menu bar items described in this section become visible only when the active child window is the corresponding type. For example, the Chart menu appears in the menu bar when a chart is the active window. These menus can also be accessed by pressing the right mouse button anywhere within the child window.
7.2.1. Chart Menu
The Chart menu appears in the menu bar whenever a Chart Window is active, and can also be accessed by pressing the right mouse button within that window.Each item on this menu also has a single keystroke associated with it, as shown to the right of the item. Once you become familiar with these keyboard shortcuts, it is rarely necessary to open this menu.
54Next Symbol and Previous Symbol can be used to quickly move through the list of symbols associated with the chart. The Up and Down arrow keys are the best way to do this. When the first symbol is selected, Previous becomes Last, since the Up key will loop back around the bottom of the list. Similarly, when the last symbol is selected, Next becomes First.Jump to Symbol opens a symbol selection dialog where the desired symbol can be either typed or found in a list of available symbols. The chart is then changed to show that symbol.Bar Size changes the periodicity of bars shown on the chart. Choices are Daily, Weekly, Monthly, Quarterly, Yearly.Show / Hide Cursor toggles the vertical magenta cursor bar on or off. The cursor bar makes it possible to see the data values for any specific bar in the chart.Show / Hide Cross-Hair toggles the + crosshair on or off. The crosshair makes it easier to line up bars in the main chart with the indicator panes, and/or to see specific horizontal levels across the entire chart.Show Data opens a new List Window that shows all of the data represented by the chart, including values for each plotted indicator.Get Information is a special feature that is only available if you use Norgate as your data source. Selecting this item launches a query of all the fundamental information about a stock that Norgate makes available. This information is written to file in the Info sub-directory of the RealTest installation directory. The file is named XYZ_INFO.HTML where XYZ is the symbol from the chart. The file is then opened as a new window in your default web browser program.Show / Hide Indicator Pane shows or hides the top indicator pane of the chart window.Show / Hide Volume Pane shows or hides the bottom indicator / volume pane of the chart window.Show All Bars zooms the chart out to the maximum length of time available for the current symbol. 
55Pressing ESC after doing this restores the zoom level to whatever it was previously. A very convenient way to quickly find a specific range of dates in a chart is to first Show All Bars, then drag the mouse across the desired area to zoom in to that area.Black Background toggles the chart window background color between white and black.Candlestick Chart toggles the price data bar drawing style between OHLC bars and candlesticks.Logarithmic Scale toggles the scaling of the Y (price) axis between arithmetic and logarithmic.Split-Adjusted toggles the price values on the chart between split-adjusted and as-traded (unadjusted).Copy Image To Clipboard places a bitmap image of the currently displayed chart into the Windows clipboard.Save Image As PNG File prompts for a file path to save the currently displayed chart in PNG image format.Edit Chart Formulas opens a script window with the script that contains the Charts Section that was last applied to a chart. Most of the time, this will be charts.rts unless you've recently applied a different script with a replacement Charts section.Refresh Chart forces all the indicators to be recalculated and the contents of the chart to be redrawn.Options opens the chart options dialog box.
7.2.2. Graph Menu
The Graph menu appears in the menu bar whenever a Stats Graph Window is active, and can also be accessed by pressing the right mouse button within that window.
Menu items with icons next to them are also accessible using the Tool Bar.Show / Hide Cursor toggles the vertical magenta cursor bar on or off. The cursor bar makes it possible to see the data values for any specific date in the graph.Show Data opens a new List Window showing all of the data contained in the current graph.
56Sort is enabled when the current graph type is a bar graph, and can be used to toggle the bar order (X axis) between by date and by value. Sorting a bar graph by value makes it easier to see at a glance what the range of values is and how common or rare the extremes are.Use Log Scale toggles the scaling of the price (Y) axis between arithmetic and logarithmic. Log Scale is only available when the graph type is a line graph and all the values in the graph data are greater than zero. This is most typically used for a Compounded Equity graph.Use Fixed Height toggles whether to keep the Y axis fixed at the scale required to show all strategies at once when not all strategies are being shown.Show Combined as Area toggles the display of the combined line for a multi-strategy graph such as Equity as a gray area behind the other lines rather than as its own line.Show Moving Averages toggles the display of a moving average line around the graph line for each strategy. Unlike Chart Windows, Graphs do not include a mechanism for adding custom indicator lines to the existing stats. Only a simple moving average is currently supported. The length of the average is specified in the Options dialog, and can be increased or decreased using the + and - keys on the numeric keypad.Show Full Range restores the graph to the default of showing the entire range of dates at once. It is possible to zoom in to a subset of the data by dragging the mouse across part of the graph. This item (or the ESC key) exits the subset view mode.Edit Graph Formulas opens a script window with the script that contains the Graphs Section that was last applied to a graph. Most of the time, this will be graphs.rts unless you've recently applied a different script with a replacement Graphs section.Refresh Graph forces all the data items to be recalculated and the contents of the graph to be redrawn.Copy Image To Clipboard places a bitmap image of the currently displayed graph into the Windows clipboard.Save Image As PNG File prompts for a file path to save the currently displayed graph in PNG image format.Show Trade Plots opens a Trade Plot Window for the test behind the graph. This has the same effect as selecting this item in the Results Window.Show Trade List opens a Trade List Window for the test behind the graph. This has the same effect as selecting this item in the Results Window.Options opens the graph options dialog box.
7.2.3. List Menu
The List menu appears in the menu bar whenever a general-purpose List Window is active, and can also be accessed by pressing the right mouse button within that window.
The two items on the List menu also appear on the menus for all of the more specific list window types.Copy List To Clipboard copies the entire contents of the list to the Windows clipboard as tab-delimited columnar text. This makes it easy to paste the data from the list into a program such as Excel.Save List As CSV File prompts for a file path and name, then saves the entire contents of the list to the specified file in comma-delimited text (CSV) format.
577.2.4. Log Menu
The Log menu appears in the menu bar whenever a Log Window is active, and can also be accessed by pressing the right mouse button within that window.
The only item on the Log menu is the choice to open the Log Options dialog box:
The only purpose of the Log Options dialog box is to allow the tab size (how many spaces represent a tab) and the font and size to be specified.The default tab size of 14 is recommended for best results when viewing a Test Summary Report.
7.2.5. Plot Menu
The Plot menu appears in the menu bar whenever a Plot Window is active, and can also be accessed by pressing the right mouse button within that window.Each item on this menu also has a single keystroke associated with it, as shown to the right of the item. Once you become familiar with these keyboard shortcuts, it is rarely necessary to open this menu.
58The first seven items on this menu cover the seven types of plots available in this window. See its documentation for details.Dollars, Trade Percent or Alloc Percent specify the unit to display in the Y axis.Trade Number or Formula specify the unit to display in he X axis, and therefore the sort order of the data in the plot.Cross Hair toggles the + crosshair on or off.Linear Regression Line toggles the display of the linear regression of the data in the plot.Log Analysis Stats toggles the logging mode for certain plot types.Copy Image To Clipboard places a bitmap image of the currently displayed plot into the Windows clipboard.Save Image As PNG File prompts for a file path to save the currently displayed plot in PNG image format.Options opens the plot options dialog box.
7.2.6. ResGraph Menu
The ResGraph menu appears in the menu bar whenever a Results Graph Window is active, and can also be accessed by pressing the right mouse button within that window.
59This menu has several sub-menus, as indicated by the > signs.X-Axis opens a sub-menu containing a list of all the parameters that were included in the optimization. The selected parameter becomes the X-Axis of the graph. 
Y-Axis opens a sub-menu containing a list of all the parameters that were included in the optimization. The selected parameter becomes the Y-Axis of the graph. Note that this sub-menu will only be accessible when the graph is shown as a Heat Map.
Heat Map toggles the optimization graph between a bar graph and a heat map. The latter is only available when there are two or more parameters.Sort Columns (bar chart only) toggles the bar order (X axis) between test number and value. Sorting an optimization graph by value makes it easier to see at a glance what the range of values is and how common or rare the extremes are. This item is only available when Heat Map is not selected.Copy Image To Clipboard places a bitmap image of the currently displayed graph or heat map into the Windows clipboard.Save Image As PNG File prompts for a file path to save the currently displayed graph or heat map in PNG image format.Options opens the optimization graph options dialog box, which is an entirely redundant way to access the same set of choices that are on the menu.
607.2.7. Results Menu
The Results menu appears in the menu bar whenever a Results Window is active, and can also be accessed by pressing the right mouse button within that window.
Menu items with icons next to them are also accessible using the Tool Bar.Show Stats Graph opens a Daily Stats Graph Window for the selected test. This can also be done by double-clicking on the test row.Show Trade Plots opens a Trade Plot Window for the selected test.
61Show Trade List opens a Trade List Window for the selected test.Show Summary Report generates a Test Summary Report for the selected test.Show Optimization Graph opens an Optimization Graph Window for all the tests in this Results Window.Log Optimization Stats opens a Log Window and writes various summary stats for all the tests in this Results Window.Show Original Test Script opens a read-only Script Window allowing you to view the exact script that was used to run the selected test.Log Test Settings opens a Log Window that shows the key settings that were used to run the selected test.Compare Trade Lists opens a dialog box to select two Test+Strategy pairs, then opens a Trade Comparison Window.List Unique Symbols opens a Log Window and writes a sorted list of each symbol that appears at least once in the selected test.Rename Test allows the text in the Name column of the selected test to be modified.Delete Test deletes the selected test from the Results Window. This cannot be undone.Delete All Tests clears the current Results Window.Copy List To Clipboard copies the entire contents of the list to the Windows clipboard as tab-delimited columnar text. This makes it easy to paste the data from the list into a program such as Excel.Save List As CSV File prompts for a file path and name, then saves the entire contents of the list to the specified file in comma-delimited text (CSV) format.Save Stats Data as CSV File prompts for a file path and name, then all formulas in the Graphs section are evaluated for the combined stats series for each date of the test and written in CSV columns as raw values (format codes are ignored).Save Trade List as CSV File prompts for a file path and name, then all standard and custom trade items for every trade in the test are written in CSV columns as raw values (format codes are ignored).Edit Column Formulas opens a script window with the script that contains the Results Section that was last applied to a Results Window. Most of the time, this will be results.rts unless you've recently applied a different script with a replacement Results section.Refresh Test List forces all the columns to be recalculated and the contents of the window to be redrawn.
7.2.8. Scan Menu
The Scan menu appears in the menu bar whenever a Scan Window is active, and can also be accessed by pressing the right mouse button within that window.
Show Chart opens a chart of the symbol in the selected row, with the date from the selected row as the rightmost bar. Use the up and down arrow keys on this chart to quickly and easily cycle through the charts of all the items in the list.Debug Item opens the Debug Panel and sets its date and symbol fields to match the selected scan 
62row.Save All Charts prompts for a folder path, then creates a chart for every row of the scan (symbol_date.png) and saves it to that folder. Existing contents are not deleted first, but files with identical names will be replaced without asking. Saved charts have the same width and height and other display options as the most recently viewed chart window. This can also be done automatically by adding SaveChartsTo to the ScanSettings in a script.Copy List To Clipboard copies the entire contents of the list to the Windows clipboard as tab-delimited columnar text. This makes it easy to paste the data from the list into a program such as Excel.Save List As CSV File prompts for a file path and name, then saves the entire contents of the list to the specified file in comma-delimited text (CSV) format.
7.2.9. Script Menu
The Script menu appears in the menu bar whenever a Script Window is active, and can also be accessed by pressing the right mouse button within that window.
Most of the editing functions used in a Script Window can be found on the Edit Menu.When the right mouse button is pressed in a script window, the popup version of this menu includes both Edit and Script menu items.Suggest Choices invokes the auto-complete feature of the editor as if you had not typed anything yet. This pops up a list of every syntax element that is allowed to be used at the point in the script where the cursor is currently located. Comment / Uncomment Selection toggles the commented state of the current line or selected set of lines. This is done by either inserting or removing // comment marks from the start of each line. If the cursor is on a Script Section definition line when this item is selected, the commenting of the entire section is toggled.Note that the shortcut key for this menu item is Ctrl+/, which is easy to remember since // is the line comment syntax.Another convenient shortcut to this feature is to click the mouse in the leftmost vertical margin of the script window:
Options opens the Script Editor Options dialog box:
63The section in the left half of this dialog facilitates the choice of which color to use for each type of syntax element that can appear in a script.To modify a color, click on the ellipses just to the left of an element type name.Click on the + or - signs to the left of the ellipses to modify the bold and/or italic look for that element.Click on Background to change the background color or Font to change the typeface or size.Other options include:
Â· whether to auto-complete the parameter list for a function when the open parenthesis is typedÂ· whether to offer auto-complete in general (the entire feature can be disabled here)Â· whether to show syntax element descriptions within the suggestion list during auto-complete (these are not inserted in the script, just shown in the popup)Â· whether to auto-highlight any other copies of the currently selected word in the scriptÂ· whether clicking in the leftmost margin of the script window will toggle the comment state of that line or instead select the entire lineÂ· an option to dynamically create an optimal set of tabstop locations based on the text of the entire scriptÂ· the fixed tab size when not using dynamic tabstopsÂ· the current font zoom level (can also be modified using the Ctrl+mouse wheel)
7.2.10. Compare Menu
The Compare menu appears in the menu bar whenever a Trade Comparison Window is active, and can also be accessed by pressing the right mouse button within that window.
64Show Chart opens a Chart of the symbol involved in the selected trade, showing the entry and exit bars and price levels on the chart. If a row contains two trades, both of their entries and exits are shown. Use the up and down arrow keys on this chart to quickly and easily cycle through the charts of all the trades in the list.Find Left Trade opens a Trade List Window and highlights the specific trade shown on the left side of the selected row, so that you can see more details about it if needed. Find Right Trade does the same for the trade shown on the right side of the selected row.Change Settings reopens the dialog box that was used to open the Trade Comparison and allows you to update it with different specifications.Copy List To Clipboard copies the entire contents of the list to the Windows clipboard as tab-delimited columnar text. This makes it easy to paste the data from the list into a program such as Excel.Save List As CSV File prompts for a file path and name, then saves the entire contents of the list to the specified file in comma-delimited text (CSV) format.
7.2.11. Trades Menu
The Trades menu appears in the menu bar whenever a Trade List Window is active, and can also be accessed by pressing the right mouse button within that window.
Show Chart opens a Chart of the symbol involved in the selected trade, showing the entry and exit bars and price levels on the chart. Use the up and down arrow keys on this chart to quickly and easily cycle through the charts of all the trades in the list.Debug Trade opens the Debug Panel and sets its date, symbol, test and strategy fields to match the selected trade.Copy List To Clipboard copies the entire contents of the list to the Windows clipboard as tab-delimited columnar text. This makes it easy to paste the data from the list into a program such as Excel.Save List As CSV File prompts for a file path and name, then saves the entire contents of the list to the specified file in comma-delimited text (CSV) format.Edit Column Formulas opens a Script Window with the script that contains the Trades Section that was last applied to a Trade List Window. Most of the time, this will be trades.rts unless you've recently applied a different script with a replacement Trades section.Refresh Trade List forces all of the columns to be recalculated and the contents of the window to be 
65redrawn.
7.3. Bars and Panels
In addition to the menu bar, which is always visible, RealTest has four other bars or panels which can be either shown or hidden.
7.3.1. Tool Bar
The primary functions that you will use in your RealTest workflow are the following script run commands:Â· Check and Apply (F4)Â· Run Test (F5)Â· Run Optimization (F6)Â· Run Import (F7)Â· Run Scan (F8)Â· Run Orders (Ctrl+F5)Â· Stop (Ctrl+Break)These commands can be accessed in multiple ways: Â· From the Tool Bar:
Â· From the Run Menu
Â· By using function keys as shown aboveRealTest automatically enables or disables each specific command in the Run Menu and on the Tool Bar depending on the contents of the active script. For example, if the script does not contain an "Import" section, the Import button will be disabled. 
66    VS   
The run commands for the active script remain accessible even when a non-script window (results, graph, chart, etc.) is in the foreground. A running script can be stopped at any time, such as when you realize you ran the wrong import, donât like the test results so far, etc. by clicking the stop button or pressing Ctrl+Break.
After a test is run, the Tool Bar buttons that invoke Results Analysis features are enabled.
7.3.2. Status Bar
During the running of a script, the status bar at the bottom of the main window displays dynamically updated information about the progress of the running task. 
In many cases, scripts only take a few seconds to run, so you might not notice this, but for longer tasks, it is useful to watch the progress. If the script is a test, some of the summary statistics are displayed in the fields on the right side of the status bar while the test is running. Which stats are displayed can be customized using the results script:
67The vertical bar character "|" in the formatting codes indicates that a results item should be displayed dynamically in the status bar while a test is running. By default, the items shown as scripts run are: ROR, MaxDD, Exits, Expectancy, and ProfitFactor.
7.3.3. Settings Panel
The Settings Panel is used to specify all the settings needed to run tests or scans. All these settings (except the active script name) can optionally be specified within a script. This gives you the choice to either use this panel interface, a pure script-based approach, or a mixture of the two. This panel can be hidden or shown using the View Menu or by pressing the F11 key.
The Settings Panel includes the following items:vData File
Specifies a previously imported .RTD file to use in a test or scan. This file is automatically loaded into memory (if not already there) when a script is run. Use the load button to load it manually.vActive Script
When any of the script run commands is chosen, it is applied to the currently active script window. This will always be the script which was most recently opened or edited. It is designated as "Active Script" in its title and its path is automatically shown in the "Active Script" field on the settings panel (if visible).
68It is also possible to run any script without first opening it in a window by selecting it on the settings panel. A script selected on the settings panel will remain active until a different script is selected or a script window is opened.vTest Name
A place to type a brief note that will be displayed in the results window row for the test after it is run.vAccount Size
Specifies the amount of money to use in the simulated account when running tests.vDate Range
Specifies the range of dates to use for the next test or scan.vBar Size
Specifies the default data time period to use when running a script or using the debug panel. Currently supported bar sizes are Daily, Weekly, Monthly, Quarterly and Yearly. Sizes above Daily are derived from daily bars. RealTest does not support direct import of larger bar sizes.vKeep Trades
Specifies the categories of trade records to keep in each test result record (each row of the Results window). Options are:Â· Strategy - include normal strategy tradesÂ· Benchmark - include benchmark strategy tradesÂ· Skipped - include skipped trades (from each of the above categories if selected)
vTest Output
69Specifies which type of additional output to create when a test is run besides the usual results data. Some of the these (Report, Trades, Graph) can also be run manually at any time by selecting a row in Results and then clicking the corresponding toolbar button.The others (Scan, Log, Debug) must be selected before a test is run in order to be generated by that test.Available choices are:Â· Report - generates the per-strategy and per-month summary report at the end of the testÂ· Trades - displays the round-trip trade list at the end of the testÂ· Graph - opens a stats graph at the start of the test and updates it dynamically as the test runsÂ· Scan - runs a TestScan simultaneously with the test, allowing fully customizable output of test-related dataÂ· Log - generates a detailed transaction and position log and displays it at the end of the testÂ· Debug - opens the debug panel before closing end-of-test positions to allow full examination of the test context on the last date, and whether to show output from DebugEntry, DebugExit and DebugTargetStop statements (if any) in the script
7.3.4. Debug Panel
The Debug Panel facilitates detailed examination of data and/or test stats, either for interactive analysis or to help with formula construction. It contains a mini formula editor which is used to produce immediate output to a log window, with optional display of evaluation detail. It also allows the data for any symbol (including calculated columns) or the underlying stats from any test to be viewed in tabular format. When accessed at the end of a test run with Debug selected for TestOutput, the full strategy formula context is also available for examination.These capabilities make it possible to fully understand whatâs happening "under the hood" of a formula or backtest.
The Debug Panel includes the following items:vData Context
Specifies the symbol and most recent date to use for either showing a bar chart, showing underlying bar data, or evaluating a formula with data elements.vStats Context
70Specifies the test (from the set of tests in the currently active Results window) and strategy to use for either showing a stats graph, showing the underlying stats data, or evaluating a formula with stats elements.vExamine
Specifies how many days back from the Data Context date to show when either the Data or Stats button is pressed.vPositions
Logs the list of open positions at the end of the last test that was run.vFormula
This mini script editor lets you type any formula for immediate evaluation. If Show Evaluation is checked, every step of the evaluation is documented. 
Log output after pressing "Evaluate":
List output after pressing "Data" (not all columns shown):
71There are more columns in the above list. All user-defined data column values are included after the standard bar data.
List output after pressing "Stats" (not all columns shown):
There are many more columns in this list â all custom and built-in stats values are included.These list windows also make it easy to save the underlying data to CSV format or copy/paste directly to Excel for further analysis.
Log output after running a test with "End Of test" set to "Debug" and then pressing "Positions":
727.4. Text Editor Windows
RealTest integrates the wonderful open-source Scintilla text editor for use in child windows of the following types.
Scintilla Copyright 1998-2002 by Neil Hodgson <neilh@scintilla.org>
All Rights Reserved 
Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation. 
NEIL HODGSON DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL NEIL HODGSON BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, EGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
7.4.1. Script Windows
Script windows take full advantage of the language-sensitivity features of Scintilla, such as color-coded syntax, popup help, auto-completion, function parameter prompting, parentheses balancing, multi-level undo/redo, smart tabbing, block comment in/out, etc. 
The popup above shows all available syntax containing "si", since that is what was typed so far.You can also press F2 in a script window to see all available syntax options for where the cursor is located.
73The cursor was indented one tabstop, under "ExitRule" within the Strategy section, so the list shows all available strategy elements.You can also position the cursor within any syntax element and press F1. This will open the RealTest Help window with the relevant help for that syntax element.See the Script Menu documentation for more about what can be done in a Script Window.
7.4.2. Log Windows
Log windows serve to display some types of optional output from a test, or output from the debug panel. You can also open any text file as a log window, edit it, and re-save it, such as you might do in the Windows Notepad app. You might also use a log window to keep notes about your research process. RealTest includes many features that use log windows for their output, such as the Test Details Log and Tomorrow's Orders list.Another feature that uses a log window is the ability to list all the symbols that were used in a test result:
74Another example is the Debug Panel interactive formula evaluation output.There are many others as well.
7.5. List Windows
List windows display tabular data in rows and columns. The Results, Trades and Scan windows are the most commonly used windows of this type.Data can be sorted by any column by clicking on its header. Clicking again reverses the sort order. 
Shift-click on another column to use it as a secondary sort when values in the first sort column are the same. Shift-clicking again reverses the secondary sort direction.
75Sort priority and direction is shown using colored triangles, in "rainbow order" -- red, yellow, green, blue.List window contents can be copied to the clipboard in tab-delimited format for easy pasting to Excel with columns preserved, and/or saved to disk in CSV format. In Results, Scan and Trade list windows you can "drill down" to the detail behind any row by selecting the row and then using the context menu. Double-clicking or pressing the Enter key opens the most commonly used type of detailed data, such as a chart for a trade list or a stats graph for a test.
After a graph or chart is opened in this way, it remains linked to the list that it came from. By using the UP and DOWN arrow keys, you can flip through the charts of all trades in a test or symbols in a scan, or the equity curves of all tests in a set of results.
76Closing a list window will also close all the graphs or charts that were associated with it.
7.5.1. Results Windows
Much of the usefulness of RealTest comes from reviewing test results, getting new ideas from this review, modifying the strategy definition, and repeating this process. After a test is run, a new row is added to a results window showing the summary stats from the test and providing a gateway to every available detail behind those stats. 
Results analysis begins with simply looking at the columns in the results window. The first three columns are always the test number, test notes (specified either in the Settings Panel or the script), and date range (ditto). After that come all the user-defined columns as described below. Finally, if there were Parameter values in any test shown, those are displayed as the rightmost columns, as shown above.By default, the results column contents are defined in the script file Results.rts located in the same directory as the RealTest program.
77This default script includes several commented-out column definitions. Feel free to uncomment them if you'd like to add them to your stats display.To change the order of the columns in the window, simply rearrange the lines of this script and then re-apply it (press F4).See Results Section for more details on results window customization.At any time, there can only be one set of results column definitions, which remain active until they are replaced. Whenever a script is run, if it contains a "Results" section, this becomes the active set of columns for all open results windows. If the script has no Results section, then the default RESULTS.RTS will be used instead. (This same mechanism applies to Graphs, Charts and Trades customization as well.)The summary stats displayed in the results window are always the combined results for all the strategies within the script that was run. To view the per-strategy summary statistics, select a results row and then view the Summary Report.The Results Menu, accessible by right-clicking in a Results Window or via the menu bar, provides access to all the features of this window type, including some not mentioned above.
7.5.2. Trade List Windows
The next level of test results analysis is to open the trade list, sort by various columns, and review individual trades visually on bar charts. Right-click on a result, select "Show Trade List" (or press Ctrl+T), and then double-click on any row in that list to display the trade on a chart. Once the chart is open, use the UP and DOWN arrow keys to quickly cycle through the trades (an oddly difficult task in most other backtesting software).As with results and graphs windows, trade lists have an underlying script (Trades.RTS) which defines any custom columns you wish to add. Trade List Windows include 13 standard columns plus any number of user-defined columns.If no extra columns are specified, a trade list will show only these standard columns:
Please note that as with all price and volume information that you work with in RealTest, the QtyIn and PriceIn shown are as-traded (unadjusted) values. The same is true for QtyOut and PriceOut. If there was a split between the trade entry and exit date (or a dividend when total return data is used), QtyOut will be different from QtyIn, with the prices adjusted accordingly. This is consistent with what would happen in an actual brokerage account.The default Trades.RTS that is installed with RealTest is an example of a script which adds custom columns:
78Applying changes to this script causes the new columns to be shown in all open trade windows. Here is how the trade list looks when scrolled horizontally to show the custom columns:
Note that for tests with very large trade counts (10,000+), having many custom trade column formulas will make it take a bit longer to open the trade list. In such cases, progress is displayed in the status bar, and you can hit ESC if you donât want to wait for completion.To calculate these formula-based trade columns, the currently loaded data file must include at least one symbol with a date range that encompasses the trade entry and exit dates. If the formula references any bar data (Open, Close, etc.) then that specific symbol must be present in memory. If a formula cannot be evaluated using currently available data, "n/a" is displayed.One special column, Filter, can be used as needed to prune the trade list when you only want to see some of the trades. Here's part of a trade list from a system with 7 strategies:
79Now we open Trades.RTS by pressing F9 and add this filter:
Then press F4 to apply, and now the top of the list looks like this:
When there's a filter formula in the Trades section, it applies to every trade list window, so you'll want 
80to comment it out again when done looking at that view.The other special element of the Trades section is Sort, as shown in this example:
If Sort is specified, every new Trade List will initially be sorted by the specified columns. Beginning a column name with a dash specifies a descending sort, otherwise the order will be ascending.Note that the name used to refer to a column in the Sort statement must be its visible column title, not its formula name. Usually these are the same.See also Trade Comparison Windows.The Trades Menu, accessible by right-clicking in a Trade List Window or via the menu bar, provides access to all the features of this window type, including some not mentioned above.
7.5.3. Scan Windows
Scan Output Windows are very similar to Trade List Windows and their use is demonstrated in Tutorial 3.
A new scan window is created whenever a script is run in 
 mode, as in the sample_scan.rts example script:
Data can be sorted by any column by clicking on its header. Clicking again reverses the sort order. 
81Shift-click on another column to use it as a secondary sort when values in the first sort column are the same. Shift-clicking again reverses the secondary sort direction.Double-clicking on any row of a Scan Window opens a chart of that stock with the rightmost bar set to the date shown in that row.
Scan output can be copied to the clipboard and pasted as tab-delimited text. In Excel this automatically preserves the column structure.Scan output can be saved to a CSV file by selecting "Save List as CSV File" from the Scan Menu:
The initial sort order(s) and direction(s) of Scan output can also be specified by adding a special item called Sort to the Scan definition, as in this example:
82List one or more visible column names to specify the sort priority. Precede a name with a dash to indicate descending order, otherwise it will be ascending.Note that the name used to refer to a column in the Sort statement must be its visible column title, not its formula name. Usually these are the same.
7.5.4. Trade Comparison Windows
Trade Comparison Windows are a special type of List Window that is created when Compare Trade Lists is selected from the Results Menu.First a dialog box is shown to allow selection of the two Test+Strategy pairs to compare as well as other options.
Any Test+Strategy from the active Results Window can be selected for either trade list. You might want to compare the same strategy between two tests that had slightly different parameters, for example. In the above, the backtest of a group of strategies is being compared to their live trade results for the same period.For each trade in the first list, the best match is found from the second list. To be considered a match, the following must always be true:Â· the symbols must be the sameÂ· there must be some overlap in the date ranges of the two trades
83If any of the Require Exact Match options are chosen, those criteria are added to the above list.When more than one trade from the second list matches a trade from the first list, the best match is selected based on strategy name comparison.The Minimum Absolute Difference filters can optionally be used to exclude matching trades with little or no difference in net profit, expressed in dollars and/or percentage.Use Account Percents determines whether PctGain figures for each trade, as displayed and as used to compute trade differences, are calculated only for the trade itself or as a percentage of the account value at the time of the trade.The comparison output is show in a list window like this (image was divided for readability, and this list had many more rows):
When a match is found, each trade's basic details are shown in the same row, along with the net profit differences.When a match ias not found, each trade gets its own row, and its Profit and PctGain become the differences for its row.As in any List Window, you can sort by any column by clicking on its header.Double-clicking on any row brings up a chart showing both trades (if there was a match):
Once in a chart, the Up and Down arrow keys can be used to cycle through the underlying list.The Compare Menu, accessible by right-clicking in a Trade Comparison Window or via the menu bar, 
84provides access to all the features of this window type, including some not mentioned above.
7.5.5. Other List Windows
General-purpose List Windows are created when any of the following features are used:Â· Examine Data or Examine Stats on the Debug PanelÂ· Show Data in a Chart WindowÂ· Show Data in a Graph WindowList windows show data in columnar format. Data can be sorted by clicking on the header of any column.List window contents can be copied to the clipboard or saved to a CSV file.
7.6. Graphical Windows
RealTest includes several Graphical Window types, all of which are used when Analyzing Test Results.Each Graphical Window type is described in the following sections.
7.6.1. Daily Stats Graphs
As we drill further down, the next level of results analysis to look at are the daily stats graphs. Each test record in a results file includes each stat element as a daily time series rather than just a final summed value. These results time series are also available to the test script while the test is running, allowing a strategy to dynamically refer to its own performance and/or the performance of other simultaneously running strategies. (The example script mr_tracking.rts shows how this is implemented.)Double-clicking on a row in a results list opens the daily stats graph for that test. Here is an example from a 2-strategy system, long/short mean-reversion:
85Each strategy is graphed separately with color-coded lines and labels, along with the combined system results. Here is the drawdown graph, showing how the two sides of this long/short strategy will usually hedge each other to some degree:
Stat series lines (or bars) can be displayed for any combination of the multiple strategies that were contained in the system defined in the test script that produced this set of results. Which strategies to display and which to hide can be specified by clicking on their names at the top of the graph:
The names switch to boldface when you hover over them to show that you can click. The square next to each name is filled if that line is showing or hollow otherwise. Clicking on the name of a strategy hides all other strategies except for that one. Holding down Ctrl while clicking on the name of a strategy toggles it between shown and hidden without effecting other strategies.Clicking "Show All" shows all the strategies plus the combined line.Holding down Ctrl while clicking "Show All" hides all the lines. 
86Strategies can also be selected (or toggled if Ctrl is pressed), or by using the number keys 1-9 and 0. If there are more than 10 strategies, shift+digit can be used for numbers 11-20.
The data underlying a stats graph can also be easily viewed by pressing the D key or selecting Show Data from the context menu:
In every stats graph, the Y axis represents the daily values resulting from evaluating the formula for that graph, and the X axis contains the dates. As with results and charts, daily stats graph content is defined using the Graphs Section of a script, and all open graph windows use the same set of graph type definitions:
87If the active script does not include a Graphs section, then the default script â Graphs.rts in the program directory â is applied.To quickly access the underlying formulas for any Results, Graphs, Trades or Chart window, press the F9 key or use the context menu.Press F4 or click Apply after modifying the graph definitions to see the result of your changes in all open graph and data table windows.
Graph ColorsGraph windows allow specification of 10 colors via the options dialog. The first strategy that is defined in a system script gets line color 1, the second strategy line color 2, and so on. Lines are labeled with the name of each strategy in color-coded text, so it should always be clear which is which. If there are more than 9 strategies, strategy 10 gets color 1, strategy 11 gets color 2, etc.Line colors can be edited using the graph options dialog:
88Clicking on the "â¦" to the left of any color opens the Windows color selection dialog.Most of the other options in this dialog can also be accessed using the Graph Menu and/or the keyboard shortcuts listed above and on the menu items.This and other options dialogs in RealTest also include reminders about keyboard shortcuts that can be used.
7.6.2. Optimization Results Graphs
An Optimization Graph window appears when you select Show Optimization Graph from the Results Menu or press the 
 button on the Tool Bar.
If you haven't already done so, please go through Tutorial 2 for a detailed tour of this functionality.
897.6.3. Candlestick/Bar Charts
The most common way you will open chart windows is from either a trade list or scan output list. There is also a general-purpose "Show Chart" item on the Data Menu, for when you just want to look at a specific symbol.
90RealTest chart windows include three panes. The top pane can show any number of indicators (but they all must share the same scale). This pane automatically appears when it has content and disappears when it does not.The middle pane shows the OHLC bars or candlesticks, and can also show any number of price-derived lines such as moving averages or volatility bands. The lower pane, which can also be optionally hidden, shows color-coded volume bars, or can show another group of custom indicators (sharing the same scale). This pane automatically appears when it has content or when the data includes volume bars and disappears otherwise.The horizontal dividing line between the panes can be dragged up or down with the mouse to change the relative pane heights.Other features of chart windows:1.Clicking anywhere in the chart shows the cursor or moves it to that location2.The period (dot) key toggles the cursor3.Clicking beyond the range of bars (e.g. in the Y axis legend) or pressing ESC removes the cursor4.The X key toggles the cross-hairs5.Scroll Left/Right by doing any of the following:Â· left/right arrow to move 1 bar
Â· shift+left/shift+right arrow to move 10 bars
Â· roll the mouse wheel (with or without shift)
Â· drag the Scrollbar thumb
6.Zoom in/out by doing any of the following:Â· enter a visible bar count in the options dialog 
Â· hold down Ctrl and roll the mouse wheel
Â· press the + or â keys
Â· grab and drag either end of the scrollbar thumb
Â· if the caret is not visible, click and drag across a subset of the visible range to zoom in to 
91that subset (hit ESC to revert to the former view)7. Drag the horizontal divider line between two panes to change their relative sizes As with results and graphs, custom elements are added to charts using the Charts Section of a script:
If the active script does not include a Charts section then the default script â Charts.rts in the program directory â is applied.Other chart options are accessible via the Chart Menu and the options dialog. 
92The "Trade Extra" setting controls the positioning of the X Axis relative to the current trade when scrolling through a trade list. This makes it possible to efficiently review many trades from a backtest â an effective way to get new ideas for things to test.The "Show Other Trades" setting optionally causes all trades in the current symbol that are within the visible date range to be shown together on one chart.
7.6.4. Trade Plots and Analysis
In addition to individual trade review, much can be learned by analyzing all the trades of a test (or even a huge abstract sample of artificial trades) in the aggregate.Aggregate trade level analysis works best in systems with 1000 or more trades.To view a trade plot and access all the trade analysis features, right-click on the test and select "Show Trade Plots".  
The simplest kind of trade plot is the scatter plot:
93This gives a feel for distribution of trade results. To quantify the trade distribution a bit more, we can also view it this way:
94Similar to the gain distribution plot is the MAE / MFE distribution:
Values of 0 (the most of any specific value in this example) are shown in blue. (Out of about 7000 trades, approximately 10% had no favorable excursion.)The number of distribution bins to use in the above two plot types can be specified in the plot options dialog.The same set of trades can also be plotted in a cumulative line with new highs marked and an optional linear regression line added:
95This is the same set of dots as the first plot, with each one added to the prior one. It will usually look something like the equity curve stats graph.Next we have the Monte Carlo profit curves plot:
96 
In this case, 100 random cumulative profit curves were generated by taking random samples (with replacement) from the trade list. The original backtest profit curve is plotted in bold black over them for comparison. A linear regression line is also plotted (magenta) after being calculated from all the combined random curves.Next we have the Monte Carlo drawdown plot:
97RealTest can optionally create a table of Monte Carlo percentile stats and write it to the log window:
To understand the other two plot types, we need to first visit the plot options dialog:
98Since this dialog also serves as a research tool, it has been made "modeless", meaning you can leave it open while using other windows. (Note that if plots are opened for more than one test at once, each plot will have its own options dialog window, with the test number and name shown in the caption.)In any of the non-cumulative plot types, the trades can optionally be sorted using any criteria you want. The range of values from the sort formula becomes the X Axis, while the Y Axis continues to show the range of trade profits.Below, for example, we see the scatter plot of trades sorted by distance from the 5-period exponential moving average as of the day prior to entry (in this case, the "setup" day, since entry was the next day via limit order - the formula in this dialog is evaluated using the same "current bar" as the EntrySetup formula for each trade.)Clicking "Refresh" produces the following plot:
99This appears to show that there's some correlation between distance above a 5-day EMA on setup day and positive trade outcome.Going a level deeper, letâs group the trades sorted by this formula into equal sized bins and calculate the expectancy of each bin. Option settings:
...
Plot output:
100Log output:
The edge still appears to be there, especially at 4% or more above the EMA.For a different view of the same factor, expectancy can be calculated for specific X intervals rather than equal counts:
...
101Plot output:
Log output:
102Note that as you move towards the right side of the plot, each bar represents fewer data points. 
7.7. Program Options Dialog
The Program Options dialog is accessible via the View Menu:
103Most of the options that can be specified using this dialog relate to the running of scripts:vDefault File PathsThese specify the starting point to use when a script refers to a non-fully-specified (relative) file path. The Scripts path applies to any non-RTD input file referenced in a script, e.g. Include or TradeList.The Data path applies to any RTD file reference (whether input or output), i.e. DataFile. The Output path applies to all non-RTD output files, e.g. SaveScanAs, SaveTradesAs, etc.Again, all the above only apply when a partial (relative) path is used in a script. See File Path Specification for additional details.Please note that whenever you decide to change a default path location, you are responsible for renaming and/or moving the actual folders yourself.Additionally, the sub-folders Info, Logs, Orders, and Reports are automatically created under your Output folder, for use as the default destination of those specific output types.vMaximum MemorySpecifies a threshold above which RealTest will stop trying to allocate memory and instead will give a warning. Program stability is not guaranteed if you try to use more than 100% of installed RAM, i.e., make excessive use of virtual memory page swapping.vMaximum Threads
104Specifies how many threads to create and use when running multi-threaded calculations, such as for the Data Section. RealTest allows up to 32 threads to be used.vExtract one-pass itemsProvides a way to turn off this Data Section calculation speed optimization that requires more memory when used. Leave checked unless running your script causes low-memory warnings.vAuto #OnePerXProvides a way to disable Data Section space-saving optimization in case it is incorrect in an unforeseen item formula variation. See #OnePerDate and #OnePerSym.vUse Short-Circuit LogicWhen selected (default), all formula evaluation throughout RealTest employs short-circuit optimization.  When unchecked, every term of every formula is evaluated even when not logically necessary.vLog calculation detailsIf selected, the timing and other details about the calculation of each Data Section item is logged whenever calculation occurs. This can be useful to discover which items are causing calculation delays, and to see the value type and #OnePerX status of each item. vDate DisplaySpecifies how dates are displayed in the user interface, scans, trade lists, etc. See Date Format Pictures for details about the format specification string. Use the adjacent "Example" output to test your format as you type it. Can be overridden by the DateDisplay setting in a script.vDate InputRealTest can parse dates in any common format. For formats where day and month precede year, this setting governs whether day precedes month or vice versa. Can be overridden by the DateInput setting in a script.vDefault CurrencySpecifies the base currency of the trading account. Can be overridden by the Currency setting in a script.vPanel ColorsLets you change the background color of the Settings Panel and/or Debug Panel.vAsk before deleting testsSpecifies whether you want to be asked for confirmation when you press the Delete key in the Results window with a test row selected, or when you select "Delete Test" or "Delete All Tests" from the Results Menu. vAsk before unloading dataSpecifies whether you want to be asked for confirmation when you do anything that will cause the current data file to be unloaded from memory, such as running an Import, or loading a different data file (whether manually or by running a script that uses a different one). Note that you are only asked for confirmation when unloading the data would require closing one or more open windows that are using that data, such as charts or trade lists.vAsk to save untitled windowsSpecifies whether when you want to be asked to save the contents of "(untitled)" Log, Script, or Results windows when you try to close them.vConfirm the Stop buttonSpecifies whether RealTest should pop up a dialog box for confirmation before aborting a script when the "Stop" button is pressed.vReuse list/scan windowsAllows scans and other tabular data output to optionally reuse any currently open window of the relevant type rather than always creating a new window.
105vOpen CSV files in list viewCSV files can be opened by realtest either as regular text files in a Log window, or as a structured grid in a List window. The list view makes it easier to read the contents of the file, but does not permit editing. Uncheck this box when you want to use RealTest to edit a CSV file.vAlways show text ordersWhen a script run in Orders mode, RealTest generates and displays the list of orders for tomorrow in human-readable text format. If a specific OrdersMode other than Text was specified, a separate order list file in that mode will also be generated and displayed. If you prefer to not see the text order list when also generating e.g. a CSV order file, uncheck this box.vCheck for program updatesEach time RealTest starts, it compares its version number to a server-based newest release number and gives you the option to download the newer release if found. Uncheck this box to disable checking for updates.
7.8. Report Options Dialog
The Report Options dialog is accessible via the View Menu:
106All the options specified via this dialog relate to the Test Summary Report. Because summary reports are static web pages (HTML and PNG files), these options only apply to newly created reports, not previously created ones:vInclude in New Reports The items in this group let you decide whether to include or omit each available section of the report.vReport Format - WidthGoverns the maximum width constant that is placed in the generated HTML code.v
 
Report Format - MC Samples and MC Best/WorstSpecifies these options for the Monte Carlo analysis plots if those are included.vReport Format - Batch Mode DisplayControls whether reports are opened in the browser after tests are run from the command line (batch mode).vOpen FolderOpens the Reports folder, in case you want to access specific reports directly or do some cleanup.vRefresh IndexRe-generates the index.html file in the Reports folder, which is linked to by the "Report List" link in each report.
7.9. RealTest Function Key Reference
The following are all the general-purpose function or "hot" keys available in most window types. A few window types, such as charts and graphs, also have type-specific key functions, which can be found by looking at the menu and/or options dialog for those windows.KEY FUNCTIONCtrl+F Edit Find
107Ctrl+H Edit ReplaceCtrl+N File NewCtrl+O File OpenCtrl+S File SaveCtrl+L File Save AllCtrl+G Results Show Graph (also double-click on results line or press Enter)Ctrl+P Results Show Plot (also works in graph windows)Ctrl+T Results Show Trades (also works in graph windows)Ctrl+/ Script Comment Toggle (also can click in left margin of line)Ctrl+Break Stops the execution of the currently running scriptF1 Open the help file and show the page most relevant to what's under the cursorF2 Show script autocomplete list, or edit test notes in results windowF3 Edit Find NextF4 Script Apply (checks syntax, applies results/graphs/charts/trades sections, if any, to open windows)F5 Run the active script in single-test mode (if script has strategies)Ctrl+F5 Run the active script in order-generation mode (if script has strategies)F6 Run the active script in multiple-test (optimization) mode (ditto)F7 Run the Import section of the active script (if present)F8 Run the Scan section of the active script (if present)F9 Edit Formulas (for results/graphs/charts/trades windows)F10 Refresh calculations (ditto)F11 Show or hide the settings control panelF12 Show or hide the debug control panelUp/Down In windows tied to lists (graph/plot->results, chart->trades/scan) changes window contents to prev/next list item (in generic chart, prev/next symbol in data file)Left/Right In windows with multiple views (graph/plot) changes to prev/next view, in chart shifts bars left/right or moves cursor if visible (Shift+Left/Right shifts by 10 bars)O (letter) In windows with an options dialog (graph/plot/chart/optgraph), opens that dialogS Toggles sorting in sortable graphsESC Cancel calculation of trade/plot formulas, exit zoom or hide cursor in graph/chartHome/End Go to start or end of bars in chartPageUp/DownShift chart by number of bars currently displayed (move one "page")
In addition to the above hotkeys, notice that most choices within the main menu and sub-menus have a letter assigned to them.Pressing the Alt key on your keyboard reveals an underscore under each letter than can be used to select that choice.Main menu:
Main menu after pressing Alt:
Menu after pressing Alt and then R:
108In this case every item on the Run menu also has a hot key assigned to it, but for example Run Test could also be initiated by pressing Alt R T.A few others that may be useful:File / Save As Alt F AView / Program Options Alt V OData / Show Chart Alt D CScript Options Alt S OWindow / Close All [of current type] Alt W C
1098. Importing Bar Data
RealTest uses its own memory-based binary format for daily price and volume data bars.To get started, you must first import some data.The data import process consists of:Â· reading data from one or more external sourcesÂ· converting this external data to the RealTest binary formatÂ· incorporating split and dividend info if provided by the external sourceÂ· optionally filtering out symbols that pass an ExcludeIf conditionÂ· optionally applying additional per-symbol information such as company name, industry, etc.Â· optionally applying per-bar event information such as earnings dates and amounts if availableÂ· automatically creating weekly, monthly, quarterly and yearly bars from the daily bar data (importing larger bar sizes directly is not supported)Â· saving the imported and processed data to a local RealTestData (.RTD)  disk file while also keeping it in memory for immediate use
Once a data import has been run, the saved .RTD file can simply be loaded back into memory when needed. This is much faster than having to repeatedly access an external database.There is no need to re-import the same data. Only run an import again when you want to change the contents of the file, such as to add newer data.When you run a test or scan, one of the initial settings is always a path to a .RTD file. It often makes sense to maintain different data files for different purposes. For example, you might have several for backtesting that include delisted symbols and go back different amounts of time (5, 10, 20 years), and one where you run a fresh import every day using only currently listed stocks for running the scans that produce candidate lists for live trading. You may also have specialized RTD files such as one with only historical Russell 3000 components, one for Nasdaq 100, etc. By selecting the data file that's most appropriate for the research you're about to do, tests can be run with maximum efficiency.To be sure this is clear: there is no central database in RealTest, as there is in some other backtesting software. If you want to make RealTest almost as slow as other software, you could import, for example, the entire Norgate database into one large RTD file and always use that for all your work. However, I think you'll find it much more pleasant to work with multiple specialized .RTD files.To run an import, you must open or create a script with an Import Section, and then run it in Import Mode.To manually select and load an existing data file or get information about the currently loaded data file, use the Data Menu.
8.1. Norgate Data Import
RealTest is fully integrated with Norgate Data as a "3rd-Party [that's us] Supported Plugin".Norgate is the preferred data provider for use with this software. To import data from Norgate, the Norgate Data Updater (NDU) application must be currently running (open) on the same machine as RealTest.
110With Norgate import, each IncludeList in the Import script section can be any of the following:Â· One or more symbols, separated by commasÂ· A path to a TXT file containing a list of symbolsÂ· A path to a CSV file in which a column of symbols has a name that contains "symbol" or "ticker" or "underlying"Â· The name of a watchlist from the NDU Watchlist Library (prefix the name with a dot to indicate this usage)Use of the Watchlist Library is highly recommended. You can define any number of dynamic watchlists in NDU, each of which is automatically maintained every time data is updated. For example, I use the following Watchlist definition for my daily trading candidate scans:
This only needs to be set up once, and is referenced in my import script as follows:
There can be any number of include lists in an import. The first include list number that a given symbol came from can be referenced in any formula via the ListNum variable, and the InList function can be used to check whether the current symbol was in any specific list. This provides a convenient way, for example, to combine strategies that each use different and possibly overlapping sets of symbols.Norgate makes it easy to specify the kind of data adjustment that you want. RealTest supports data adjustment specification via the Adjustment element of the import definition. The default and recommended adjustment to use is "Capital". Regardless of data adjustment, RealTest always models trades in a backtest (or shows data in scans) using as-traded prices, so you never have to think about split adjustment or un-adjustment when writing scripts. See SplitHandling for further details on this 
111topic.Several symbol information fields are automatically included when Norgate data is imported, specifically:Item Description Content?Symbol stock symbol string?Name company name string?Type security type string?Exchangeexchange name string?Domicile security country string?Currency security currency string?Sector security sector string?Industry security industry string?CII corresponding industry index stringInfoTRBC Thomson Reuters Business Classification codedescribed hereInfoGICS Global Industry Classification Standard codedescribed hereInfoSharesnumber of shares outstanding numberInfoFloat number of shares float numberInfoDelist delisting date or futures expiry dateListNum import include list number for this symbol numberPointValuepoint value (futures - always 1.0 for stocks)valueTickSize tick size (futures - generally 0.01 for stocks)value
Norgate also provides a unique feature: historical index constituency. RealTest makes it easy to import this information with your data. Use the Constituency element of the import definition to specify one or more indexes that you want constituency data for ($SPX, $DJI, etc.) After the import, that data is available to all formulas as InSPX, InNDX, etc. The import_norgate.rts example script shows how this works in an import and scan:
112In addition, Norgate offers something called "Corresponding Industry Index", which can be used to calculate, for example, the industry relative strength for any stock. The syntax used to achieve this is shown and explained in detail in the cii_rotate.rts example script. Norgate also provides current fundamental data for each stock. Because these data are not historical time series, they are not useful for backtesting. Nevertheless, RealTest provides two ways to access these current fundamentals:1.Open a Chart and then select Get Information from the Chart Menu. This will display all available fundamental fields by creating an HTML file and opening it in a new browser tab.2.Request specific fundamental items to be imported by adding Fundamentals to your Import definition and specifying which items you want. Imported fundamental item values can then be accessed using F.xxx where xxx is the name of a specific field. F.xxx.Date can be used to obtain the date on which Norgate last updated that field.
8.2. CSI Futures Import
For end-of-day futures data, CSI has been the most respected source for many decades.RealTest fully supports CSI's futures data and makes it easy to import and work with it.To use CSI data with RealTest, you must have downloaded and installed their Unfair Advantage software and subscribed to one of their futures data packages.
113Within the Unfair Advantage program, create one or more new futures portfolios for use with RealTest.
1. Click on "New Portfolio":
2. Provide a name and folder location for the portfolio's CSV data files and set some properties of the CSV files to create:
It does not matter what the folder name and path are, just that you remember them so your RealTest script can point to it.There are a large number of portfolio settings spread across 11 window tabs here. 
114The first two rows of tabs can be kept on their defaults.The fields under "ASCII/Excel Files" (by which they mean CSV files) that are important for RealTest are:a. the file names for individual contracts should use the S_CYA format, e.g. VX_2024Zb. the "Make TradingBlox Compatible" box must be checked so that UA will create a "futuresinfo.txt" file
3. Specify the field-level details of the CSV export files:
The key here is that the field list includes at least the following items:Â· D - dateÂ· O - openÂ· H - highÂ· L - lowÂ· C - closeÂ· U - unadjusted closeÂ· X - expiry dateÂ· N - delivery number (delivery year and month)It does not matter what order these appear in, just that they're all present.If included, RealTest stores the unadjusted close price in the Extra field of each bar.If included, RealTest stores the expiry date and delivery number as an Event records for the dates on which they changed (roll dates).
115Expiry date is accessible via InfoExpiry or Event(-999), delivery number is accessible via Event(-998).Expiry date is used to know when to add roll costs to a backtest and to specify the correct contract in CSV order lists.Delivery number (year and month) is used to show the correct human-readable symbol (e.g. NG_2025F) in test logs and text order lists.The above set of fields leaves one slot available in the RealTest bar records: Volume. You can use any of V, v, I, or i (total volume, contract volume, total OI, contract OI) as your volume field as desired, or leave it out if you don't need it. Whichever one of these is encountered first (left to right) will be used as Volume.
4. Specify the remaining details of your CSV files:
The "no record for holidays/weekends" settings are recommended but not required.The "Include a Header Record" setting is required if you do not want to have to provide a CSVFields statement in your Import definitions.
5. Add symbols to your portfolio:
116a. Click on "Add Symbol" in the main windowb. When this dialog appears, select the "Back-Adjust" tabc. Configure your rolling criteria, timing, etc. (above is just an example -- do it however you prefer)d. Type a symbol root or click on Market Specs to select one or moree. Click OK
6. Once your portfolio is configured, UA will already have exported your CSV data files to your specified folder, and you can now import them into RealTest.
7. To keep your date up to date every day, simply run the "CSI EZ Download" program. It automatically downloads all the latest data to their internal database and then updates all of your portfolio files.
8. To import your CSI data into RealTest, the Import definition will look like this:
You can add more than one DataPath if you want to combine data from multiple CSI portfolios into a single RealTest RTD file.You can optionally name each DataPath using a comment like {"CME"} and later refer to it using e.g. InList("CME") if your formulas need to know which portfolio the current symbol came from.As with CSV Import, you can optionally use IncludeList and/or ExcludeList. If you use IncludeList, this means "only include these symbols and exclude all others" (unless you also specify KeepNonIncluded: True). ExcludeList means "include all others except these".
117Also as with CSV import, the file name becomes the symbol. Most often with CSI Futures, file names look like xx_b, where xx is the root symbol of the futures market and _b means "backadjusted". You will refer to those symbols as needed using e.g. Extern($cl_b, close).Note that when you generate orders using this data, the symbols used in the orders represent the specific contract to be traded even when using the back-adjusted CSI data without individual contracts included.Note also that with CSI Futures, you do not need to provide a SymInfoFile. RealTest reads and processes the futuresinfo.txt file found in each DataPath folder to get the market name, point value, and tick size for every symbol. This is why it's required to check that box in step (2) above.See Using CSI Futures Data for details about using this data in your backtests.
8.3. CSI Stocks Import
To use CSI stock data with RealTest, you must have downloaded and installed their Unfair Advantage software and subscribed to one of their stock data packages.Within the Unfair Advantage program, create one or more new stock portfolios for use with RealTest. Stock portfolios for use with RealTest must be configured as follows:
The items in red are required. Adjustment for dividends is optional. If your subscription includes dividend details it is preferable to not use dividend adjustment.Note that the Adjustment setting of the Import section is not supported with the CSIStocks data source. The UI settings as shown above correspond to Adjustment: Capital (the default) in RealTest.If you want your imported data to use TotalReturn adjustment (in which dividends are converted to splits), then you must also check the other three boxes under "Adjust for Splits" in the above dialog box and rebuild your UA portfolio.Use these settings to further configure your portfolio:
118Name By: S is required (just the symbol, nothing else in the file name).Extension can be either .txt or .csv -- your choice.
119Fields should include all of the above. The sequence does not matter.Separator must be comma and date format as shown.
120Header row is required.
Once your portfolio is configured, UA will already have exported your ASCII data files to your specified folder, and you can now import them into RealTest.To keep your date up to date every day, simply run the "CSI EZ Download" program. It automatically downloads all the latest data to their internal database and then updates all of your portfolio files.To import your CSI stocks data into RealTest, the Import definition will look like this:
You can add more than one DataPath if you want to combine data from multiple CSI portfolios into a single RealTest RTD file.You can optionally name each DataPath using a comment like {"DJI"} and later refer to it using e.g. InList("DJI") if your formulas need to know which portfolio the current symbol came from.As with CSV Import, you can optionally use IncludeList and/or ExcludeList. If you use IncludeList, this means "only include these symbols and exclude all others" (unless you also specify KeepNonIncluded: True). ExcludeList means "include all others except these".Note also that with CSI Stocks, you do not need to provide a SymInfoFile. RealTest reads and processes the stocksinfo.csv file found in each DataPath folder to get the company name etc.
1218.4. CSV Import
RealTest supports two ways to import CSV data:1.By providing a disk folder containing multiple CSV files, one per symbol2.By providing a single CSV file containing data for multiple dates and symbolsIn either case, your CSV data files must meet the following criteria:Â· Each bar of data (fields for one symbol on one date) must be on its own line (row) within each fileÂ· The field delimiter must be a comma (unless CSVNumFmt: Comma is specified, in which case it is a semicolon)Â· The decimal point must be a period (US format, again unless CSVNumFmt: Comma is specified)Â· All rows must have the same field orderFor multi-file CSV import, the following rules also apply:Â· There must be one file per symbolÂ· The name of each file must be SYMBOL dot CSV (e.g. MSFT.CSV) [not case sensitive]For single-file CSV import, the only extra rule is that the file must include a Symbol column.The following potential anomalies are permitted and handled correctly in CSV import:Â· Fields with or without quotes around them (quotes are removed)Â· Quoted numeric fields with embedded commas (quotes and commas are removed)Â· Rows in any order (ascending or descending or even random â RealTest will sort them)Â· Columns in any order (but the order must be specified)Â· Presence or absence of a header row or other extra rowsÂ· Dates in any supported format (use CSVDateFmt to override current program setting for M/D/Y vs. D/M/Y if needed)Â· Split adjusted and/or un-adjusted dataÂ· Dividends can either be a column in the data, or can be specified in the EventList file as a special event typeÂ· Each row can include an extra column with whatever you want in itOther considerations:Â· Each multi-file CSV import path must be specified in its own DataPath statement (there is no directory tree recursion) Â· Each single-file CSV import file must be specified in its own CSVFile statementÂ· CSV import sections must also include a CSVFields statement to define the layout of the columns in the CSV files (header rows are always ignored)See also import_csv.rts in the Examples folder for an example.
8.5. MetaStock Import
RealTest supports importing data from MetaStock-format folder trees.
To import MetaStock data, specify "MetaStock" as the DataSource, and provide one or more DataPath statements with location(s) of MetaStock data folders.
122Only top-level folders need to be given. RealTest will recursively traverse the entire folder tree under each specified folder.
See also import_ms.rts in the Examples folder for an example.
8.6. Tiingo Import
The Tiingo data service is a significant step up from Yahoo in terms of quality and reliability. Tiingo offers a free service level with usage limitations, or virtually unlimited usage for $30/month.Whether you use their free or paid service, you must register with them and receive a private API key.The import_tiingo.rts example script includes comments about how to provide your your Tiingo API key to RealTest in order to use Tiingo data:
As stated in the above comments, you must perform a one-time task of quitting RealTest, editing RealTest.ini, and entering your key in this spot:
Once the INI file is saved, run RealTest and you'll be able to import from Tiingo. Your key will remain preserved in the INI file thereafter unless you delete or replace the file or edit it again and delete the key.
123In addition to Tiingo stock price data, RealTest also supports TiingoCrypto as a separate data source. Use this DataSource name to import daily bars for any crypto currency symbol.Another RealTest.ini setting, TiingoExchanges, can optionally be used to provide the &exchanges string to send to the Tiingo API when requesting data.
8.7. Yahoo Import
Yahoo import works by downloading and parsing JSON data files from finance.yahoo.com. Several of the example scripts include Yahoo import sections, e.g.
To import data from Yahoo, you must provide a symbol list using one or more IncludeList statements. This will be the list of symbols that are downloaded and imported. To find out what symbols are available, visit https://finance.yahoo.com/ and use the search function, e.g.
When using Yahoo to import large lists of symbols, you may find that it becomes very slow after the first few hundred. Yahoo deliberately slows down the connection when they see too many download requests from the same IP address in too short a time. You get what you pay for (Yahoo is free).Yahoo data includes both splits and dividends, so RealTest is able to provide accurate as-traded backtests using this data. Yahoo does not, however, offer delisted symbols or historical index constituency information. If these are important to you, Norgate Data is the recommended source to use.Yahoo data also does not provide any symbol-level information such as company name or industry. Although some of that information is on the website, RealTest does not do any screen-scraping. If you have such information in CSV format and want to apply it to a Yahoo import, you can do so by adding a SyminfoFile path to the import definition. An example SymInfo file for the S&P 500 components is included in the Examples folder and used in the script shown above.In addition to the advantages mentioned above, the biggest advantage to using a paid data service like 
124Norgate has to do with this kind of meta-data. Specifically, there is never a need for a SymInfo file when using Norgate. The company name, industry, exchange, country, currency, etc. are all obtained automatically during import. More importantly, Norgate includes a dynamic Watchlist facility that makes it easy to know that every day, you are importing "all the symbols in the market" (or in an index, or however you want to define your universe). If you use a free source like Yahoo, be prepared to do a lot of research every day just to keep track of symbol changes, additions, delistings, etc.
8.8. Multi-Source Import
RealTest has the unique ability to easily combine data from multiple sources into a single .RTD data file.The import_multi.rts example script shows how this works:
If you ran this script in Import mode (and had all the referenced data sources), the following would occur:Â· &ES (E-Mini S&P 500 futures continuous contract) and SPY would be imported from NorgateÂ· SPY would also be imported from Yahoo with its symbol renamed to "SPY2"Â· AAPL would be imported from a CSV data directory (assuming there is a file named AAPL.CSV in that directory)Â· All symbols in a second CSV data directory would be imported (in this case the remaining DJIA components)Â· All these are combined in a single RTD file (and in memory)
125Â· The import log file multi.log appearsThe log file confirms that all the symbols were imported:
Selecting Data / Show Chart shows that the data is now available in memory:
1268.9. Symbol Information Files
Because some data sources provide either no information at all or only the company name, RealTest provides a way to include other per-symbol information when importing data. This is done using a special-purpose CSV file (or multiple such files).The first row of the file must contain column names from the first column of the following list:Column Content Type Script VariableSymbol string ?Symbol
127Name string ?NameType string ?TypeEquityType string ?EquityTypeListingType string ?ListingTypeExchange string ?ExchangeCurrency string ?CurrencyReportingCurrency string ?ReportingCurrencyDomicile string ?DomicileEconSect string ?EconSectSector string ?SectorIndGroup string ?IndGroupIndustry string ?IndustryInduIndex string ?CIITRBC numeric InfoTRBCGICS numeric InfoGICSShares numeric InfoSharesFloat numeric InfoFloatMargin numeric InfoMarginPointValue numeric PointValueTickSize numeric TickSizeAssetId numeric InfoIdDelistDate date InfoDelist / InfoExpiryPriceMult number n/a
Columns and rows can be in any order. The symbol in each row should match a symbol from the import. All other columns are optional.The set of supported symbol information columns corresponds to the metadata that is automatically included when Norgate is the data source. There is therefore rarely a reason to use a SymInfoFile with Norgate import.The one exception to the above is PriceMult. This does not correspond to a script variable. Rather, it is used to enable automatic correction during import when data services multiply prices by (typically) 100, most often for JPY futures.For other data sources, you are welcome to use any of the above columns for any kind of information you want to have available. Just use the corresponding formula element to access it as needed in your scripts.If you're using futures contract data from a source other than Norgate, it is very important that you provide a syminfo.csv file with the PointValue for each symbol. TickSize can also be provided if desired, but PointValue is critical for backtest stats calculations.Your Import definition can include any number of SymInfoFile statements. For data services like Norgate that already provide metadata, any values you provide will override the corresponding defaults. Each SymInfoFile overrides any values specified by prior ones in the script's line sequence.See also import_spx.rts, spx_syminfo.csv, djia_make_syminfo.rts, djia_use_syminfo.rts, and djia_info.csv in the Examples folder.
8.10. Futures Symbol Information
For futures data import from a source other than Norgate or CSI Futures, it is critical to include a SymInfo file with the correct PointValue for every symbol. Otherwise, backtest results will not be accurate. (TickSize is not required, but if present, it will be used in chart scaling, and will be useful in formulas such as slippage modeling.) A futures SymInfo file must also include a "Type" column containing anything starting with "Fut" in each 
128row. This is how RealTest knows the symbol is a futures contract.You can import data that contains any mix of asset types. RealTest models transactions for each symbol according to its asset type. This is why it's important to tell RealTest what type a symbol is.The Margin column in the SymInfo file, if provided (it's not required), specifies the current dollars-per-contract margin collateral for each futures symbol. By default RealTest uses the current Margin value for all historical dates in a backtest. You can optionally provide a formula to calculate estimated historical margin requirements via the FuturesMargin strategy element. RealTest does not automatically limit futures exposure based on margin requirements but can optionally do so using the MinFreeCash constraint formula and/or the S.FuturesMargin stats array. The S.FreeCash stats array (referenced internally for MinFreeCash determination) assumes that a position requires futures margin only if the symbol has a non-zero margin requirement.
8.11. Event List Files
Event List files can be included in a data import to add point-in-time event information to specific dates for specific symbols. The most likely use of this feature would be to include historical earnings dates and values if you have access to such information.As with symbol information files, event lists use CSV format. The first row of the file must contain column names from the following list:Â· Symbol â the symbol for which the event occurredÂ· Date â the date of the eventÂ· Time â the time of the event (optional)Â· Type â any numeric code > 0Â· Value â any numeric value (e.g. dividend amount, or EPS, or index constituency flags)These columns can be in any order. The names are used to identify them.Rows after the header row can also be in any order. Each row defines one event for one symbol on one date.When first importing with an event list, it is suggested to use the LogFile option in your import definition. Events for which the symbol+date is not found in the imported bar data will be reported in the log.Imported event data is accessed in script formulas by using the Event(type) function, which returns the value field if an event exists for the current symbol on the current date, or 0 if no event was found (with an option to return the most recent event -- see the function link for details).The Time field stored with each event record determines which bar the Event function will align the event with. If Time <= 16:00:00 (160000) then the event will be aligned with the bar which has the specified date. If Time > 160000 then the event will be aligned with the next bar after the bar with the specified date. The intention with this distinction is to differentiate "before the open" vs. "after the close" earnings report times. If you have point-in-time earnings data and are using EventListFile to import it and Event(n) to reference it, you will want Event(n) to return a value only for the dates on which the market first reacted to earnings news.See also djia_earnings.rts and djia_earnings.csv in the Examples folder (note that this example does not use the Time field).
8.12. Dividend and Constituency Events
129The following is not necessary to read or understand unless you have your own custom dividend and/or index constituency data series that you need to add to a non-Norgate import. As well as for user-defined events as described in Event List Files, RealTest also uses the event list within each RTD file to store Dividends and Constituency Change events. Dividends are stored as event type -1. Event(-1) is therefore equivalent to Dividend in any formula. Event(-1, 1) can be used if desired to find the most recent dividend amount. Event(-1, 1) is equivalent to WhenTrue(Dividend > 0, Dividend).To add your own dividend event, set Date to the ex-dividend date, Type to -1, and Value to the dollars-per-share amount of that dividend on that date.Constituency Changes are stored as event type -2 through -n. The specific event number for an index is -1 minus the number from the first column of the constituency.csv file. So by default $MEL is -2, $XAO is -3, etc.RealTest automatically generates a constituency change event on the first available date of each symbol in the RTD file for each imported constituency series (index) that it belonged to on that date.Though constituency change events are only present for the dates (after the first date) on which the symbol entered or left the index, RealTest automatically maps the corresponding InXXX variable to Event(n, 1), i.e., it looks up the most recent change event to determine whether the stock was in the index on the date being evaluated.To add your own index constituency series, do the following:1. Edit your copy of the constituency.csv file and add your indices at the end. Perhaps start with 100 is the first index number, to leave plenty of space after the Norgate numbers. Make up your own values for the remaining columns, e.g. 100, $DAX, InDAX, Member of Dax. The only required items here are the number and the InXXX name to use -- the other two are provided only for your own information since you would not be directly importing these series from Norgate.2. Create an EventListFile containing your constituency change events. Symbol is the stock to which the change applies. Date is the date of change. Type is -1 minus your index number as specified in step 1 above, e.g. -101 for index 100. Value is 1 if the stock joined the index or 0 if the stock left the index on that date.3. Close and re-open RealTest so it can read your new constituency.csv file4. Run your importYou should now be able to reference your custom index constituency series using your custom InXXX variable!
1309. Running Scans
Scans are used when we want to extract a subset of data from the currently loaded data file and display that data in a specific way.If you've gone through Tutorial 3, then you already know a lot about Scans.To run a scan, you must first import or load a data file, then open or create a script that includes a Scan section.If the currently active script includes a Scan section, then the Scan button on the Tool Bar (and the Scan item on the Run Menu) will be enabled. Pressing it will run the script in scan mode.As with all run modes, Scan first applies your settings from the Settings Panel, then applies the Settings script section if one is present. Finally, if your script includes a Scan Settings section, items that it specifies will override your general-purpose settings for those items.The Filter formula of a scan defines which symbols and bars are included in the output.The Sort specification item lets you define the initial sort order by column name.All other items in a scan definition are used to add columns to the output with any desired contents.See the Multi-Row Scan and Test Output Scan topics and the scripts listed in the Scanning Examples category here.
13110. Running Tests
To run a test, you must first import or load a data file, then open or create a script that includes one or more Strategy sections.If the currently active script includes a Strategy section, then the Test button on the Tool Bar (or the Test item on the Run Menu) will be enabled. Pressing it will run the script in backtest mode.As with all run modes, Test first applies your settings from the Settings Panel, then applies the Settings script section if one is present. Finally, if your script includes a Test Settings section, items that it specifies will override your general-purpose settings for those items.If you haven't already done so, please go through Tutorial 1 and perhaps the others to get a feel for how backtesting works in RealTest.For a look "under the hood", see Backtest Engine Details.
10.1. Multiple Tests and Optimization 
Optimize mode provides typical parameter optimization functionality along with other ways to run multiple tests.To run in this mode, click Optimize in the tool bar or select Run / Optimize in the menu bar.When you run a test in Optimize mode, the Optimizer dialog appears before the test starts running:
1Parameter List
Shows each of your optimization variables along with the count of iterations for that variable and the range of values. The checkboxes within the list can be used to exclude any variable from optimization. When a variable is excluded, its default value will be used. 
1322Optimization ModeSpecifies the type of optimization to be performed:Â· Combinatorial mode is the traditional exhaustive nested loop covering every possible parameter combination. If you have more than 2 or 3 variables with more than a few values for each, you will see that the total test count quickly becomes very large. Due to the speed of RealTest, itâs quite practical to run portfolio-level optimizations involving thousands of tests across thousands of stocks across multiple years of time. Whether this approach is likely to discover a strategy that will be profitable in the future is another matter.Â· Sequential mode loops over each variable in order. At the end of a loop, that variable keeps whichever value produced the highest score. Running 2 or 3 iterations of a sequential optimization will often be a quicker way to find areas of good parameter values than the combinatorial approach.Â· Genetic mode is not a true genetic optimizer, but the concept is similar. Before each test, a random subset of the parameters is selected and then the values of those variables are selected at random from their value lists. (How many parameters to change each time is determined by the "mutate" option.) If the score from the test is higher than the prior best score, the new values are kept, otherwise the prior best values are restored. Genetic mode will generally converge on the best combinatorial result within approximately the square root of the total combination count. Note that to use genetic mode, you must specify the number of test iterations to be run.Â· Random mode is similar to genetic mode except that it randomly selects a value for every variable before every test, and (therefore) completely ignores the score of each test. A good use of random mode is to select a reasonable value ranges for each parameter, run 100 test iterations (random combinations), and look at the median result. This might provide a reasonable estimate of how the system would perform in the future, given how arbitrary parameter selection can be. Note that to use random mode, you must specify the number of test iterations to be run.Â· Defaults Only mode is equivalent to clearing all the check boxes.
3For Each StrategyThis option causes a separate test (or multi-test optimization) to be run for each strategy in the script, as if all the other strategy definitions had been commented out.
4For Each SymbolThis option causes a separate test (or multi-test optimization) for each symbol in the data file, as if that was the only symbol in the data. 
5Test IterationsUse this setting to do any of the following:Â· run many iterations of the same test repeatedly using the Random function in one or more strategy formulas, to obtain a range of potential outcomesÂ· run a parameter optimization in Genetic mode, to specify how many iterations to runÂ· run a parameter non-optimization in Random mode, to specify how many iterations to run
6ScoreAllows you to select any column from your results window to use as your "fitness function". Since the results columns are all formula-based, this means you have unlimited possibilities for what to use here.  The value returned by the selected formula is used to rank the results after an optimization run if "Sort After Each Test" is checked. This is most useful with the Sequential or Genetic optimization modes, and when creating a Walk-Forward test.
7Results Window OptionsThe results window options choices enable you to clear the results window at the start of the test (assuming it was already open, otherwise a new one is created), and optionally be partially cleared and sorted during the test as well. While watching an optimization run, it is often desirable to just see the best 10 results, for example. Keep No Trade Tests overrides the default behavior of not saving test runs that produced zero trades.
1338Date Intervals
The Date Intervals panel is used primarily to generate a walk-forward test but can also be used to simply produce a series of results for different time periods. (It is OK to run a script in Optimize mode even if it contains no optimization parameters.) In particular, it can often be useful to set the time unit to "Years", simply to run a strategy for each year of a date range separately.By default each date interval is a sliding window of the same length. The Anchor setting lets you optionally lock the start or end date.
Anchoring the start date makes each interval larger than the preceding one, and anchoring the end date does the opposite.
9Create Walk-Forward
See Walk-Forward Tests for a detailed description of this feature.
10Multi Save As CSV
Causes SaveStatsAs and/or SaveTradesAs to be performed at the end of the optimization, creating separate files for each test. These settings are ignored when running multiple tests unless this box is checked.
11Summary Log
Creates a log window summarizing the optimization.
12Maximum Test Count
At the lower-right corner of the dialog is the test count. Notice how it changes as you check and uncheck the checkboxes and other options.
See also Tutorial 2 - Optimization for a specific usage example.
10.2. Walk-Forward Tests
To introduce Walk Forward testing, let's return to the sample2.rts script used in Tutorial 2. 
Open that script again and click on 
.
Now make all of the following selections in the Optimizer dialog:
1341Parameters
Check both parameters.
2Mode
Set to "Combinatorial"
3Iterations
Set to 1.
4Score
Set to NetProfit, or any other Results Window item (statistical formula) you want to optimize for. This is your "Fitness Function".
5Clear Results
Check this so any prior tests will be deleted, and/or open a new results window.
6Sort After Each Test
Check this whenever generating a Walk-Forward test.
7Keep Best
Set to 1 for Walk-Forward.
8By Date
Check this (it will become enabled after the next step if it isn't already).
9Daily Interval
Set Time Unit to Days (or a longer unit if desired).
13510Test Length
Specifies how many days (since that's the Time Unit) to include in each backtest (252 days is one year).
11Test Interval
Specifies how often to re-optimize (63 days is one quarter).
12Walk-Forward
Check this.
13Test Count
This will show how many tests need to be run. (The current version of the example script has different parameters so the count will be different.)
Now you are ready to press 
 and let RealTest generate your walk-forward model.
Though there are about 5,000 tests to run, it will probably take less than one minute to finish, depending on the speed of your computer.As the tests run, you will see the Results window being updated continually. To help the process finish faster, minimize the Results window until all tests are finished, then restore it again.Here is what is going on under the hood:
          
for each 63-bar interval of the overall date range
          
          
for each of the 40 possible combinations of the two parameters
          
          
          
run a 252-bar test and keep the result if it is better than the prior best result
          
          
record the start date and parameter values that produced the best resultOnce the above is complete, a new WalkForward section is automatically added to your script. This section contains an item called "Dates", and an item for each of your parameters. These things together serve to define how to run the final Walk-Forward test, in which the best parameters from the previous interval are used for each 63-bar interval. In effect, this becomes a test of the effectiveness of the process of periodic re-optimization.Here is a snippet of how the results and script windows will look at the end of the run:
136The Results window shows the best "in-sample" test for each interval. The final two tests run are the in-sample (1480) and out-of-sample (1481) results for the entire date range.The script window shows the new WalkForward section that was generated. These three rows extend far to the right. The first row contains the start date of each interval and the subsequent rows contain the best value found for each parameter in each interval.To run the walk-forward test again (without re-generating all the parameter values), simply press the Test button or select Run Test from the Run Menu:When a script includes a WalkForward section (and it's not commented out), RealTest will always use it when running that script in Test mode.
13711. Using an Imported Trade List
OverviewRealTest makes it easy to define a strategy based on a list of specific trades. Running such a strategy is like playing back those trades and using them to generate results statistics.Reasons to do this might include:Â· Analyzing the results from a period of live trading (whether systematic or discretionary)Â· Seeing if you could have done better using different exit rules, position sizing, entry skip criteria, etc.Â· Comparing actual vs. backtest results for a strategy or set of strategiesÂ· Playing back live trades to correctly establish current positions when generating Tomorrow's Orders.To play back an imported trade list, create a Strategy that includes a TradeList statement.
Trade List TypesRealTest supports two kinds of trade lists: transactions and round-trip trades.Transaction lists are things like IB Flex Query output, where each row only specifies a single transaction (e.g. BUY 100 MSFT). RealTest automatically sorts the transaction list by symbol then date and time, and converts it to a round-trip trade list for use in a backtest.Round-trip trade lists include one row per round-trip trade, with both the entry and exit details included.
Trade List FormatFor either type, the trade list must be a plain text file in standard US CSV format.The field delimiters must be commas and the decimal points must be periods.The CSV file must begin with a header row containing its column names.If the column names are not the standard names as shown in the example below then you must provide a TLFields definition to tell RealTest what field is in each column.The DateIn and DateOut columns can use any supported date format. If your program options date format setting conflicts with the trade list's date format (i.e. m/d/y vs. d/m/y), use TLDateFormat to override the setting while parsing this trade list.
Other Trade List SettingsRealTest expects quantities and prices in a trade list to be actual "as-traded" values, i.e., not split-adjusted. If your trade list has been adjusted, use TLAdjusted to let RealTest know this.If your trade list dates and times are known to be in the wrong time zone (e.g. your local zone rather than the exchange zone), use TLTimeShift to correct this.If you want trades labeled for a particular strategy to play back in a strategy with a different name, use TLStratName to specify this.
Example ScriptAs an example, see actual_trades.csv in the Examples folder, the first few rows of which look like this 
138in a text editor:
or like this in Excel:
A trade list file can include all of the trades or transactions from any number of strategies. The example script actual_trades.rts shows how to use this file.This example includes two strategies, called "Longs" and "Shorts" (the above screen shots happen to only include long trades).To "run" this trade list as a backtest that produces separate stats for each side plus combined stats, the example defines two strategies:
The Template mechanism was used to avoid having to repeat the file path and field map.This example script contains sample templates for several known trade and transaction list formats, which can be copied in to your own scripts as needed:
139Overlaying Strategy RulesIn addition to simply playing back a list of trades to generate stats and graphs or look at trade charts, you can also experiment with adding strategy elements to override the entry or exit rules or position sizes of the trades.As a simple example, try adding EntrySkip: C > 50 to the strategies in this example script, then re-running it. You'll see that this reduces the trade count by about half, and lowers the expectancy somewhat. (You must use EntrySkip rather than EntrySetup to override a trade list entry. EntrySetup is ignored in overlay mode.)To override the position sizes in an imported trade list, add both a Side specification and a Quantity formula to each strategy.To test different exit rules, simply add them to the strategy. Note that adding any exit formula (ExitRule, ExitLimit or ExitStop) to a TradeList strategy disables all exits from the trade list.
Switching from Trades Playback to Strategy RulesBy default any strategy containing both a TradeList statement and some Strategy formulas is played back as described above by overlaying any specified strategy elements on the imported trades.It is also possible to run a "hybrid" playback where the trade list runs verbatim up to a particular date and then the strategy rules take over entirely after that date. To activate this mode, add TLEndDate to your Strategy definition.
Using Hybrid TradeList+Formula Strategies for Tomorrow's OrdersThe behavior described in the two prior sections applies when the run mode is Test.
140When a strategy with a trade list is run in Orders Mode, it is assumed that the purpose of the trade list is to establish current positions and account value from actual live trades playback prior to generating tomorrow's orders.Therefore playback is always done in hybrid mode when generating orders. All strategy element definitions (including TLEndDate if specified) are ignored throughout the entire playback (as when TLEndDate: Latest is specified in Test mode). The strategy definition is only applied at the final order generation step.To use this feature in your daily live trading, you would need to do the following:1. Obtain an accurate record of your live trades, in CSV format, since the desired start date. Ideally, your automation software will generate this list automatically. Alternatively, it could be produced by IB using either Flex Query (via the account management website) or by enabling automatic generation of trade logs in TWS and then concatenating them.2. Add TradeList and (if needed) TLFields statements to your existing strategy definition, referencing the CSV file thus obtained.3. Import the latest data and run the test in this hybrid mode to produce tomorrow's orders.Note that when OrderClerk is used to place and manage your orders, all of the above is handled automatically. OrderClerk maintains an accurate round-trip trade list from your live execution reports. By specifying OrdersMode: OrderClerk and OrderClerkFolder: <path to folder where OrderClerk runs this strategy>, you don't have to add TradeList or TLFields to the strategy and don't need to worry about how to maintain a live trade list.
14112. Using Command Line Mode
RealTest supports an optional Windows command line mode. To use this mode, simply invoke RealTest from any Windows command shell window or batch script, with arguments specifying your desired action.Supported command line tasks:vrealtest -import script.rtsÂ· runs script.rts in Import modeÂ· saves data to RTD file if import definition includes a SaveAs pathvrealtest -scan script.rtsÂ· runs script.rts in Scan modeÂ· saves scan output to CSV if ScanSettings include a SaveScanAs pathvrealtest -test script.rtsÂ· runs script.rts in Test modeÂ· saves results data to RTR if the Settings include a ResultsFile pathÂ· saves results window contents to CSV if test settings include a SaveTestListAs pathÂ· saves stats to CSV if test settings include a SaveStatsAs pathÂ· saves final position list to CSV if test settings include a SavePositionsAs pathÂ· saves trade list to CSV if test settings include a SaveTradesAs pathvrealtest -orders script.rtsÂ· runs script.rts in Orders modeÂ· generates and saves Order List file(s) as specified in the scriptÂ· also saves results and other output as is done for Test modeMultiple run modes can precede a script name, e.g. realtest -import -test script.rts will run that script first for import and then for backtest.Multiple scripts can follow a run mode, e.g. realtest -orders orders1.rts orders2.rts orders3.rts will generate orders from three different scripts.If all scripts ran successfully, the program return code will be 0. If there were errors, the return code will be one of the following:Code Meaning1 unknown command line task2 license error3 file open/read/write error4 memory error5 script error (syntax etc.)6 import error7 can't load data file8 other / unspecified
Note that in the event of an error, the usual popup message that would be displayed when not running in command line mode is instead appended to a file called "errorlog.txt" in the folder where RealTest was installed.When using a standard Windows .CMD batch script, you can check the return code using %errorlevel%, as in the following example:
142@echo offcd c:\RealTest
start /wait RealTest -import -scan my_scan.rtsif errorlevel 1 goto error
start /wait RealTest -import -orders my_orders.rtsif errorlevel 1 goto error
echo Script completedgoto done
:errorecho An error occurred -- see Notepad for detailsstart notepad c:\RealTest\errorlog.txt
:donepauseexit
Note also that in batch mode, RealTest runs with its main window minimized, but you can restore it manually if desired, to see what it's doing.The command -noexit can optionally be added to the command line. If found, RealTest will remain open after processing the other commands. If errors are encountered in a -noexit run, RealTest will close, return an error code, and log the error to errorlog.txt, as if -noexit had not been specified.
14313. Using Multiple Instances
You are welcome to run any number of simultaneous instances of RealTest on the machine(s) for which you have activated your license.Each instance everything that it needs to run scripts in its own allocated memory, so they will not collide or conflict with each other in any way. The only possible exceptions to this are:1. The RealTest.ini file, which is used to remember things like window positions, default settings and recent file lists, is automatically saved when RealTest is closed, so whichever instance is closed last will be the one whose settings etc. are saved in RealTest.ini.2. Similarly, if multiple instances are running the same script file, the file saved to disk will be the one from whichever instance has run it most recently. (Script changes are always automatically saved before a script is run.)You can optionally copy your entire RealTest folder to one or more other locations on your disk drive, in order to avoid both of the above potential conflicts and maintain completely separate work environments. In most cases this will not be necessary, but it is an option if you need it.To run multiple instances of RealTest from its desktop icon, simply double-click on the icon multiple times.To run multiple instances of RealTest from its task bar icon, right-click on the task bar icon and select RealTest from the popup menu.
This starts a new instance, whereas clicking on the taskbar icon just brings the current one to the front (or pushes it to the back if it's already in front).Another way to start new instances is to open a command prompt, navigate to the RealTest folder (e.g. "cd c:\RealTest"), then type "RealTest" and hit enter.
RealTest can optionally be told to use a file other than RealTest.ini to retrieve and store program settings etc. This is done using the -inifile command line option.For example RealTest -inifile project1.ini would run RealTest using that settings file rather than the default RealTest.ini.This use of multiple ini files can help avoid the potential confusion of two instances both updating the same ini file.It can also provide a way to maintain separate settings, open and recent file lists, etc. for different projects.
14414. Analyzing Test Results
After running a test, a new Results window will appear or, if one was already open, a new row will appear in it. Each test that has been run gets its own row in a results window. Behind each of these rows is a richness of information:
Here are links to details about many of the above items:Â· Daily Stats GraphÂ· Trade PlotÂ· Trade ListÂ· Summary ReportÂ· Optimization GraphShow Original Test Script will open a new read-only script window displaying the exact script that was used to run this test. This is especially useful while repeatedly editing and re-running a script, when you can't quite remember how a particular result was achieved.Get Settings resets the Settings Panel to show the settings that were used when this test was run.Modify Notes allows you to edit the value of the "Notes" column for this test ("mr_sample" in the above image)List Unique Symbols creates a new log window with a sorted list of each symbol that was traded at least once in the test.The remaining items control the user interface of the Results window.
14514.1. Test Summary Report
The Summary Report provides an overview of the results of a test in a unified output format. There are three ways to create a Summary Report:
1.Run a test with 
 specified, either via the Settings Panel or the Settings script 
section.
2.Select a test in the Results Window and then Click 
 in the Tool Bar. 
3.Right-click on a test row in a Results Window and select Show Summary Report from the menu:
The Summary Report is generated as a web page (HTML and PNG files) and placed in the Reports sub-folder of your RealTest installation directory. It is then opened in a new window of your default browser.The following items are available for inclusion in the Summary Report:Â· the settings and parameters with which the test was runÂ· overall stats for the test (as also shown in its row in the Results Window)Â· this same set of stats for each specific strategy within the testÂ· monthly P/L for each month of the test, organized in a table with one row per yearÂ· strategy correlation matrix, if there were multiple strategiesÂ· a subset of Daily Stats Graphs from the testÂ· a subset of Trade Analysis Plots from the test, including Monte Carlo statisticsÂ· the text of the script (plus all included scripts) that was used to run the testAny of the above categories can be optionally omitted by using the Report Options Dialog to deselect its corresponding checkbox before generating the report.
146Because these reports are fairly large, an example has not been included in this User Guide.See Analyzing Test Results for pointers to some more detailed and powerful ways to study your backtests.
A few Summary Report usage details to keep in mind:Â· The selection of Results stats that is included in each row of the Report List index is governed by the presence of {|} the stats formula as defined in Results.rts or your replacement Results Section. These are the same stats that are displayed in the Status Bar when the test is running.Â· The selection of Daily Stats Graphs to include in Summary Reports is controlled by the item formatting codes in the Graphs Section. A graph is included only if its formatting code includes the '^' character. The default Graphs.rts script selects the Equity, Drawdown, Daily and Quarterly graphs. You can easily change this selection by editing that file and adding/removing '^'s as desired.Â· The Equity and Monte Carlo Profit graphs are automatically plotted using a logarithmic scale if the test was run with compounding, or an arithmetic scale if not.Â· All of the Trade Plots and Monte Carlo stats show percent profits, losses, drawdowns, etc. if the test was run with compounding, or dollar figures of these items if not.Â· The generated HTML that displays these graphs and plots includes the ability to click on any image to see the full-sized version of that image.
14.2. Test Details Log
The Test Details Log can be used to study test results at the individual trade level in greater detail than is available in the Trade List Window.
To create this log, run a test with 
 specified, either via the Settings Panel or the Settings 
script section. There is not a way to create a transaction log after a test has been run, it can only be created while the test is running.The log is created as a file in the "Logs" subdirectory of the RealTest directory, with the name TEST_xxxx.TXT, where 'xxxx' is the test number. If that file already existed, it is overwritten without confirmation, so if you want to be sure to save a transaction log file it is necessary to rename or move it.When the test finishes running, the test details log file is automatically opened in a new Log Window.The following is some of the log output for the sector_etfs.rts example script backtest:
147Because this log output is tab-delimited, it can optionally be copied to Excel via the clipboard if you find it more convenient to view it in a worksheet and/or want to do further analysis. To copy an entire detailed log to Excel:1.Edit / Select All (or press Ctrl+A) in the log window2.Edit / Copy (or press Ctrl+C) in the log window3.Edit / Paste (or press Ctrl+V) in Excel
14815. Trading Your System
So you've come up with a set of strategies that work well together and you're ready to start trading them. Now what?First, please, use the "paper trading" mode of your brokerage interface for a few days (or weeks) to make sure that your system is doing what you think it is doing before committing real money to it.Even if you plan to fully automate your trading some day, there's a lot to be learned from running a system manually at first.RealTest can be used as part of a full trading automation solution but, by itself, cannot be used to place orders directly to any brokerage.The following topics show the various ways that RealTest can help with your live trading.
15.1. Tomorrow's Orders
RealTest includes an Orders run mode that you can use to run a script and generate brokerage orders for tomorrow's trading (or today's trading if it's the morning before the market open).The key point is that RealTest is designed to fully support order generation for daily trading systems -- systems for which all orders for the upcoming day can be specified when the market is not currently open. In other words, RealTest does NOT support live trading of strategies that would require live data to evaluate realtime intraday trading signals. In practice, since RealTest can't backtest intraday strategies either, this is not a major limitation to its order generation capabilities.After a test is run in Orders mode, a new Log Window is opened showing the list of orders that would need to be placed with a broker before the open of the next day after the last date of the test. This can also be thought of as Tomorrow's Orders.See Generated Order Types for details about how RealTest maps strategy rules to generated orders.To best illustrate this feature, open the mr_sample.rts example script, and modify its Settings section to look like the following:
This will model a trader who started trading the strategy at the beginning of 2020 with a $100K account and needs to know what orders to place for live trading on November 18.(In actual usage, you would leave the EndDate set to Latest and re-import the data file each day.)
After running with these settings by clicking 
, the Orders log window appears:
149Please note that unless you are using OrderClerk, this is only a best estimate of what your orders should be. There is no way for RealTest to know what your actual fill prices and quantities were when recent positions were entered, what deposits or withdrawals you've made in your account, and so on.This pair of strategies use the MaxSetups / SetupScore technique to ensure that the number of limit orders placed each day does not exceed your available position slots. These strategies also use NextOpen as the ExitTime for their rule-based exits (this is the default ExitTime). These two facts are why it is possible to determine "tomorrow's orders" ahead of time.For strategies that use ThisClose entries or exits, it is not possible to foresee what tomorrow's orders will be. In this case, this caveat will be indicated in the log (here demonstrated by temporarily ExitTime to ThisClose for these strategies):
150Note also the "child: " orders that are added after each entry order in the first order list shown above. This is because this strategy includes an ExitLimit formula (profit target) that might trigger on the same day that a position is entered. In practice, one could place these as "child orders" with a broker, meaning the order is only activated after the parent order has been filled.If you modify the ExitLimit formulas so they don't apply on entry day, the child orders are no longer included:
 
If a strategy uses MaxEntries with unlimited setups, the log text will include a caveat about how many fills to allow:
(etc.)Advanced Live Data ModeA special advanced mode is also available, which turns this feature into "Today's Orders". 
151Add OrdersLiveData: True to your Settings to activate this mode. Note that doing so assumes that you have found a way to obtain and import today's daily bars for all stocks BEFORE the market has closed, and that your strategies use ThisClose as their EntryTime and/or ExitTime.
15.2. Generated Order Types
Generated Order TypesThe following is a complete list of possible order-producing strategy elements showing the specific order types and attributes that will are generated:Strategy Elements Related Time Setting TYPE TIFGood Until Time
Good After TimeEntrySetup (no stop or limit) none or NextOpenMKT DAYEntrySetup (no stop or limit) NextClose MOC or MKT*DAY 15:58*
EntrySetup + EntryLimit none LMT DAYEntrySetup + EntryLimit NextOpen LMT OPGEntrySetup + EntryLimit NextClose LOC or LMT*DAY 15:58*
EntrySetup + EntryStop none STP DAYEntrySetup + EntryStop NextOpen STP GTD9:31*EntrySetup + EntryStop NextClose STP DAY 15:58
EntrySetup + EntryStop + EntryLimitnone STP LMT DAYEntrySetup + EntryStop + EntryLimitNextOpen STP LMT GTD9:31*EntrySetup + EntryStop + EntryLimitNextClose STP LMT DAY 15:58
ExitRule none or NextOpenMKT DAYExitRule NextClose MOC or MKT*DAY 15:58*
ExitLimit none LMT DAYExitLimit NextOpen MKT DAYExitLimit NextClose LOC or LMT*DAY 15:58
ExitStop none STP DAYExitStop NextOpen MKT DAYExitStop NextClose STP DAY 15:58
* order type and time depends on exchange capabilities and settings as defined in ExchangeMap.csv
Special Case for "Day Trade" StrategiesThe table above does not cover the ThisClose time setting. That setting is generally not compatible with in-advance order generation as it requires knowledge of the current nearly-completed bar to calculate the strategy formulas. The one exception to this rule is a type of strategy that enters positions with limit orders and exits that same day with an MOC order as its only exit rule. 
152To specify this type of strategy so that RealTest automatically generates correct orders, use:
This will generate a "child" MOC exit order attached to each "parent" entry order.The entry order is then generated with GTD as its TIF and 15:40 as its expiration time (time can be changed in ExchangeMap.csv).
Support for International Exchanges, Order Types, and Time Zone NamesRealTest uses an ExchangeMap to determine how to correctly map available symbol metadata to correct brokerage orders.See the above link for full details about the contents and usage of this map file.The information it contains is used with the OrdersTemplate (also with OrderClerk) to ensure that:Â· symbols are correctly translated from Norgate to IB formatÂ· the correct SMART/xxx exchange definition is used in each orderÂ· MOC orders are generated where supported, otherwise GAT <time> is usedÂ· parent LMT entry orders for MOC exit strategies are placed with GTD <time> as appropriateÂ· NextClose orders are placed as GAT <time> correctly for each exchange (to become "NearClose" orders)Note that IB does not require the xxx in SMART/xxx to be the exchange on which a stock is listed. It only needs to pin it to the correct stock market, so that the symbol will not be ambiguous. For example, "SMART/AMEX" works fine for all US stocks even though most of them are not listed on AMEX.
Norgate to IB Futures Symbol MappingRealTest includes a file called ibfutures.csv. This file maps Norgate futures symbols to the corresponding IB symbols when there are differences. The default contents are:
If you find others, feel free to add them.Note that for any Norgate futures contract symbol, RealTest will automatically change the name to the correct IB format when creating a CSV order basket. For example, ES-2022M would become ESM2, and (also using mapping) 6E-2022M would become EURM2.To use the ibfutures.csv symbol mapping file, you must add SymChangeList: ibfutures.csv to your script's Settings section.
15315.3. OrderClerk
OrderClerk is an order management application which has been developed specifically to work with RealTest.A link to the latest version of OrderClerk can always be found in the RealTest Forum.Currently the only brokerage supported by OrderClerk is Interactive Brokers (IB). Others may be added in the future.OrderClerk is a smarter substitute for IB Basket Trader, optimized for use with RealTest. It accepts CSV file order lists and transmits them to IB via the TWS/Gateway API.In addition to placing orders, OrderClerk receives execution reports from IB and maintains a round-trip trade list based on your filled orders. Importantly, each order includes its Strategy name, which is then preserved in the trade list. This enables RealTest to use your live trade list as an input each day when generating tomorrowâs orders for a multi-strategy system, ensuring that those new orders are correctly based on the actual current positions and quantities for each strategy.This capability is implemented by automatically running the script in Hybrid TradeList Mode by implicitly adding TradeList: OrderClerkTrades.csv (and an appropriate TLFields definition) to each Strategy definition.As an example, to fully automate all seven strategies in the bensdorp_book.rts example script, the following OrderSettings section was added to the script:
The first three items override the general-purpose Settings items used for regular backtesting.OrdersMode tells RealTest to target OrderClerk when generating orders.OrderClerkFolder tells RealTest where to find OrderClerkTrades.csv and where to put the new order list.OrdersNetLiq tells RealTest to use the latest actual net liquidation value (mark to market account balance) of the account as the value of S.Alloc when generating orders. This ensures that entry order position sizes will accurately reflect the current account value.The key point is that NO changes were required to any of the strategy definitions themselves. It was NOT necessary to add TradeList or TLFields statements nor to change any of the regular strategy formulas in order to generate the correct set of new orders. This is all done internally and automatically.For more information about OrderClerk and how to use it with RealTest, see the separate OrderClerk User Guide documentation which can be found in the installation folder after you've installed OrderClerk.
15.4. CSV Order Baskets
The Tomorrow's Orders feature produces an order list in a human-readable text format by default. RealTest can optionally generate a machine-readable CSV order basket file as well (or instead), and lets you define the format using a template file. This will, in most cases, be an easier and better way to generate a CSV-format order basket vs. building it using a Scan or TestScanTo create a CSV order basket file, add the following (or something similar) to your Settings (note that 
154there is not a way to do this using the Settings Panel): 
When the test is run, the default text file list of tomorrow's orders will still be displayed, unless you changed that option. The specified CSV file will also be created and formatted using the specified template file. The default CSV output file will be {RealTest folder}/Output/Orders/{test_name}_{date}_orders.csv, where your actual test name and the current date are used.You can override this default by adding OrdersFile to your settings and/or to specific strategies if desired.When not using OrderClerk, an important consideration when using RealTest to generate a transmittable order list is position sizing. Pick a StartDate that is as recent as possible while still allowing enough time to align the backtest with your actual positions. In other words, whatever your longest holding period is, you would need to start the test at least that many days ago. You would then also need to set the AccountSize setting to whatever your actual account value was on that start date. Even then, the position sizes shown in the order list will most likely not exactly match your live trading. It is always advisable to review and edit as needed the generated files before using them to submit orders.The Examples folder in the RealTest installation directory includes two example CSV basket order template files: ib_basket_template.csv and chartist_api_template.csv. The first can be used to generate CSV order lists that IB Basket Trader can read, and the other will work with the automation "API" that Nick Radge sells as "The Chartist API".In many cases, using OrderClerk will be a simpler and better alternative to either of the above. Note that with OrderClerk it is not necessary to specify an OrdersTemplate path. RealTest includes a standard OrderClerkTemplate.csv file in its installation folder and will use that file automatically when generating orders for OrderClerk.The IB Basket template looks like this:
A CSV order list template file should have two rows. The first row will be used as the first (header) row of the output CSV file. The second row defines the fields to include in each order that is added to the list.In the above example, all of the lower-case text values are special codes for field contents (see below), and the upper-case values are literal constant strings to include.Running the mr_sample.rts example script from the start of 2022 through Feb-14, the following order list is produced for the next day:
155This same set of orders in the generated CSV order basket:
Notice how the entry limit orders are each given a unique order ID which the child target orders then use to identify their parents. IB Basket Trader translates these basket-specific ID numbers to unique internal values -- all that it requires is that they be unique and express the correct relationships within the basket file.Comparing the template to the output should serve to clarify how this works. Strings in the second row of the template that match the ones in the following table are placeholders for specific elements of each order (action, quantity, price, etc.) All other strings in the second row are simply copied to every output row, as in the above example.Here is the list of template field placeholder strings:String Description
156date order dateact order action (BUY or SELL)sym stock or contract symbol reformatted for IBexpiry expiration date of a contractrtsym original symbol as shown in RealTestcurr stock or contract currencydomi stock or contract domicile (country)sector stock economic sectorindu stock industryexch exchange to route orders to (can be e.g. SMART/NYSE)type order type (MKT, MOC, LMT, LOC, STP, STP LMT)qty position size (shares)qty0 position size (shares) for entry, 0 for exitdlr position size in dollarsfrac position size as an account fractionlmt limit pricestp stop pricetif time-in-force (DAY, GTD, OPG)allhours whether order is active all hours (0) or regular hours (1)gat good-after-time time (e.g. 15:58:00 EST)gtd good-until-date time (e.g. 15:45:00 EST)oca OCA group (automatically added if both stop and limit exits are used)id order id (use when attaching target/stop exits to entry orders)parent parent order id (use when attaching target/stop exits to entry orders)primary listing exchange of stock or contractsectype security type of stock or contractstrat strategy name (typically for the order reference field)side side of new or existing position: will be 1 for long, -1 for shortmaxent MaxEntries value (for The Chartist API "Max Fill" column)exit whether order is for an exit (1) vs. an entry (0)note OrderNote value (could be used as Account, FAGroup, etc.)extraN OrderExtraN value, where N is a number from 1 to 9nocommasuppresses the comma in the CSV output of this columntradeid round-trip trade ID (required for OrderClerk, not needed otherwise)uniqueida specific artificial order ID that is kept unique across sessions
If you require blank columns, simply add them to the header row but leave them blank in the second row of the template.
15.5. IB Rebalance Tool
RealTest supports generation of the import file for IB's Portfolio Rebalance Tool. This is a special version of a CSV Order Basket.This feature of IB TWS allows you to specify the desired target allocation (percentage) for each symbol in your portfolio.
157To use RealTest for this type of portfolio model, all of your strategies must do all of their entries and exits At Open. There is no support for enty or exit limits or stops.To generate a portfolio rebalance import file, simply add OrdersMode: Rebalance to your script's Settings section.Doing so in the combined.rts example script and setting its EndDate to 2021-01-31 (the end of both a week and month) produces this output when the script is run in Orders mode:
Adding OrdersFile: c:\jts\rebalance.csv to your Settings will make it especially convenient to import this file to IB's tool.
15.6. Multi-Row Scan
By default, RealTest scans will contain, at most, one row per symbol per date. In certain cases, you might need to output multiple rows for the same symbol on the same date, with different contents. One example of this would be using a scan to generate an order list for IB Basket Trader for a set of strategies that produce more than one order for the same symbol.To potentially output multiple rows per symbol per date, simply use multiple filter formulas. The maximum number of rows per symbol per date will be the number of different filter formulas provided. As with a single filter, row is only output for any filter if the formula returns a non-zero value ("TRUE") for that symbol on that date.To add multiple filters to a scan definition, just start the name of each one with the word "filter" and then add one or more other characters to make their names unique. See FilterLong and FilterShort in the example below.Internally, the scan processor will loop through all the dates in the scan range, then for each date it loops through all the filter formulas (or just does one loop if none is specified), then for each formula it loops through all the stocks. If the stock passes the current filter formula then all the other formulas are evaluated and a new row is added to the scan output.When specifying the formulas for the columns that you want to output, you will need to know which filter formula caused the current row to be included. This information is provided by the FilterNum syntax element. FilterNum simply returns the filter number currently being evaluated. The number returned refers to the sequence in which the filters were listed in the script. Any numbers that happen to be included in the filter names are ignored. Hereâs a simplified example of a long/short MR strategy pair using the same set of setups, just different limit prices, configured so each âorderâ would have its own scan row (some execution engines such as IB basket trader require this): 
158Of course for actual basket order generation youâd need extra columns, etc.
15.7. Test Output Scan
A regular Scan as defined in RealTest only has access to bar data and values calculated in the Data Section. For situations that require access to strategy context data, such as which positions are currently open, the TestOutput Scan option provides additional capabilities.By default, at the end of a test, RealTest "exits" all positions that remain open. These appear in the Trade List with end of test as the Exit Reason.When a test is run with the TestOutput: Scan enabled and the script includes a TestScan section, this special scan is run automatically before the end of test exits are simulated.This makes it possible to access all of the same position-context formula elements that are used in your strategy formulas, such as Shares, BarsHeld, FillPrice, etc.Another use case for TestScan is to generate data throughout a test. For example, you might want to create a CSV file listing each open position on each date of a backtest. To use TestScan in this way, add TestScanAllDates: True and SaveScanAs: <file path> to your Settings.The following shows what was required before full support for order generation was added to RealTest.If you were using a script like this for live trading, you would simply run it in Import mode and then run it in Test mode once per day.The TestScan section in mr_sample_test_scan.rts looks like this:
159The purple names are data or library items defined earlier in the script. Here is the Library section:
These same items are used in the long and short strategy definitions, which avoids formula repetition:
Running the script with 17-Nov-2020 as the end date and TestOutput: Scan specified in the Settings section produces this output:
As you can see from the TestScan definition above, the names and contents of these columns can be whatever you want to define them as.See Tomorrow's Orders for a much simpler way to do this.
16016. Backtest Engine Details
The RealTest Backtest Engine is written to support multi-strategy portfolio-level backtesting as effectively and efficiently as possible. In most other software, portfolio-based backtesting is implemented by first generating all the entry and exit signals for each symbol for the entire date range, and then running a second pass that models the portfolio for each date using the generated signals. In contrast to this, RealTest loops through the data by date first, then loops through each strategy, then finally each symbol for that strategy. Use of this loop hierarchy models a daily trading process in the most realistic way.
Here is a simplified overview of what goes on "under the hood" when you run a test (unless using Dynamic Sizing mode):1.Apply the Settings (if present and applicable) to the Settings Panel (where they will persist until next changed)2.Load the specified Data File if not already in memory3.Determine the current Parameter values (the defaults for a single test or the next optimization values for multiple tests)4.Adjust the test date range to match the data date range and/or the next optimization interval5.Recalculate Data Section items (arrays) as needed6.Loop through the dates in the test's date range and do the following:a. initialize daily statsb.do at-open exits then entries for each strategy (exits first to free capital for positions being entered)c. do intraday entries then exits for each strategy (entries first to avoid assuming capital can be freed when intraday fill sequence is unknown)d.do at-close exits then entries for each strategy (exits first to free capital for positions being entered)e. update daily stats for each strategyf. recalculate allocation for each strategy
The exits in steps b-d above are processed as follows:
1.Loop through all strategy positions and exit each if any of the following are true:a. ExitRule evaluates to TRUE and ExitTime matches time of day (exit at open or close)b.ExitLimit or ExitStop price was touched without ambiguity (exit at that price)c. ExitLimit and/or ExitStop price were touched with ambiguity and Ambiguity setting permits exit anywayd.this is the last bar of data or last date of the test (exit at close)
The entries in steps b-d above are processed as follows:
1.For each strategy:a. Loop through all stocks and evaluate EntrySetup, making a list of stocks for which it returns TRUE (setups)
161b.Sort this list of setups by SetupScore and truncate the list at MaxSetups (if specified)2.For each setup selection turn number (loop from 1 to the most setups in any strategy):a. For each strategy in StrategyScore sequence (highest score first):i. Loop doing the following steps:1)select the next unprocessed setup for this strategy (ranked by SetupScore)2)see if adding that setup would exceed any applicable Max... constraint for the strategy, any StatsGroups it belongs to, or Combined3)if no constraints are exceeded then add this setup and update the strategy, group, and combined constraint values to account for this setup, else skip the setup4)if MaxPerTurn setups have been added on this turn, break from the loop and yield to the next strategy3.For each strategy (now that we have the complete setup list for all strategies with constraints accounted for):a. Sort setups by EntryScore if provided (not necessary in this mode except in rare cases)b.Evaluate  QtyFinal for each setup to optionally adjust the order quantity now that total setup counts are knownc. Evaluate EntrySkip if provided and skip the entry if true (ditto)d.Enter the position if EntryLimit and/or EntryStop have been touched or were not specified
Key points about entry processing:Â· position sizes for constraint-checking purposes are always based on OrderPrice, not on FillPrice (which can't be known yet at setup-processing time)Â· all constraints are applied to the setup list prior to processing any entriesÂ· setups for strategies that enter with limit or stop orders count towards all constraints whether or not they are filledÂ· this model assumes that all orders are placed in advance of the market open each day with no realtime order management (e.g. live cancellation when a capacity is reached)
16.1. Asset Allocation and Position Sizing
The initial AccountSize can be defined in the Settings section of your script or via the Settings Panel.By default this value becomes the S.StartEquity value and the initial value of S.Equity for each strategy and for the combined system. This models combined compounding of multiple strategies in one account. To model each strategy compounding separately in its own account, add a StartPercent to each strategy.This partial example shows both of the above alternatives:
162As a backtest runs and trades are entered and exited, all of the statistics series including S.Equity are updated.The daily S.Equity (equity curve) value for a strategy will be the prior day's value plus the net change in value due to closed trade gains or losses plus (optionally) open position mark-to-market value changes. The combined system equity value is calculated the same way by using all positions from all strategies.By default, S.Equity includes open position mark-to-market value, making it the Net Liquidation Value (NLV) of the account. To model a cash account, in which open position gains cannot be reinvested until the position has been closed, use the strategy-level MarkToMarket setting. The default is MarkToMarket: True. For any strategy that specifies MarkToMarket: False, S.Equity will only change when positions are exited. If no strategy marks to market, then the combined system doesn't either.Each Strategy definition will usually include a Quantity formula, and can optionally include an Allocation formula.Quantity is evaluated at entry time for every new position, and Allocation is evaluated at the start of every date of a backtest.If Allocation is not specified, the default is the combined system S.Equity value when StartPercent was not specified, or the individual strategy S.Equity value when StartPercent was specified.In formula terms, this is expressed as Allocation: Combined(S.Equity) for combined compounding or Allocation: S.Equity for individual compounding. If the default is your desired allocation, you can simply omit it.Another Allocation possibility is Allocation: S.StartEquity. This models an account that trades the same dollar value each day regardless of the results, that is, without compounding.Default allocation can be overridden if desired by adding an explicit Compounded setting to the strategy.The current value of the Allocation formula is accessible via the S.Alloc syntax. Whether or not you define a custom allocation formula, it is advisable to use S.Alloc as your reference to current account value when specifying Quantity (position size).If Quantity is not specified, the default position size will be S.Alloc, i.e., the entire current allocation.By default, the Quantity formula specifies the number of shares (or contracts for futures) to buy or sell short when entering a new position. The formula can optionally be redefined as either the dollar value of the position or a percent of allocation, by adding QtyType to the strategy.See DynamicSizing for information how Quantity can be used differently in this special alternative strategy mode.
16.2. Capacity Constraints
163RealTest provides several Strategy Element formulas to allow you to define the capacity constraints of a strategy or group of strategies in various ways.These include:Â· MaxPositions - maximum open position countÂ· MaxExposure - maximum percent investedÂ· MaxLongExp - maximum percent long investedÂ· MaxShortExp - maximum percent short investedÂ· MaxNetExp - maximum net long-short investedÂ· MinNetExp - minimum net long-short investedÂ· MaxInvested - maximum dollars investedÂ· MaxLongInv - maximum long dollars investedÂ· MaxShortInv - maximum short dollars investedÂ· MaxNetInv - maximum net long-short dollars investedÂ· MinNetInv - maximum net long-short dollars investedÂ· MinFreeCash - minimum free cash in accountÂ· MaxNewPos - maximum new position countÂ· MaxNewExp - maximum new percent investedÂ· MaxNewInv - maximum new dollars investedÂ· MaxSameCat - maximum positions in the same categoryÂ· MaxSameSym - maximum positions in the same security (symbol)Â· MaxSetups - maximum entry setups per day (processed before other constraints)Â· MaxEntries - maximum position entries per day (deliberate selection bias)By default, all of the above constraints are infinite. Therefore if you want any constraints in your strategy or set of strategies, you must provide one or more of the above formulas.(The one exception to the above statement is MaxSameSym. This defaults to 1 in each strategy but is infinite combined strategy groups.)Most of the above formulas may be included in the definition of a Strategy, a StatsGroup, or the Combined system. All constraints are applied during the Setup Selection phase of daily entry processing, such that the set of orders to generate each day would violate none of the constraints.To apply constraints to all strategies in a script, simply add a Combined section and define the constraint formulas within that section.To apply constraints to a specific group of strategies (e.g. all long-side ones), define a StatsGroup consisting of those strategies and provide the constraint formulas within it.In the daily setup selection process, a setup only becomes an order if it does not violate any constraints of its Strategy, StatsGroup(s) or Combined.The key to how this selection process works is that first all setups are determined for all strategies and ranked by each strategy's SetupScore formula. Then an outer loop by selection turn number selects one (or optionally more) setups from each strategy and checks to see if it can still become an order given the others that have already been selected.If you only provide Combined capacity formulas, each strategy will keep the maximum possible number of setups that would (after selecting them in turn) not violate any combined capacities.Strategy-specific capacities can also be used to further control strategy-level exposures.Rather than depending on the order of strategies in a script to determine which one "goes first" in the setup selection loop, a StrategyScore formula can optionally be provided. When present this formula is evaluated at each rank number in the selection loop and determines the sequence in which each 
164strategies will get to confirm its next setup.To enable a strategy to select more than one setup per turn in the selection process, use MaxPerTurn to specify how many setups it can select.One analogy for the capacity constraint process is that it resembles the US football annual "draft". Your capacity formulas at each level along with your StrategyScore and SetupScore formulas provide the framework for deciding who gets the next pick at each iteration.
16.3. Compounding
RealTest automatically detects whether each strategy in a script uses compounding by looking at its Allocation and Quantity formulas.If a strategy refers to S.Equity in its Quantity formula, or refers to S.Equity in its Allocation formula and S.Alloc in its Quantity formula, then it is considered to use compounding.If neither of these is true, then the strategy is non-compounded.Optionally, this heuristic can be overridden by adding a Compounded statement to a strategy.To find out whether a strategy uses compounding, refer to S.Compounded in any formula.If any strategy in a test uses compounding, then Combined(S.Compounded) will always be true.This combined compounding flag is used internally to determine how some of the results statistics are reported.When compounded is true:Â· rate of return (ROR) is reported as compounded annual return (CAR) of time-weighted equityÂ· drawdown percentages are reported relative to the maximum previous equity level, i.e., ((current_equity - max_equity) / max_equity)When compounded is false:Â· rate of return (ROR) is reported as average annual return (AAR)Â· drawdown percentages are reported relative to the starting equity level, i.e.,  ((current_equity - max_equity) / start_equity)This automatic distinction makes it convenient to use either compounded or non-compounded equity without the typical stats distortions which are described at length in the following paragraphs.
Most backtesting software reports "compounded annual return" (CAR) and "maximum drawdown". Both of these stats, as typically reported, assume that a system was modeled to compound its equity (size each new position as a fraction of the current account balance as of the day of entry).If a system uses a non-compounded sizing approach, such as always trading the same number of shares or the same dollar position value, then these stats designed for a compounding model make no sense. In this case, "average annual return" (AAR) is a better metric, and drawdown percentages should be calculated relative to the starting value of the account rather than its peak (or drawdowns should be shown in dollars rather than percentages).To illustrate, consider the following example. Here is the mr_sample.rts strategy (long side only) run from the start of 2015 through August 2020:
165Because this example uses compounded position sizing, though it started with a $100K account, the $50K drawdown in March 2020 was only a little more than 25% from the prior equity peak. As with most compounded backtests, if you compare dollar drawdown with percent drawdown, the ratio of the two gets larger as the date increases (assuming an overall profitable strategy).Now if we run this test using non-compounded position sizing (always invest $10K in each position), the results look like this (after temporarily changing graphs.rts to make it ignore the compounded flag and show compounded-style drawdown for this result):
166In this case, the $25K+ drawdown is reported as only a bit more than 16%. This is the correct percentage based on the equity peak, but it doesn't make sense to report it this way when the model was still using only $100K of capital at that point in the test.Changing the drawdown formula back to the correct version, the drawdown percentage graph now looks like this:
167In other words, very similar to the same graph from the compounded test.Looking at the summary results statistics, the default column definitions only include ROR, but here I've added CAR and AAR to illustrate this point:
For the first (compounded) test, the CAR figure makes sense but the AAR value does not (which shows why mutual funds love to report average annual return...) Conversely, for the second (non-compounded) test, the CAR figure understates the results.By default, RealTest only includes the ROR column, which automatically displays the appropriate statistic for the compounding mode used in each backtest. How this is done can be seen by looking at the Results.RTS script:
(Items that start with underscores are not displayed as columns but can be used to store intermediate values. To produce the output shown above I just temporarily removed the underscores.)Calculating overall MaxDD percentage is a bit trickier, because it relies (when compounded) on knowing what the peak equity value was prior to the drawdown. This is handled internally, to always return the correct value in the S.MaxDDPct stat.
16.4. Split Handling
RealTest internally keeps price and volume data split-unadjusted. Any time any formula refers to "Close", the value returned is the real as-traded close for the current bar being evaluated.To avoid potential distortions when using bar offsets or calculating multi-bar indicators, RealTest temporarily split-adjusts all past bars to the current bar being evaluated while making such calculations. In other words, RealTest always adjusts for past splits, but never adjusts for future splits that could not have been known in advance.This method of past-only split adjustment makes all price and indicator values automatically "as-traded" in all situations, avoids distortions across past splits, and avoids subtle look-ahead bias which can occur when using data that is adjusted for future splits.As a simple example, consider TSLA stock in 2020. 
168There was a 5:1 split on August 31, as shown in this unadjusted chart (charts can optionally be shown either adjusted or unadjusted):
Using the RealTest Debug Panel, we can see how any formula would be evaluated for a specific stock on a specific date in a backtest.Here are two examples of very simple formulas, evaluated first for the day before the split, then the day after:
The first is simply "C", which returns the as-traded close of both dates.The second is the 5-day moving average, which returns a correct as-traded split-adjusted calculation for each date, thus avoiding the split distortion.
169While this all may sound complex, it is complexity that RealTest handles so that you don't have to. Every formula that you use anywhere in a strategy definition simply returns the correct past-only split-adjusted value for each date in the test, as if you had been trading on that day using the latest adjusted data, with no knowledge of future splits.You may have noticed in the above log output that each result includes both a value (e.g. 441.81) and a type (e.g. "[price]"). In order to correctly handle splits in any formula expression, RealTest needs to keep track of the "type" of each value, i.e., whether it is a price, a volume, or neither. An average of prices needs to be adjusted one way, an average of volume the other way, and an average of price*volume (approximate turnover) does not require adjustment.This knowledge of value type during formula evaluation ensures that split-adjustment is correct even when a formula refers to previously calculated data items. Those items know what the final type was when they were calculated, thus enabling their correct adjustment in any other formula.
While this mechanism works 99% of the time, it is not perfect. Given the flexibility of RealTest in allowing any formula to be evaluated and have its result stored in the Data Section, and then referenced later by another formula, it is possible to find examples where as-needed split adjustment is not correct for previously-stored data items.One such example is Extern symbol values. Using the TSLA scenario above, if you were to create a data item called "TSLA_CLOSE" with Extern($TSLA, C) as its formula, and then later calculate MA(TSLA_CLOSE, 5) on 8/31/20, the result would not be correct. Values returned by Extern never have a "price" or "volume" type, so storing them in Data and then referencing them later with an offset will not provide correct split adjustment.Another example would be to store a derivative of price that depends on split adjustment in a Data item, then refer to it with an offset. For example, during an "exponential slope" calculation such as Slope(Log(C), 100), each of the past 99 values of C will be split-adjusted to the current bar before being passed to the Log() function. The end result will be correctly split-adjusted for the current bar, as usual with any multi-bar indicator. However, if you calculate a separate Data item like this: LogC: Log(C), and then change the Slope formula to Slope(LogC, 100), this will produce a different result if used across a split boundary. This is because Log(C), as a stored data value, can no longer be considered split-adjustable.The simple rule of thumb to follow, to avoid these rare and obscure potential adjustment errors, is this: do not STORE a price or volume value that can no longer be split-adjusted in a Data Section item, and then refer to it using an offset, or as an argument to a multi-bar function or indicator.In certain rare cases (including the exponential slope calculation example above), even when Log(C) is kept in the original formula, if it is calculated in one pass in the Data Section, the values may become distorted around splits. This is because the internal circular-buffer that enables one-pass calculation of things like Slope is equivalent to pre-calculating Log(C) as a separately-stored item. If you encounter this type of distortion (often easily visible on a chart if you plot the indicator), prefix your data item with #SlowCalc to force it to not use the one-pass calculation optimization.
If you would prefer to "keep it simple" and always work with split-adjusted data, there is a way to do so: just add KeepAdjusted: True to your Import definitionThis will remove the benefits of using unadjusted data, such as realistic as-traded prices and share quantities, and will introduce a risk of look-ahead bias (since adjustments indicate future splits), but the option exists if you need it for some reason.
16.5. Dividend Handling
RealTest can account for dividends in two ways:1. Imported price data can be dividend adjustedThis approach is known as total-return adjustment. Dividends are integrated with the price series by converting them to the equivalent of stock splits. For example if a $100 stock paid a $1/share dividend, that would appear as a 101:100 split. The split 
170price adjustment compensates for the adjustment in the opposite direction that naturally occurs on each ex-dividend day. Logically this is equivalent to re-investing each dividend payment by buying more shares.Here is the sample1.rts example script output after adding Adjustment: TotalReturn to the Import, importing, and running:
Notice that there are no dividend payouts.2. Prices can remain as-traded, with dividends imported as eventsIn the above example in an actual brokerage account, that $100 stock would be repriced to $99 on ex-dividend day and you'd be paid $1/share on the payout day. Assuming no other price movement, this transaction would not change your account value.To model dividend events in this more realistic way, prices can be imported without dividend adjustment. Dividend amounts are imported as events attached to the bar of each ex-dividend date and containing the $/share of the payout.Here is the sample1.rts example script output with the default Adjustment: Capital (splits only):
171Now we see the dividend payouts. Notice that the NetProfit, ROR, and MaxDD are very nearly the same either way.There will always be slight differences between the two approaches even for an identical set of trades.In this case there are also some trade differences. In fact most of the entry and exit dates are different.Trade date differences are caused by the fact that dividend adjustment influences multi-bar indicator calculations. With this example script, the moving average crossovers happen on different dates in most cases.Surprisingly, these differences mostly cancel out and the results remain very similar. This will not always be the case. It is up to you to decide which approach you prefer.To display the total of dividend amounts received, uncomment this line in the default Results.rts script:
172To see daily dividend amounts (combined and by strategy), uncomment this line in the default Graphs.rts script:
Apply this change, then click on the Dividends button in your Graph window (you may need to scroll the button bar to see it):
173Note that dividends are credited to the account equity as mark-to-market gains on the ex-dividend dates.An open position that receives a dividend may therefore allow a new position in a different stock to be slightly larger than it would have otherwise been.These dividend credits are not, however, automatically reinvested in new shares in the open position.
16.6. Intraday Fills With Daily Bars
RealTest does not currently support intraday data. It is therefore currently not the best tool if you want to model, for example, a HFT strategy. It is, however, completely practical to develop short-term daily trading strategies and even some intraday strategies (with MOC exit) using daily bars only.I have spent many years building and running short-term (average holding period 3 days) systems that were tested using daily bars, and have spent a lot of time comparing model to actual results and understanding the differences. The bottom line is that the slight loss of fidelity from not having intraday data in a backtest is dwarfed by the other sources of randomness in live trading. The standard deviation between model and actual per-trade results is large, but the differences always seem to cancel out, resulting in similar overall results over a large enough sample of trades. My view, therefore, is that most kinds of entry and exit techniques can be modeled using daily bars without compromising the validity of the system (unless, of course, your strategy aims to enter and exit multiple times per day).If you want to insist on complete fidelity between a model and actual trading, then the only choice available is to enter and exit all positions at the open.Entries or exits "at the close" are, with todayâs execution technologies, also completely practical. Orders can be submitted one minute before the close and be filled within seconds, unless you are trading very thin stocks and/or huge size.
174Intraday entries and exits (stop or limit orders) can be accurately simulated on daily bars provided that the backtest engine is smart about the following:1.If the open gaps beyond the price trigger, model the fill at the open (plus slippage), not the trigger price.2.If the strategy includes both limit or stop entries and limit or stop exits, and the daily bar implies that more than one of the price triggers was hit (within that barâs range), then the model must handle each of the following potential scenarios correctly:a. Limit order entry and stop order exit (loss):  it can be assumed that the entry preceded the exit, and both can be filled.b. Limit order entry and limit order exit (target): it can NOT be assumed that the entry preceded the exit, so the target is not hit in the model (unless Ambiguity: Target is specified).c. Stop order entry and limit order exit (target): it CAN be assumed that the entry preceded the exit, so the target is therefore filled.d. Stop order entry and stop order exit (loss): it can NOT be assumed that the entry preceded the exit, so the stop is therefore not hit in the model (unless Ambiguity: Stop is specified).3.One exception to all cases of (2) is if the stock gaps beyond the entry trigger (1), in which case the entry was at the open so the exit trigger is non-ambiguous.4.In RealTest's "Default" Ambiguity mode, which is not quite as strict as "Neither", it is assumed that:a. if Close > Open, then Low happened before Highb. if Close < Open, then High happened before LowThis allows a best-guess assumption to be made in all cases except for a pure doji bar.The above is how RealTest models all the intraday order types using daily bars. Again, in most cases, none of the above should cause much trouble in strategy development. 
16.7. Intraday Fill Sequence Assumptions
The other factor to consider when modeling intraday entries with daily bars is the order in which fills would have occurred. Say your system identifies 20 or more candidates each day of stocks with a "bull flag" and you want to test buying the first 5 that break above yesterdayâs high. By the end of the day, 10 of them broke above the high. Which 5 should the model buy? (In practice, running such a system would require either a realtime scan or a mechanism that places the initial 20 orders and then quickly cancels the remaining 15 after the first 5 are filled.)Some systematic traders worry obsessively about this question and even refuse to trade a system not modeled with perfect fidelity. I would again point out the law of large numbers and the degree of randomness in the market here. If you just look at the next 10 trades, it might matter a lot which 5 of the 10 you assume were filled. But if you look at the next 1000, it makes less difference which 500 are selected. RealTest of course supports modeling this either way, depending on your preference. The key is to understand what is going on under the hood, be sure it makes sense to you, and be sure your live trading matches the model. Taking some time to study the trade list from each backtest (or even the Test Details Log if needed) is the best way to achieve this.An excellent way to objectively measure the relevance of intraday trade entry order in your system is to use the Random function in your EntryScore formula, run the same test 100 times, and compare the results.
16.8. Bar Sizes and Multiple Timeframes
175RealTest provides full support for multiple bar sizes within the same data and testing context.When bar data is imported, daily bars are required. Intraday bar sizes will very likely be supported in the future but are not currently. Importing of higher timeframe bars is also not currently supported.When daily bar data is imported, weekly, monthly, quarterly and yearly bars are automatically built. Any of these bar sizes is available to use in your scripts and/or display on charts.There is a global bar size setting that is specified either on the Settings Panel or in the Settings script section. This is the default bar size that will be used in all formula elements that reference bar data. As a simple example, the expression C > MA(C,20) will compare the daily close to the 20-day average close when BarSize is Daily, the weekly close to the 20-week average close when BarSize is Weekly, or the monthly close to the 20-month average close when BarSize is Monthly.In addition to the global BarSize setting, there is a strategy-level BarSize setting as well. This is used when you want to combine strategies that use different bar sizes. The strategy-level setting overrides the global setting for all formulas defined within that strategy (including any Library formulas they reference, since these are context-dependent, unlike data items).Regardless of the current global or strategy-level bar size, any part of any expression can explicitly specify a different bar size by using the Extern function with the special tilde (~) symbol. For example, Extern(~Weekly, MA(C,20)) would return a 20-week moving average of close, starting with the most recently completed week and going back 20 weeks from there, regardless of the current bar size setting.The Data Section has both unique capabilities and unique constraints with regard to bar size, which are described here.For an example of a script that makes use of multiple bar sizes, see combined_multi_bar_size.rts in the Examples folder.
16.9. Calendar Alignment
RealTest is able to combine data from multiple sources and/or for multiple asset types. During data import, a "global calendar" is created. This is simply a list of all dates for which any symbol has a bar. When tests or scans are run, the outermost loop is across this global calendar. For each date, RealTest then loops through the symbols and processes each symbol that has a bar for that date. This ensures that all references to bar data are correctly aligned to the date being processed.The following is an overview of how calendar logic is applied during backtesting:for each date   for each symbol      if it has a bar for this date (the potential transaction date)         get prior date from the global calendar         if it had a bar for that date (the order generation date)            determine and process trading signalsWhat this means, by default, is that for a transaction to be simulated in a backtest, the symbol must have bars for both the current and the prior date in the global calendar.A strategy can optionally specify AllowMissingBar: True to remove the second requirement above. That would allow orders for tomorrow to be generated for symbols currently in trading halts, and backtests to model such orders having been generated. This implies that capacity slots might be consumed by stocks that cannot be traded tomorrow, which is why the default is False for this setting.When one script includes data from multiple countries that have different holidays, there are two other solutions available:1.Add a CalendarSym specification to each strategy definition2.Add a Padding specification to your Import definition
176Option 1 is generally preferable as it avoids potential distortion of multi-bar indicator calculation caused by padding bars, but there may be cases where you need option 2.
16.10. Calculation of Trade Excursions
Trade excursion is the distance from the entry price to the highest high and lowest low that occurred prior to exit. These stats are accessible on a per-trade basis using T.Highest and T.Lowest. Distribution of trade excursions can be studied using the Trade Plots and Analysis window.As with target and stop limit orders, there is potential ambiguity in how these stats are calculated for the specific entry and exit bars.RealTest uses the following rules for how much of the entry bar to include in T.Highest/T.Lowest if exit is not the same day:1.Entry at open (whether by design or due to gap beyond limit or stop price): T.Highest starts at High, T.Lowest starts at Low2.Entry at close: T.Highest and T.Lowest start at Close3.Entry with long stop, long stop+limit,  or short limit (w/o stop): T.Highest starts at High, T.Lowest starts at entry price4.Entry with short stop, short stop+limit,  or long limit (w/o stop): T.Highest starts entry price, T.Lowest starts at LowFor the exit day:1.Long limit or short stop: if T.Highest was that day, it is changed to exit price2.Long stop or short limit: if T.Lowest was that day, it is changed to exit price3.Exit at open: T.Highest or T.Lowest will factor in today's open4.Exit at close: the day's range is included in both
16.11. The Current Bar in Formula Evaluation
When writing a formula that refers to bar data elements such as "High" or "Close", it is important understand what "the current bar" is.In Data and Scan formulas, the current bar is simply the date for which the formula is being evaluated.In Strategy Element formulas, the current bar is the most recently completed bar relative to the logical time at which the formula is evaluated.The best way to understand this is to imagine that you're manually trading your strategy by calculating all of your formulas after the close each day. Say today is a Monday. Even though you are preparing to enter or exit positions in Tuesday's market, the "current bar" is still Monday's bar. This fact makes it impossible to accidentally "look ahead" in a backtest to data that you could not yet see in real trading.An exception to this rule occurs when a strategy uses EntryTime: ThisClose (with no entry limit or stop) or ExitTime: ThisClose. In these scenarios, RealTest lets you to assume that, by using realtime quotes, you would be able to evaluate your formulas in your live trading platform within a minute or two of the close. In this case and only this case, the current bar is the entry day or exit day bar.Here is a table of all possible ENTRY scenarios:EntryTime EntrySetup Current BarThisClose entry barNextOpen (market default) bar before entry barIntraday (limit/stop default) bar before entry barNextClose bar before entry bar
177All other entry-related formulas use the same current bar as EntrySetup does.Here is a table of all possible EXIT RULE scenarios:ExitTime ExitRule Current BarThisClose exit barNextOpen (default) bar before exit barNextClose bar before exit bar
Here is a table of all possible EXIT LIMIT and EXIT STOP scenarios:ExitLimitTime or ExitStopTime Formula Current BarThisClose exit barNextOpen bar before exit barIntraday (default) bar before exit barNextClose bar before exit bar
Please take careful note of the following asymmetry between Entry and Exit logic:Â· the Current Bar for each entry-related formula calculation is determined by EntryTime Â· the Current Bar for each exit-related formula calculation has its own time specification (ExitTime, ExitLimitTime and ExitStopTime)The reason for this asymmetry is that there is effectively only one entry order placed for each EntrySetup, whereas there can be up to three exit orders placed (with an implied bracket), depending on the presence or absence of each of the three exit-related formulas.If you intend to use a Time Stop in any of your strategies, and/or if you plan to refer to BarsHeld in any of your exit formulas, please also read these topics with all of the above in mind.
16.12. Specifying a Time Stop
The way to specify a Time Stop in RealTest is to reference the BarsHeld element in the ExitRule formula.For example, a simple five-day time-stop rule would be:
If you entered a position on Monday and there are no holidays involved, you will exit the following Monday if you use the above formula.An easy way to remember this is to think of BarsHeld as Nights Held (not counting weekend and holiday nights). If you enter on Monday and exit on Tuesday, then BarsHeld=1. If you exit on Wednesday, then BarsHeld=2, and so on.When you review the Trade List of a test with Time Stop exits, you'll see that the Bars column always matches the number used in the BarsHeld equation for those trades, regardless of their exit time. Note that this makes BarsHeld an exception to the logic described in the topic The Current Bar In Formula Evaluation. Whereas bar price references without an offset always refer to the most recently completed bar, BarsHeld includes the current bar in its count even when that bar has not been completed. Specifically, when your ExitTime is either NextOpen or NextClose, BarsHeld includes tomorrow's bar, even though no prices from that bar are available yet when ExitRule is being evaluated.
16.13. Number of Bars Required for Functions and 
178Indicators
A question that any backtesting framework must answer is: what to do when there are not enough bars of data to evaluate a formula term such as a moving average function. One solution is to place limitations on the syntax, such as requiring that every bar count argument is a constant. In RealTest, there is no need to ever think about how many bars of data are available. What happens automatically is as follows:Any formula which contains any term which cannot be evaluated with available data simply returns 0. For example, say thereâs a stock within your data which was only listed 2 weeks ago and youâre scanning for C > Avg(C, 20). This expression just returns 0 (FALSE), and the scanner moves on to the next symbol. If you want, you can use BarNum to allow shorter average lengths to be used in specific formulas. For example, to scan for "above the 20-day average or the longest average currently available", you could say C > AVG(C, Min(20,BarNum)). There is also an option, described below, to do this automatically.Itâs easy to see how equating "canât evaluate" with 0 works intuitively for conditional formulas like EntrySetup or the Scan filter. For formulas that return a dollar amount, like MaxInvested, or a price, like ExitStop, the test engine does the right thing as well. You do not have to worry, for example, that if your long entry stop price formula evaluates to 0, all candidates will trigger an immediate stop. In this and every similar case, the 0 is interpreted as "can never be hit".All of the above was a long-winded way to say donât worry about how many bars of data are available.An exception to the "number of bars required" rule are the functions SinceTrue, CountTrue, and TrueInRow. These functions treat a can't be evaluated term as FALSE but do not abort the entire formula, since doing so would defeat their purpose.For example, a liquidity filter which I like to use in data import is:
Data import ExcludeIf formulas are evaluated once per symbol, after all the bars have been processed, to decide whether to keep or discard that symbolâs data. In this example, stocks will be excluded that have never traded above $10/share and had average volume of at least 100K shares. This function returns -1 if a condition was NEVER true within the specified bar count (in this case the default of all available bars).
As mentioned above, there is also an option to automatically shorten moving average and indicator lengths when there are not enough bars available. Most of the time, the default setting (off), as described above, is recommended.If you know that you want to always use shorter lengths when not enough bars are available (or, in the case of exponential smoothing, permit decreased precision), add UseAvailableBars: True to your Settings definitions.You can see this option both ways by plotting a long moving average on a chart and scrolling back near the start of the data. Change the setting and then select Refresh from the Chart's menu to see the effect.With the default setting (off):
179With the option to use whatever bars are available:
When using this option, you can also use BarNum to explicitly force a specific formula to require enough bars, e.g., iif(BarNum > 20, Avg(C, 20), NaN).
16.14. Scaling In or Out of Positions
Most strategies developed and tested in RealTest involve simple round-trip trades. The entire position is bought (or shorted) on entry day, and sold (or covered) on exit day.
180RealTest can also model strategies that scale in and/or scale out of positions. Such models can be structured in two different ways:1.For a small fixed number of entries and/or exits per position, separate strategies can be used for each "leg".2.A single strategy can enter multiple positions in the same symbol (this "adding to a position") and/or exit part of the total position ("scaling out").Here's a simple example where we buy at a new 100-day high. The exit is a 2*ATR trailing stop. We want to sell half the position at a 1*ATR profit if achieved. Position size is 10% of account.Here's how to implement this concept with separate strategies:
The use of a common template avoids the need to copy and paste all of the elements. The "leg1" strategy holds half the position (5% of account) and implements both exits as a bracket.The "leg2" strategy holds the other half of the position and only implements the stop.For scaling in to positions using separate strategies, structure like the above but with different EntrySetup conditions for each leg.Here's how to implement this concept in a single strategy:
Here the position size is 10% since there's only one entry. The position will be divided at exit time if the target is hit.The ExitNum variable in the ExitLimit formula controls whether a limit price is set (when no exit has happened yet) or not (0 means no limit order).The ExitLimitQty formula specifies the number of shares to sell when the target is hit, i.e., the limit order size.Note that Shares will always represent the share quantity of the remaining position. In the above example Shares is only referenced once when the position is still its original size so that's not a problem.Here's a different scaling-out concept -- sell one-fifth of the original position every day over 5 days:
Using Shares in this example would not work as intended. If the original size was 20, the first exit would be 4 leaving 16, the second exit would be 3 (16/5 rounded down), the third would be 2 (13/5), and so on. Instead use FillQty, which is the original position size at the time of entry, to specify equal fractions for each leg.For scaling in to positions in a single strategy, we need to specify MaxSameSym as the largest 
181allowable number of simultaneous "legs". By default RealTest sets MaxSameSym to 1. This automatically prevents pyramiding without having to add "and Shares = 0" to every EntrySetup formula.This simple entry example would buy the first two times prices crosses above the 8-period EMA:
The Examples folder includes a script called tf_dynamic_size.rts, which demonstrates a mixture of scaling in and scaling out:
(Not show are the Import and Settings sections -- the example uses the S&P 100 Current & Past universe.)This is a far more complex example than the snippets above.The strategy's EntrySetup rule serves two purposes here: 1.Enter a new position if the condition specifed in the Data section "setup" variable is met and there is no current position.2.Add a new position portion whenever the target quantity exceeds the current total position quantity by more than X%.There are two separate exits:1.The entire position will be exited if the trailing ExitStop is hit.2.A partial exit will occur whenever the total position quantity exceeds the target quantity by more than X%.As the test runs and partial positions are dynamically added and closed at various sizes, the total position will consist of any number of sub positions. This is why MaxSameSym is set to an arbitrarily large number (99). Notice the special technique in the Library section of referring to extern(@tf_dynamic, shares). This 
182will always return the current total number of shares held by this strategy in this symbol. In contrast, when multiple sub positions are open, "shares" only returns the quantity of the sub position currently being processed for potential exit.On each day of the backtest, the engine will evaluate the exit formulas for each sub position separately. If a partial or complete exit of that sub position is indicated, that exit is simulated before the engine proceeds to the next sub position. This is why it works to specify the ExitQty as is shown above. The ExitRule formula (along with the Library formulas it references) is evaluated for each sub position after the prior sub position's exit has been processed. Once the remaining quantity has reached the target quantity, ExitRule will stop returning "true" and no further exits will occur that day.Note that if ExitQty returns more shares than the size of the current sub position, that entire sub position is exited. If ExitQty returns fewer shares than the size of the sub position, that sub position is reduced by the difference.Adding and subtracting sub positions repeatedly in this manner will result, at times in a large number of small sub positions comprising the total current position. Nevertheless the overall result is an accurate model of dynamic position size adjustments.
16.15. Referring to Past Trades in Strategy Formulas
The RealTest Formula Syntax includes a set of elements which can be used to refer to Trade Record Values.The main purpose of these elements is to facilitate customization of the Trades Window columns by editing the standard Trades.rts script or providing an alternative Trades Section in a different script.The trade record syntax can also be used in any Strategy Element formula to access certain details of trades which have occurred earlier in the current backtest. This allows you to model strategies which incorporate the concept of looking at past trades in a specific symbol to inform decisions about the next trade.When used in this way, the context of the trade reference is always the current bar of the current symbol in the current strategy. To refer to trades that closed previously, Multi-Bar Functions and/or Bar Offsets must be used.If a strategy specifies MaxSameSym > 1 to allow multiple positions in the same stock then T.Points, T.Profit, T.QtyIn and T.QtyOut return the sum for all trades with the same exit date (and symbol and strategy).The following are a few examples of ways in which you might want to explore using this capability:Example DescriptionCountTrue(T.DateOut > 0, 10) > 0 a prior trade in this symbol was exited within the past 10 barsSum(T.Profit, 20) < -0.01 * S.Equity recent trades in this symbol have lost more than 1% of equityT.Reason = 2 a prior trade in this symbol just hit its target earlier todayExtern(@tracking, Avg(T.Profit > 0, Barnum) < 0.5) a tracking strategy that takes all signals shows < 50% past win rate for this symbol
For the above examples, the EntrySkip formula would be a good place to test these conditions.
16.16. Testing Multi-Currency Strategies
RealTest can automatically model buying and selling shares of a stock which trades in a different currency from your account's base currency.
183To illustrate how this works, here is a simple example:
The script imports MSFT and AUDUSD data series, and specifies the account's base currency as AUD.It then makes one trade, contrived to show a combination of stock and currency gains:
(the above Trade List row was divided into two images for readability)Here's the trade on a chart, which also shows USDAUD (1/AUDUSD) in the lower panel:
184Looking more closely at this trade, here are all the things that happened:Â· The account's base currency is AUD, so the specified position size (value $10,000) means $10,000 AUD.Â· On entry day, that share quantity is calculated using that day's exchange rate, to buy the appropriate number of shares in USD to not exceed $10,000 in AUD. In other words, $10,000 AUD was converted to $7,768 USD, which could buy 31 shares of MSFT.Â· While the position was held, MSFT paid a divided of $0.56/share for holders of record as of 18-May-2021. This is credited to the trade profit as (31 shares) * (0.56 dividend per share) * (1.2837 USDAUD ratio on the record date) = $22.28 AUD, as shown in the "Div" column of the trade list.Â· On exit day, the trade's net profit is calculated factoring in the difference in exchange rates between entry day and exit day. In this example, an additional $694.01 was gained due to the favorable move in USDAUD while the Australian trader held a position in a US stock.The key mechanics to be aware of in RealTest if you want to do this kind of testing are:Â· Your Import must include a symbol for the FX ratio between your account's base currency and the currency of each other country represented in your stock universe. Â· It does not matter in which direction the ratio is expressed (AUDUSD vs. USDAUD). RealTest inverts as needed based on the nomenclature.Â· If your data source is not Norgate, you might need to use the alias mechanism in your IncludeList to convert, for example, Yahoo's "JPY=X" symbol to "USDJPY". RealTest requires that the FX symbols are in this six-letter format for this feature to work.Â· RealTest similarly requires three-letter currency symbols in the metadata of each stock in order to know whether and how to convert it. Use a SymInfo File if necessary to provide these.Â· With Norgate data, the FX symbols are all in the correct format and the currency metadata is provided automatically.Â· Add a Currency statement to your Settings, to tell RealTest that you want it to model currency conversion, and what your account's base currency is. No conversions are done if there is no Currency statement.To observe the impact of currency conversion to your test statistics, the following data are available:
185Â· T.FxIn - the exchange rate on the date of trade entry (can be optionally included in the trade list, as in the above example)Â· T.FxOut - ditto for the trade exit dateÂ· T.NetFx - the net dollar impact of FX change to the tradeÂ· S.NetFx - the sum of T.NetFx for all trades exited that day of the test (can optionally be included in the results summary or graphs)
16.17. Using CSI Futures Data
When using CSI futures data, RealTest is able to backtest strategies and generate trading orders from back-adjusted continuous contract series.As with Norgate futures data, RealTest also fully supports backtesting on the individual contracts with CSI data, as described here and shown in example scripts such as futures_volume_rank.rts. For most use cases, it will prove to be simpler and just as effective to only import the XX_B (back adjusted continuous) symbols when using CSI.CSI provides a wide array of options for how to model the rolls from one contract to the next when stitching individual contracts together into a continuous contract.Among other choices, CSI supports proportional (ratio) adjustment and forward adjustment. These are NOT recommended for use with RealTest. Choose one of the difference-based back-adjusted approaches. The default settings in CSI's portfolio manager are a great place to start. See CSI Futures Import for further details.As shown below for the VX futures continuous contract series, the bar data is back adjusted and also includes the unadjusted closes in Extra and the contract expiry dates in InfoExpiry:
RealTest has no problem handling the negative prices that will sometimes result from difference-based back adjustment. The key point is that the daily price movement, in points, remains unaffected by the adjustments (except on roll dates, when the price change from the prior day accurately reflects the difference between the two contracts involved in the roll).Here's a market that, opposite to VX, tends to be in backwardation rather than contango:
186Here is a trade example that illustrates this point:
The key stats in the trade record are Points and Profit. In contrast to those for stocks and ETFs, futures strategies generally do not use any type of calculations involving percent change of price in their trading rules or stats, nor multiples of price in their position sizing. Instead, these calculations focus on points of movement, PointValue, and point-based indicators such as ATR.See below for the entire script of the strategy that made this trade. When CSI continuous contract data is used with RealTest, roll costs can optionally be calculated using the RollCost strategy formula. RealTest knows when CSI has implemented each roll, because each continuous contract data series includes the expiry date of the current contract as of each bar. When RollCost is specified, the formula is evaluated on each roll date and the amount that it returns is subtracted from the net profit of the trade. Add a T.RollCosts column to your Trades.rts to see the total roll costs for each trade in your trade lists. Add a S.RollCosts graph to your Graphs.rts to see the daily total roll costs applied to trades 
187exiting that day. Add a formula with Sum(S.RollCosts, S.Number) to your Results.rts to show that figure as a column in your results windows.When using continuous contract data, the symbols shown in your trade list will be the continuous contract symbol, e.g. ES_B for E-mini S&P 500.If you enable the Test Details Log, you will see the entry, exit, and roll transactions logged using the individual contract symbols that would have been traded:
When you generate orders, they will also use the correct individual contract symbols. Text orders will use symbols like the ones in the log output above.When generating CSV orders, you can use the example exchangemap_csi.csv file as your ExchangeMap, and the example ibfutures_csi.csv file as your SymChangeList:
This will ensure that your generated orders can actually be placed and executed in your Interactive Brokers account:
(If you use a different broker that also accepts CSV order lists, you can modify your OrdersTemplate and the above two files as needed.)The example script futures_trend_follow_csi.rts shows a complete long/short trend following strategy implementation:
18818917. Realtest Script Language
Writing RealTest scripts does not require any programming in a traditional sense. In fact the script language does not include any standard programming elements such as functions, loops, if/then/else, and so on.Learning to write RealTest scripts involves primarily the following:Â· understanding how scripts are structured (described below)Â· learning the formula expression syntax (similar to learning Excel cell formulas)Â· learning about the backtest engine and all of its inputsÂ· lots of experimentation and reiteration
RealTest script contents are organized into section headers and section items. 
Each section header and each item within a section is declared as a word followed by a colon. Once declared, everything between the colon and the next section declaration becomes the contents of that section. No statement termination character (such as a semicolon in other languages) is required. A colon preceded by a word marks both the end of one script element and the beginning of the next.Although this use of this Item: content syntax makes RealTest scripts look slightly like Python, there are no requirements for indentation or line endings. In theory, an entire script could occupy a single line. For readability, it is recommended to give each section header and each item its own line, and to indent the items one tab stop. Among other benefits, this permits "folding" in the script editor, and it also facilitates context determination for the context-sensitive help.
One way to think of the RealTest script syntax is as a form without labels. This sounds like a strange idea, but if you imagine a form with all the possible sections and items, it would be overwhelming.Instead, the intelligent script editor becomes your dynamic form.Try opening a new blank script and typing the letter 's':
190Immediately you have a choice of three possible new form labels, aka section names to insert.Select Strategy, and then press enter. The cursor moves to the next line and is automatically indented one tab stop.Now type 'e' and see all the strategy labels that contain that letter:
Select EntrySetup, then type 'c' to begin your formula:
I find this interface much more convenient and easy to use than a large form with lots of labels on it. I hope you do to.
17.1. Bar Offsets
When a bar field such as Close or Volume is referenced in a formula, there is always a "current bar" context. In a test, for example, the backtest engine is looping through the dates of the test range and evaluating formulas such as EntrySetup for each stock that has a bar for that date.So when a formula uses a simple term like Close, it is inferred to be the closing price of the current stock being evaluated for the current date in the test.
191When you need to refer to a different bar of the current stock, you do so using an offset.Some software, including MetaStock and AmiBroker, use a function called "Ref" when an offset is required, and express the offset as a negative number of bars. Yesterday's close would be Ref(C,-1), the prior day is Ref(C, -2), and so on.Other software, including TradeStation and ThinkOrSwim, use square brackets to express an offset, and express it as a positive number of bars. Yesterday's close is C[1], the prior day is C[2], and so on.RealTest uses the square bracket syntax, but with some important enhancements:Â· The value inside the brackets can be any expression. Say you wanted some random close between 1 and 10 bars ago. That would be C[Random(1,10)].Â· Brackets can be applied to any expression. The difference between yesterday's high and yesterday's close could be expressed as H[1]-C[1], or as (H-C)[1]. The 10-day average close as of 3 days ago would be MA(C,10)[3]. Â· Though not generally advisable, negative offsets can be used to look into the future. Tomorrow's close is C[-1], the day after tomorrow is C[-2], and so on.Â· One example of a valid use of negative offsets to obtain future values is with date elements such as BarDate, DayOfWeek, EndOfMonth, etc.
17.2. Date Constants
Date constants in scripts or input files can be formatted in any of the following ways:Â· m/d/yy (or d/m/yy if DateInput setting is DMY)Â· m/d/yyyy (or d/m/yyyy likewise)Â· any of the above with dashes (-) or dots (.) instead of the slashes (/)Â· yyyy/mm/ddÂ· yyyy-mm-ddÂ· yyyy.mm.ddÂ· yyyymmddÂ· dd-mmm-yy (where mmm is the first three letters of the month name)Â· dd-mmm-yyyy (ditto)Â· Earliest (use the earliest available date as a StartDate)Â· Latest (use the latest available date as an EndDate)Date constants are used in the Import and Settings script sections.The DateInput setting determines whether x/x/y is interpreted as d/m/y vs. m/d/y.To override the current DateInput setting for a CSV import and/or EventListFile, add a CSVDateFmt definition. To override the current DateInput setting for a strategy's imported TradeList, add a TLDateFmt definition.To specify a literal date within a formula, e.g. EntrySetup: BarDate > 20240101 and other_conditions, if(Date = 20200607), it must be formatted as YYYYMMDD as in this example.To parse a date string within a formula, use the ToDate function.To format a numeric date in a non-default way, use the FormatDate function.To control how dates are displayed by default in the user interface or output files, use the DateDisplay setting.
19217.3. Other Constants
Numeric constants can optionally be expressed as a power of 10, e.g. "1E7" rather than "1000000".The constants True and False are built in and can be used anywhere as substitutes for 1 and 0 respectively.The constant nan is built in and can be used to force a formula result to be nan (not a common need).Most Strategy Elements are defined by Formula Syntax, but many are defined by constants that represent the selected choice for that setting. See Strategy Element Value Types and Defaults for details.
17.4. Symbol References
The Symbol syntax element returns the alphabetical ordinal number of the current symbol in the currently loaded DataFile.The main use of this number is to compare it to a specific symbol. For this purpose, every symbol in the current data set can be referenced as a constant beginning with a dollar sign, e.g. $MSFT. Symbol constants simply return the ordinal number of the specified symbol if it exists in the current data, or 0 if not.The most common use of symbol constants is when constraining a strategy to only trade a specific symbol, as in this example:
Note that if a symbol already begins with a dollar sign, e.g. $SPX, then it must be stated with a double dollar sign, i.e. $$SPX, when used as a symbol constant. The first $ tells RealTest that you're looking for a symbol, and the second $ is literally part of the symbol.See also:Â· ?Symbol - returns the current symbol as a string (without the leading $)Â· SymRef - looks up a symbol string (without the leading $) and returns the Symbol numberIf the current symbol is MSFT, then any of the following will return its symbol number:Â· $MSFTÂ· SymbolÂ· SymRef(Symbol)Â· SymRef(?Symbol)Â· SymRef("MSFT")The special symbol $CalSym can be used to reference the CalendarSym of the current strategy.See also: Extern.
17.5. String Values
193RealTest allows literal quoted strings to be used in situations where they are useful (in particular, for Scan output formatting). However, it does not require (or allow) quotes to be used around strings that are common elements of many scripts. Script elements that do not require (or allow) quotes around them include:Â· data source names Â· file paths (even when spaces are embedded)Â· stock symbolsÂ· strategy namesQuoted strings can be used as terms in any formula, and can be either 'single-quoted' or "double-quoted". If you need literal quotes of one type within a string, surround it with the other type.Basic formula operators that work with strings are: <, <=, >, >=, ==, <>. For example, 'b' > 'a' will evaluate as 1 (true). In all cases, case-sensitive comparison is used. (For case-insensitive comparison, use ToLower('B') > ToLower('a'), for example.) You are not prevented from using other operators with strings, comparing strings to numbers, etc. but the results of doing so are unlikely to be meaningful.Several functions are provided to operate on strings, including:Â· FormatÂ· MatchÂ· ToDateÂ· ToNumÂ· ToLowerÂ· ToUpperThe most likely use of strings as mentioned above is in Scan output. They can also be used in Trades column definitions. You can experiment with string expressions in the Debug Panel.
17.6. User-Defined Item Names
A RealTest script is essentially a collection of user-defined formulas and settings values.Some script sections, such as Import, Strategy, Settings, and related sections contain specifically-named items that you can provide formulas or values for. These sections do not allow user-defined item names.RealTest supports user-defined item names only in the following sections: Charts, Data, Graphs, Library, Parameters, Results, Scan, StratData, TestData, TestScan, TradesParameters is a collection of named parameter value lists. All the others are collections of named formulas.Item names must begin with a letter or underscore and may contain only letters, digits, periods and underscores.Item names can be no more than 80 characters in length.
194Item names are used to refer to that item (to get its current value) from other formulas.Each user-defined item name must be unique across the entire script (including those that it includes), and must not be the name of any built-in variable or function.Within the same section type, the same name can be used for more than one item. When this occurs, the last instance found is the only one that is kept. See Item Name Overrides for details about this.
17.7. Item Name Overrides
RealTest allows user-defined item names to be re-used within the same script section. RealTest does NOT allow the same name to be used in different sections, e.g. a Data item and a Library item could not have the same name.The last instance of a named formula (across all instances of the section it's defined in) becomes the formula assigned to that name. As an example, consider the following:
The active script, script1.rts, will use as its universe the historical constituents of the S&P 500 index, despite including script2.rts which had defined Universe to be the Nasdaq 100 constituents.However, if script1.rts is rearranged like this:
Then it will be using the Nasdaq universe.The last encountered instance of a name becomes the definition of that name in the final combined script.If you have some items that you don't want to be overridden, the easiest solution is to simply assign a globally-unique name to each such item.If you prefer to use the same name for different items in different scripts without risk of override, you can use Namespace to differentiate them when those scripts are combined.
17.8. Script Comments
195The RealTest script syntax supports three different comment formats:Â· C style line-independent comments: 
         
/* this is a comment */
Â· C++ style single-line comments:
     
// this is a comment 
Â· Pascal style curly brace comments: 
 
{this is a comment}Each type of comment ignores the other types.The editor includes the ability comment or un-comment a block of lines by adding or removing a C++ style comment on each line. It is often convenient to use this feature to comment out some of the strategies in a script while focusing on different ones in your research, then later comment them back in.A special version of the curly brace comment style is also used in some formulas to specify number formatting in results, graphs, charts and scans.In addition to the above, RealTest also supports Conditional Comments. See that topic for details.
17.9. Conditional Comments
Conditional comments make it possible to designate portions of a script that are "commented out" (see Script Comments) in some situations and not commented out in other situations.The syntax of conditional comments is shown in the following example:
A comment condition named incl_bench is defined.The #ifdef statement then checks to see whether incl_bench has been defined.Since it has, the subsequent lines of the script are NOT commented out.The #endif statement marks the end of the lines to which the prior #ifdef condition applies.Compare the above to the following:
Here the line that defines incl_bench has been commented out explicitly. (It could also be simply deleted.)Now incl_bench is NOT defined, making the #ifdef condition false, therefore the subsequent lines are not included in the script (they are commented out).In other words, #ifdef xxx means "only include the subsequent lines in the script if xxx has been defined with #define".The following lists all the syntax supported by RealTest for conditional comments:Item Description Example#define define a conditional comment name #define xxx
196#undef remove (un-define) a conditional comment name #undef xxx#ifdef include subsequent lines if name is defined #ifdef xxx#ifndef include subsequent lines if name is NOT defined #ifndef xxx#else include subsequent lines if the prior #ifdef or #ifndef excluded them#else#endif end the current conditional comment block #endif
In addition to any names that you define with #define, RealTest also predefines several names that may be useful:Name Descriptionstandalone the script is not included by another scriptapply the script is running "Apply" modetest the script is running in "Test" modeoptimize the script is running in "Optimize" modeimport the script is running in "Import" modescan the script is running in "Scan" modeorders the script is running in "Orders" mode
For example, in the screenshot above, replace #ifdef incl_bench with:Â· #ifdef standalone to only include the benchmark when the script is not included by another script (which might already have its own benchmark)Â· #ifdef test to only include the benchmark when the script is being run as a single test, not when optimizing or generating ordersÂ· etc.Please note that conditional comment syntax is not suggested or auto-completed by the script editor, but is (as shown above) reflected in the automatic text coloring. This shows at a glance what impact your conditional commenting has on your script. The one case where the text coloring may not seem correct is in a script that is included by other scripts that may or may not define the name that the included script references in #ifdef or #ifndef. In this case RealTest cannot possibly know which other script you might intend to include this script with. It therefore colors the text as if any such names are not defined.See also Combining Scripts.
17.10. File Path Syntax
There are several places in a RealTest script where a file path is called for. Script elements that require a file path include: DataFile, IncludeList, TradeList, SaveScanAs, and several others like these.Unlike most other software where file paths are specified, RealTest neither requires nor allows quotation marks around the path, even when it contains embedded spaces. This saves you from having to remember to type quotes, and makes it more natural for the script editor to suggest multiple choices when you've typed part of the path.As mentioned under File Paths earlier, RealTest supports both absolute and relative file paths. Absolute paths typically begin with a drive letter, e.g. C:\RealTest\Scripts\Examples\Combined.rtsRelative paths might be just a file name, e.g. Combined.rts, or the end of a path, e.g. Examples\Combined.rtsWhen relative paths are used, they are relative to your Script Path, Data Path, or Output Path as specified in the Program Options Dialog. RealTest also supports a special syntax within any file path that can be used to insert a known item into the path. The following table lists these elements.
Item Description
197?date? the current date in YYYYMMDD format?time? the current time in HHMMSS format?orderdate? the next market date after the end date of a test (for order list files)?ocfolder? the full path of the current OrderClerkFolder setting?scriptpath? the full path of the current script, without the name?scriptname? the name of the current script, without the full path or the .rts extension?testname? the name of the test just run (for SaveStatsAs etc.)?desktop? the full path to your Windows desktop folder?realtest? the full path of the folder where RealTest is installed?data? the full path of the Data Folder specified in View / Program Options?output? the full path of the Output Folder specified in View / Program Options?scripts the full path of the Scripts Folder specified in View / Program Options
Additionally, any Windows environment variable can be specified, e.g. ?programdata?, ?onedrive?, etc.
17.11. Output Format Specification
Several of the Script Sections in RealTest serve to define items which are both calculated and displayed. These sections include: Charts, Graphs, Results, Trades and Scan.In each of these sections, the format in which to display the value of the calculated formula can be optionally specified by including a special kind of comment within the formula definition. A format specification comment must use the squiggly-brace comment style. If no format specification is provided, the "general" format will be used (as in Excel). As one quick example, the NetProfit formula in Results.rts is defined as {$0} S.Equity - S.StartEquity. The $0 tells RealTest to display this stat as a whole dollar value.You can see other examples of these codes in the section links above.Available Formatting CodesCode Used In Shows This Digits (if present) Specify# scans, trades, charts, graphs, results general-purpose numeric value number of decimal places
## scans, trades, charts, graphs, results general-purpose number without commas number of decimal places
$ scans, trades, charts, graphs, results value as currency number of decimal places
% scans, trades, charts, graphs, results value * 100 as a percent number of decimal places
- with any of the above codes value as above, use red if negative the ABS is the number of decimal places// scans, trades, charts, graphs, results value as a date string n/a
~ scans, trades, charts, graphs, results value as True or False n/a
^ charts show this indicator in the upper indicator pane n/a
| charts show this indicator in the volume pane n/a
| graphs draw bars rather than a linebase value (x-axis) for bar chart| results show this item in the status bar n/a
198"name"any override the default item name n/a
An output format specification comment can be inserted anywhere within the item's formula. Any unrecognized character in the comment cancels its interpretation as an output format.
17.12. New Script Template
Selecting New Script from the File Menu or clicking the corresponding Tool Bar button creates a new blank Script Window.If you'd prefer your new scripts to have some preliminary content rather than being blank:- create a new script with your desired default content- save this script as newscript.rts in your RealTest program folder (c:\RealTest by default)Now, whenever you create a new script window, it will begin with that template.
17.13. Combining Scripts
A RealTest script is not really describable as "code", or "a program". Rather, it is a collection of named values and formulas that serve as the input parameters to a general-purpose backtesting engine. These items are organized in Script Sections.Script sections can be combined in a single script and/or kept in separate scripts that are combined using Include.Either way, there is logically one big script, so we'll refer to this as "the script" or "the combined script".It mostly does not matter in what sequence the various sections appear within the combined script.The sequence of items within a section matters for some section types and not for others.Each script section has its own special purpose and content, with slightly different rules regarding combination and sequencing.The categories of script sections are:
CategorySections Items OverrideScript SequenceItem Sequence
Data Import Import have specific names and purposes mixed doesn't matter
DataSource must come first, last instance wins for overrides, else doesn't matter
Data CalculationData, TestData, StratData
have user-defined names and formulas optional doesn't matter is calculation sequence
Data Output
Results, Graphs, Trades, Charts, Scan, TestScan
have user-defined names and formulas optional doesn't matter is display sequence
Formula Library Library has user-defined names and formulas always doesn't matter doesn't matter
199Parameter Values Parametershas user-defined names and value lists always doesn't matter is optimization sequence
Strategy Definition
Strategy, BenchMark, StatsGroup, Combined, Template
have specific names and purposes never determines default daily processing sequence in testsdoesn't matter
Script Settings Settings etc.have specific names and purposes always doesn't matter last instance wins for overrides, else doesn't matter
Each of the above sections may appear zero or more times in the combined script. (Some Run Modes are only available when the script defines the section to which the mode pertains, e.g. Import for import mode, Strategy for test mode, etc.)The sections that have specific names and purposes (Import, Strategy, Settings) do not allow user-defined items to be added. The script editor will show you which specific items are available as you are typing. Highlight any item name after typing it and then press F1 to learn more about it.In some cases, specific items are formulas (e.g. EntrySetup in a strategy), in other cases they are some type of constant setting value (e.g. EntryTime in a strategy -- values from a finite list of choices), and in some cases they are folder or file paths (e.g. SaveAs in import). The sections that have user-defined names are all have the same format, which is name: definition. Name is any name of your choosing, provided it was not already used in a different section with user-defined names and is not a built-in variable name (reserved word) such as "close".For sections that allow overrides, writing a new item with the same name as a prior one replaces the prior item definition with the new value or formula. This might be done explicitly in the same script or implicitly by including a script that redefines the item.The Import section is a special case because some of its items logically can have multiple instances, such as DataSource, DataPath, IncludeList, etc. while other items must be defined once for the entire import, such as StartDate, EndDate, SaveAs, Padding, KeepAdjusted. Combining Import sections from different scripts can easily lead to complexity and must therefore be given careful design consideration and testing.All the other sections that have items with specific names always allow override of any item by defining it again with a different value. This facilitates combining scripts that define the same items, especially settings.The sections that allow optional name override disallow it by default -- the parser will show an error message if a name is reused and the script doesn't specify AllowSameName: True in Settings.If this setting is specified then items in any of those sections can be replaced by defining a different item with the same name in the same section type. (It is always an error to try to use the same name in different section types.)For special use cases where you would like to use the same name in various scripts, sometimes combine those scripts, and NOT override any user-defined names, RealTest provides an optional Namespace mechanism. See that topic for details.Conditional Comments can also be very helpful when combining scripts.
17.14. Default Scripts
200RealTest uses four default scripts:Â· Results.rts - provides Results Section formulas defining the columns to display in Results Windows Â· Graphs.rts - provides Graphs Section formulas defining the types of graphs available in Graph WindowsÂ· Trades.rts - provides Trades Section formulas defining the columns to display in Trades WindowsÂ· Charts.rts - provides Charts Section formulas defining the indicators to be added to Chart WindowsThese four scripts are automatically included in any script that is parsed IF that script (or other scripts it includes) does not already define the corresponding section. For example, if your script has no Results section (as it typically will not), then the default Results.rts is automatically included. This ensures that the contents of the four window types listed above are always defined.When a default script needs to be included, RealTest looks for it in the following locations:1.The folder of the script being parsed2.The folder in which RealTest is installed (c:\RealTest by default)The RealTest Installer puts the "factory default" versions of these four scripts in your installation folder to ensure that they're always available. It is often a good practice to copy these to your Scripts folder before making changes, so that your "working" versions will be with your own scripts.When you define any of the above four sections in any of your own scripts, this means that the corresponding default script will NOT be included. For example if you add a Results section to a script with some strategy definitions,the columns defined by that section are the only columns that will appear in the Results window.If you would like to include the default items AND add a few of your own, you can do so as in this example:
This would add a graph of your auto-tracker benchmark rank numbers to the end of your set of stats graphs.If you prefer your script-specific items to appear before the default ones, simply move the Include line to after the Graphs section.It is most often necessary to add custom items to the default section definitions when you want to refer to variables defined by your script, such as the "srank" StratData item in the above example (from oex_tf_auto_track.rts).See each of the links above for more information about the specifics of each default script section and its corresponding output window type.
17.15. Script Sections
The outer sections of a script represent different categories of script functionality. 
201To quickly see a list of all available sections, press F2 in a script window with the cursor at the start of a blank line:
The following topics describe each script section in more detail.
17.15.1. Import Section
The items within the Import section are used to specify everything about data import.See Importing Bar Data (and sub-sections) for a detailed explanation of how data importing works in RealTest.See Import Specification for an alphabetical list of Import section elements.
17.15.2. Data Section
The Data section is probably the most important feature of RealTest. Fully understanding how this section works is critical to your success in using this software.Say you have just imported daily OHLCV bars for all the stocks in the S&P 500 index, as shown in Tutorial 3.Imagine that data as sitting in RealTest's active memory, like a virtual Excel Workbook, with a separate Worksheet for each symbol, something like this:
Now when you run a script that includes a Data section, here's what happens:1.Every item defined under Data (in this case High126 and Drop) becomes a new column in EVERY 
202worksheet in this imaginary workbook.2.The formula provided for each data item is calculated for every bar of every stock and the resulting values are stored in the cells of that column.
Now the imaginary workbook looks like this:
The two new columns, High126 and Drop, have been added to all 500 worksheets in this imaginary workbook, and for each of those worksheets, values have been calculated and stored for (in the tutorial example) all 1,628 rows of each of these two columns in each of these 500 worksheets. That's 1,628,000 calculations that were made and stored.All these calculations happen nearly instantly when you run the example scan. In a more complicated multi-strategy trading system model, there will often be billions of calculations to make. Fortunately, RealTest is very fast and takes advantage of all available CPU cores to do this job as quickly as possible.As a further speed optimization, calculated Data items persist in memory as long as the same data file is in use and their formulas (or the formulas of other items that they refer to) have not been changed. So if, for example, you're running a number of backtests using the same underlying data calculations and only varying, for instance, the exit parameters, that set of tests can run extremely quickly.To put it another way, calculated data columns are like global variable arrays in a standard programming language. As in an Excel worksheet, once a value has been calculated and stored, it can be referred to in any other formula. Data column formulas can also refer to their own values that have already been calculated. See Self-Referential Items for details about how that works.To look "under the hood" at the data columns currently residing in memory, use the Debug Panel.Another special feature of the data section is the ability to calculate cross-sectional (breadth) data. Because data columns are pre-calculated before a test is run, they are not allowed to access any test-specific context. If you have a need for intermediate formulas with test-specific context access, that is what the Library Section is for.
17.15.2.1. One-Pass Data Formulas
The following material is kept here for reference and/or curiosity, but it is no longer necessary to understand and follow these guidelines. Functions and indicators that can support one-pass calculation are now automatically calculated this way even when they're embedded within a larger formula expression.
203A regular Data Section item formula is calculated by looping through all the dates of the symbol and evaluating the formula for each date. If the formula includes an indicator or rolling bar function with a long lookback length, this can take some time to accomplish, since it has to "roll back" that many bars from each bar of each symbol. For most types of formulas, this can't be avoided, and fortunately RealTest already performs these calculations as quickly as possible, using multiple threads.For certain commonly-used functions and indicators, it is possible to dramatically speed up their calculation if they are structured and declared a certain way.The difference in speed between the standard calculation method and "one-pass" is roughly a factor of one third of the lookback length. For example, a 100-day moving average can be calculated approximately 33 times faster when the one-pass optimization can be applied.When you think about a backtest universe with 10,000 stocks going back 20 years (5000 daily bars per stock), you can start to imagine how much faster long-lookback indicators can be calculated if you structure your scripts to take advantage of one-pass mode.All of the functions and indicators listed below will be automatically calculated in one pass if and only if the following conditions are all true:Â· the indicator is the only element of the data item formula (not part of a larger expression)Â· the length argument is a constant (literal number) or a parameter referenceFor example, below are two ways to calculate simple uptrend / downtrend variables:
In the first Data section above, RealTest cannot use one-pass calculation for either formula, because they each contain two functions and an operator.In the second Data section, the moving averages are each given their own data items, which allows them to be calculated using one-pass.Note the comments that compare the calculation speed (your results may vary depending on your hardware).The following functions and indicators support one-pass calculation if they are specified as described above:Â· ATRÂ· ADXÂ· MDIÂ· PDIÂ· RSIÂ· RSIFÂ· RRSIÂ· BBTopÂ· BBBotÂ· KBBotÂ· KBTopÂ· MACDÂ· MACDSÂ· MACDH
204Â· SUMÂ· MA / AVGÂ· EMA / XAVGÂ· Highest / HHVÂ· Lowest / LLVÂ· SinceHighÂ· SinceLowÂ· StdDevÂ· SkewnessÂ· KurtosisÂ· HVOLAdditionally, the following functions support one-pass calculation when their optional length or "nth" argments are NOT present:Â· CountTrueÂ· TrueInRowÂ· SinceTrueÂ· UntilTrueÂ· WhenTrueÂ· SumSinceIt is worth your while to carefully structure your Data Section so that long-lookback indicators can take advantage of one-pass calculation!To do this most effectively, look through all of your data and strategy formulas to find any of the above indicators, give each unique one its own data item, and change all the places where it is used to references to that data item.The bensdorp_book.rts example script gives an excellent illustration of this technique. Imagine (or test, if you're curious) how much more slowly that set of seven strategies would run without the one-pass calculations!
17.15.2.2. Self-Referential Items
As well as being able to refer to prior Data Section items, the formula of an item can also refer to itself, as it is being calculated. Use of self-referential data item formulas is an advanced programming technique that you will most likely never require. But if you do, this shows how they work.Data item formula calculation occurs in a loop from earliest to latest bar of each stock. (This is analogous to how you would set up a data series calculation in an Excel column, by typing a formula in the first cell, then doing "fill down". Excel automatically adjusts each cell reference to produce a running calculation.)As a first example, let's calculate and store an "all-time high" series for each stock.A typical formula for all-time high would be:
This basically says "for each bar, go back through all the prior bars and find the highest high." Calculating this item this way would require 1 reference to the oldest bar, 2 references to the bar after it, 3 to the bar after that, and so on. For 10 years of data, which is about 2500 bars, calculating ATH this way would require 2500*(2500+1)/2 = 3,126,250 bar references! (Thank you, Mr. Gauss.)Instead, if you specify the formula like this
then it only needs to compare two values for each bar: that bar's High, and the last calculated value of 
205ATH. Doing it this way for 10 years of data would therefore require only 5,000 bar references, or about 1/625 as many as the first way.
Another example using this technique would be to calculate ATR using the original Welles Wilder formula as described in his book New Concepts in Technical Trading Systems. RealTest uses this same formula internally in the ATR indicator, so there's no need to calculate it yourself, but it's a fun example for this topic.At the time that Wilder did most of his research, most traders did not have access even to a calculator, let alone a computer. He therefore favored exponential-style moving average calculation vs. using simple averages, mainly because they are so much faster to calculate by hand.For example, ATR(14) can be calculated using this self-referential item formula:
To generalize this to a parameterized ATR length, you could use:
Similarly, this technique can be used to calculate your own EMA, though as with ATR, there is no reason to favor this approach over simply using the EMA indicator.For example, EMA(20) can be calculated using this self-referential item formula:
To generalize this to a parameterized EMA length, you could use:
You may have noticed that the EMA formula is a bit more complex than the ATR one. This may be a clue as to why Wilder preferred his non-standard smoothing technique.For more examples of self-referential items, see flipper.rts and supertrend.rts in the Examples folder.
17.15.2.3. Bar-Size-Specific Items
RealTest supports multiple bar sizes and makes it easy to mix them with correct date alignment.Each script has a BarSize setting and can optionally specify a Strategy bar size that is different from the Settings bar size.Each item defined in the Data Section is, by default, calculated and stored using the Settings bar size.Data item arrays are independent of any strategy, therefore strategy bar sizes are not considered when calculating them.For example, if the settings bar size is Daily and the script includes a Weekly strategy, the Data items used by that strategy must be explicitly specified as weekly bar arrays.To begin a group of data items with a specific bar size, you can add a BarSize statement within the Data Section itself.For example, the following would calculate and store a 20-week moving average in a daily bar size 
206script:
All items defined after a BarSize statement and before the next BarSize statement will be calculated and stored in that bar size.Another way to designate an individual data item as having a specific bar size is to simply prefix its name with that BarSize name. This example would also calculate and store a 20-week moving average in a daily bar size script:
Whether a BarSize statement is added to create a group of items with that bar size or a bar size name prefix is used for an individual item, such items are calculated and stored using bars of the designated size.It is also possible to calculate a data formula using bars of a different size than it is stored with.This example, like the one above, calculates a 20-week moving average:
Since the Settings bar size is daily, the weekly values are expanded into a daily array in memory. This takes more memory than the other approaches described above but may result in faster script run times if that item is being used by a daily bar strategy.To see all the internal details about your Data items including their bar size and calculation speed, check this box in Program Options:
Here is the output after calculating both items above for SPY from the start of 2015 through July 2023:
The Extern method is preferable when calculating non-daily data items for reference by a daily barsize strategy. Although more memory will be consumed for each such item, references to those items will be far faster. Each lookup of a non-daily Data item value corresponding to a daily bar takes time. Storing 
207redundant daily copies of each non-daily bar value eliminates the need for those lookups.The Data BarSize or name prefix method is preferable when calculating non-daily data items for reference in a strategy of that same barsize. In that case the opposite applies. It uses less memory and is more efficient to store those arrays in their own bar sizes when that's how they'll be referenced.In summary, chose the other-barsize Data item style to match the context from which it will be referenced.
17.15.3. TestData and StratData Sections
TestData and StratData are specialized variations of the Data section.To summarize their similarities and differences:
Data Section TestData Section StratData Section
When is it calculated? before any test starts, for all bars of all stocks during each test, for each stock, at the end of each test date
during each test, for each strategy at the end of each test date
How is it calculated?
optimized for speed using multiple threads, one-pass for many indicators, and only recalculating formulas that changed since last time
single-threaded, can't use one-pass, all items recalculated every test, but still quite fast if long-looback indicators are avoided
like TestData but with only one column per strategy, so speed is not a concern
What can its formulas reference?
bar data, Parameters, previously calculated Data items (including itself), or Library items that only reference these things
everything that Data formulas can reference, anything that Strategy formulas can reference, and other TestData items (including itself)
nothing symbol-specific, just the summary-level stats (S.xxx) of the strategy
Cross-sectional (breadth) support? yes yes yes
How is it stored? 8 bytes per item times number of stocks times number of bars ditto 8 bytes per item times number of strategies times number of test periods
TestData and StratData formulas are evaluated during a test at the end of processing for each test date (BarSize period). TestData formulas are evaluated for the current bar of every stock that has a bar for that date, with the value then stored in the TestData item's memory array. StratData formulas are evaluated for the current day of every strategy being tested (including Benchmarks, StatsGroups and Combined), with the value then stored in the StratData item's memory array.As with Data items, TestData and StratData items can be referenced by name for the current bar, any past bar (using [n] offset notation) or as parameters to any multi-bar indicator.TestData and StratData items can also refer to themselves in the same way that Data items can.As an example of how TestData is useful, consider a strategy like the ndx_rotate.rts example where you want to incorporate a liquidity filter based on current S.Equity (account balance) as the test proceeds (assuming no withdrawals). This example uses the #rank breadth operator to calculate its posrank variable:
208However, since Data is calculated before the test starts, you can't refer to S.Equity in that formula.The solution is to move the last two Data items into a TestData section, and add a liquidity calculation:
Note that in the above example, S.Equity is referenced directly. This works because there's only one strategy in the script.A key point to remember, however, is that TestData is not strategy-specific. It is similar to TestScan in this regard. References to test stats, position information, etc. each have an implied Combined wrapper, i.e., the above S.Equity is interpreted as Combined(S.Equity).If this script contained other strategies, and you wanted to use only this strategy's equity value for your liquidity constraint, you would need to change the above to Extern(@ndx_rotate, S.Equity). Notice that we've also added a count item, to make it easier to see the impact over time of this liquidity constraint.By temporarily adding a Graphs item that displays count, we can see at a glance what the impact of this liquidity constraint would have been in this model:
209In a $3M+ account, if you applied this constraint, the "Nasdaq 100" would become the "Nasdaq 10" ...The example above requires TestData because it needs to calculate a rank factor formula for each symbol.Use StratData when you want to calculate and store values that do not require individual symbol data, and/or when you'd like to be able to apply cross-sectional calculations to your set of strategies and/or benchmarks.The oex_tf_auto_track.rts example script demonstrates this:
210This part of the script implements the auto-tracker mechanism. The script includes five versions of the same trend-following strategy that each use the above template. The "maxrank" parameter loops from 1 to 5 to test how many of the top-ranked strategies to allow new entries for.These are the results with maxrank = 2:
Note that this trades all five strategies, but on any given date will only add new positions in the top two.To see more detail about how this works, change the Tracker setting to Visible, rerun the script, add a graph to show the rankings, and open it:
211Now we see the five auto-tracker benchmarks and the changes in their rank numbers.(This also shows how to add your own graphs at the end of the default ones by including the default script first.)
17.15.4. Scan and TestScan Sections
The Scan section is, in a way, similar to the Data section. You might think of it as a data query and reporting tool. The items provided under Scan are similar to Data items in that each provides a formula to be calculated. Each named formula becomes a column in the scan output. The two exceptions are the Filter formula and the Sort specification. The filter formula is evaluated for every bar of every stock to determine whether to include that bar in the scan output. A bar is included only if the Filter formula evaluates to "TRUE" or a non-zero value. The sort specification lets you name the column(s) to use for initial sorting of the rows of the scan after it is generated.Scans can be useful during research to find specific examples of a setup for further study, or in a production system to produce the candidate list for daily trading.See Tutorial 3 for a simple example of how to run a scan.Here are the data and scan definitions from that example:
212Notice how the scan items are able to refer to the data items, and that it's fine to give a scan column the same name as a data item.If a Scan item name begins with an underscore, that item will not be shown in the scan output. Rather, it will just serve as an intermediate variable that other items can refer to. As with Results, Graphs, and Charts, Scan column formulas may include a format specification comment within their formulas. Scans can be run for any date or a range of dates. The output is a new scan window.The data file and date range to use when running a scan can be specified by adding a ScanSettings section to the script. If no settings are specified, the settings currently shown on the Settings Panel will be used.See Multi-Row Scan for information on how to output more than one row for each symbol+date.TestScanThe TestScan section works the same as Scan except for these details:Â· TestScan must be defined in a script that also includes at least one Strategy or Benchmark sectionÂ· Formulas within a TestScan definition may refer to any syntax element that a Strategy formula can refer toÂ· TestScan is run by checking Scan in the Test Output area of the Settings Panel or adding TestOutput: Scan to the Settings section of the scriptÂ· The date range of a TestScan is always confined to the one last bar of the test that was just runÂ· Other settings for a TestScan, such as ScanSaveAs, are defined in TestSettings rather than ScanSettingsThe main purpose of a TestScan vs. a general-purpose Scan is to generate customized order lists. The feature was added to RealTest for this purpose, before the CSV Order Baskets capability was introduced.See Test Output Scan for more details on how TestScan works.
17.15.5. Settings Sections
RealTest provides many settings which can be optionally specified in your scripts.The Settings section is the place to specify settings that will apply in every run mode.Only use the following run-mode-specific sections when you need different settings for different modes.Use ScanSettings for settings to apply only apply when running a Scan.Use TestSettings  for settings to apply when running a Test or TestScan.Use OptimizeSettings for settings to apply specifically when running an Optimization.Use OrderSettings for settings to apply only when generating orders.
213Run-mode-specific settings sections must appear after the general Settings section in a script if both are present.Any setting in a run-mode-specific settings section will override the same setting in the general settings section when the script is being run in that particular mode.Any setting in a run-mode-specific settings section that is not also in the general settings section will get its default value when the script is not run in that mode.A few of these script-specifiable settings can also be specified interactively using the Settings Panel.For those settings that appear on that panel, if the setting is not specified in the script then the value currently showing on the panel will be used.When a script is running, the settings panel will temporarily display any settings that the script has specified that also appear on the panel.When the run is finished, most settings panel settings are restored to their prior values. In other words, most script-specified settings do not persist in the user interface.Exceptions to the above are: DataFile and BarSize. Those persist on the settings panel because Data Section arrays that persist in memory are dependent on those settings and would need to be recalculated if they were changed.The following is a table of all available settings with their types and defaults:Setting Type DefaultAccountSize dollars settings panelAccountType CashNextDay, CashSameDay, Margin MarginAllowSameName True or False FalseAlwaysImport True or False FalseBarSize Daily, Weekly, Monthly, Quarterly, Yearly settings panel
CashIntPct number 0CommCurrency USD,EUR,GBP,CAD,AUD,etc. noneCurrency USD,EUR,GBP,CAD,AUD,etc. noneDataFile folder path and file name settings panelDateDisplay Excel-style date definition string M/d/yyDateInput DMY or MDY MDYEndDate date settings panelExchangeMap folder path and file name noneHolidayList folder path and file name noneKeepTrades see topic for choices settings panelMarginIntPct number noneNumBars number settings panelOptimizeSettings various variousOrderClerkFolder folder path noneOrdersFile folder path and file name noneOrdersFreeCash folder path and file name noneOrdersLiveData True or False FalseOrdersMktAsLmtPct number noneOrdersMode see topic for choices TextOrdersNetLiq folder path and file name noneOrdersTemplate folder path and file name noneOrdersUseQtyIn True or False FalseRandomSeed number noneReportsFolder folder path none
214ResultsFile folder path and file name noneRiskFreeRateSym symbol (no leading $) noneSaveChartsTo folder path noneSavePositionsAs folder path and file name noneSaveScanAs folder path and file name noneSaveStatsAs folder path and file name noneSaveTestListAs folder path and file name noneSaveTradesAs folder path and file name noneSaveTradesType Compact or Full FullScanNoDefCols True or False FalseScanNoHeader True or False FalseScanNoWindow True or False FalseShortLoanIntPct number 0ShortPrcdsIntPct number 0SkipTestIf formula (references parameters) noneStartDate date settings panelSymChangeList folder path and file name noneTestName string settings panel or script nameTestOutput see topic for choices settings panelTestScanAllDates True or False FalseUseAvailableBars True or False False
17.15.6. Library Section
The Library Section and the Data Section look very similar and can, to some degree, be used interchangeably. Their implementation and intended usage are, however, quite different.
The Data Section items are all pre-calculated before any test or scan is run. The calculated values are stored in memory arrays alongside the loaded bar data. Their calculation is extremely fast since it can take advantage of multi-threading, and they can be retrieved from memory very efficiently when accessed since they're stored as fixed-size arrays.
Library Section items, in contrast, are calculated "as needed". So if a formula refers to the same library item twice, it will be calculated twice. Another way to think of Library items is as "formula snippets". It is as if the library item's formula was copied and pasted into the formula that refers to it in place of its name. 
While clearly less efficient than the Data Section approach, the advantage here is that a library formula has full access to the context in which it is used. For example, you cannot refer to something like FillPrice or BarsHeld or S.Equity in a Data item. No test has been run yet so there is no context to evaluate these. 
In a library item, however, if it is referenced from a strategy formula, then every syntax element available to the strategy is available to the library formula. In other words, library formulas always inherit the context of the formula that refers to them.
See the mr_sample_debug.rts example script for an example of using the Library section.
Library Functions
Library formulas can optionally serve as general-purpose one-line functions. 
215A Library item can be referenced with up to 9 arguments, as if it were a function, e.g. my_library_item(high, low). 
Library items that serve as functions can access the values passed to them by referencing the special build-in variables Arg1 - Arg9.
Here is a contrived example to show how this works:
Library:   AvgOfThree: (Arg1 + Arg2 + Arg3) / 3
Data:   TypicalPrice: AvgOfThree(H, L, C)As with any built-in function, the arguments passed to a library function can be any expression (including other library functions).Arguments are always passed "by value" rather than "by reference". In the above example, the current values of H, L, C would be passed to the AvgOfThree function. The function does not know that these numbers came from price references and cannot therefore, for example, access Arg3[1] to get the prior close. 
17.15.7. Strategy Section
A script can include any number of Strategy sections. All strategies found in a script will be included when a test is run. To exclude a strategy from a test, temporarily comment it out. This can quickly be done by putting the cursor in the strategy header line, then pressing Ctrl+/ or selecting "Comment Selection" from the Script Menu.
â¦ resulting in â¦
216Do the same in reverse to remove the comments and include the strategy again.Another way to toggle comment in/out is to click in the left margin adjacent to the line or section to be toggled, as shown above.
17.15.7.1. Strategy Names
Each strategy must be given a name (up to 80 characters in length).Type the name after the "Strategy:" marker as shown below.The name you provide will be used in all references to the strategy in graphs, trade lists, etc. 
17.15.7.2. Special Strategy Types
There are two alternative ways to define a Strategy -- as a Benchmark or as a Template. All three of these strategy types are defined the same way and support all the same elements. The only difference is in which keyword is used to declare them. A Benchmark strategy is run and its stats are calculated exactly as if it was a regular strategy. It has its own set of stats and will appear among the strategies shown in stats graphs. The only difference is that the stats of a benchmark are not included in the combined results. One use of a benchmark strategy is to plot a simple buy-and-hold equity line for visual comparison with your own strategy. A more advanced usage would be to define a basic version of a strategy which the actual strategy can refer to. Template strategies serve to prevent the need to copy and paste elements that are common to several strategies in a script. Template strategies are not "run" in a backtest. In older versions of RealTest, 
217there was a single template strategy called "Defaults". This has now been replaced with support for multiple named templates.To define a template strategy, simply declare it as, for example, "Template: base". To include the elements from that template in another strategy (or template or benchmark), add the statement "Using: base" to the strategy. To include more than one template, list them separated by commas, as in "Using: base1, base2, base3".When a strategy uses a template, it inherits all the elements defined in that template (and any others that the template uses).  It can then optionally replace some of those elements by declaring them within the strategy.In addition to the above, StatsGroup is also a strategy-like script element.  Like these others, StatsGroup defines an outer-level section. However, the only Strategy elements that StatsGroup is allowed to contain are: Using, Allocation, MaxEntries, MaxExposure, MaxInvestement, MaxPositions, MaxSameCat, and MaxSetups.The original purpose of StatsGroup was to define a combined statistics series, similar to Combined (which is automatically added to any test with more than one Strategy) but with a smaller subset of strategies involved in the combination. For example, say you had two long and two short strategies in a system, called long1, long2, short1 and short2. By default your stats would include 5 series (5 lines on the Equity graph etc.): long1, long2, short1, short2, and Combined. If you also wanted to see combined stats for both long strategies and both short strategies, you could simply add these statements to the script:
This defines two new stats series, Longs and Shorts, calculated by combining trades from both strategies of the group into its stats.In addition to using StatsGroup to add more stats series to your test output, you can also reference them from your strategy logic. Just as the ongoing stats of any Strategy or Benchmark can be accessed using Extern(@strategyName, S.xxx), all of the StatsGroup series that you define can similarly be accessed using Extern.The default Allocation for a StatsGroup is Combined(S.Equity). Allocation is only relevant in this context because of its use in the calculation of percent-based results statistics such as S.TWEQ, S.MaxDDPct and S.NetPct. Only override the default Allocation if you need these percentages to be calculated differently.An additional section called Combined can optionally be added explicitly. If present, it also supports all of the Max... items that StatsGroup does. Note that Combined as a strategy-like section is the only such section that cannot be named, and it also may not contain Using or Allocation definitions. When Max... constraints are specified for a StatsGroup or Combined, they are applied to all strategies in that group together. For example, if MaxExposure: 100 is defined for Combined: then a setup in any strategy will be skipped if adding that position would push the combined exposure above 100%.Similarly, these constraints in a StatsGroup ensure that setups will be skipped if entering those positions would exceed any them.See Also: Backtest Engine Details and Capacity Constraints
17.15.7.3. Strategy Elements
The elements within each strategy definition represent all the available inputs to the general-purpose backtesting engine of RealTest. A few of them are required, the rest are optional (with obvious defaults).
218To see a quick list of supported elements, press F2 with the cursor in a blank space within a strategy definition (but not at the start of a line):
(there are many more if you scroll down, or just start typing to get a more focused list)Another way to think of these strategy elements is to imagine that rather than using scripts, RealTest had a strategy definition dialog box. Some of the elements below require a constant, such as "Long" vs. "Short", or "ThisClose" vs. "NextOpen". Other elements require a formula that evaluates to true (1) or false (0), and others take a formula that evaluates to a number. See Strategy Element Value Types and Defaults for a table of element types.
17.15.7.4. Strategy Element Value Types and Defaults
The following table lists each of the above strategy elements along with its value type and default (what happens if this element is not included in a strategy):Element Name Element Type Value Type Default ValueAllocation formula dollars full account sizeAllowNoVolume constant True or False False
219Ambiguity constant Default,Stop,Target,Neither NeitherBarSize constant Daily,Weekly,Monthly,Quarterly,Yearly DailyCalendarSym constant symbol (no leading $) noneCashInOut formula dollars 0CashList file file path noneCategory formula number 0 (none)CloseSlip formula dollars per share 0 (use slippage)Commission formula dollars 0 (none)Compounded constant True or False inferred from QuantityDebugEntry formula string or number noneDebugExit formula string or number noneDebugTargetStop formula string or number noneDynamicSizing constant True or False FalseEntryLimit formula price 0 (none)EntryScore formula number (highest first) alphabetical by symbolEntrySetup formula condition 0 (false)EntrySkip formula condition 0 (false)EntryStop formula price 0 (none)EntryTime constant logical time of day* NextOpenEntryTradeValue formula number 0ExitLimit formula price 0 (none)ExitQty formula shares entire positionExitLimitTime constant logical time of day* IntradayExitLimitQty formula shares entire positionExitRule formula condition 0 (false)ExitStop formula price 0 (none)ExitStopQty formula shares entire positionExitStopTime constant logical time of day* IntradayExitTime constant logical time of day* NextOpenExitTradeValue formula number 0FuturesMargin formula dollars InfoMarginGreedyScoring constant True or False FalseHolidayList file file path noneLimitExtra formula dollars per share 0 (none)LimitSlip formula dollars per share 0 (use Slippage)MarkToMarket constant True or False TrueMaxCatExp formula percent unlimitedMaxCatInv formula dollars unlimitedMaxEntries formula count unlimitedMaxExposure formula percent unlimitedMaxInvested formula dollars unlimitedMaxLongExp formula percent unlimitedMaxLongInv formula dollars unlimitedMaxNetExp formula percent unlimitedMaxNetInv formula percent unlimitedMaxNewExp formula percent unlimitedMaxNewInv formula dollars unlimitedMaxNewPos formula count unlimitedMaxPerTurn formula count 1
220MaxPositions formula count unlimitedMaxSameCat formula count unlimitedMaxSameSym formula count 1 for strategy, unlimited for statsgroup or combinedMaxSetups formula count unlimitedMaxShortExp formula percent unlimitedMaxShortInv formula dollars unlimitedMaxSymExp formula percent unlimitedMaxSymInv formula dollars unlimitedMinFreeCash formula dollars unlimitedMinNetExp formula percent unlimitedMinNetInv formula dollars unlimitedOpenSlip formula dollars per share 0 (use slippage)OrdersMktAsLmtPct formula number 0OrderNote formula number or string noneOrdersFile constant file path nonePriceRound formula number tick sizeQtyFinal formula shares or contracts Quantity forumla valueQtyPrice constant OrderPrice or FillPrice OrderPrice in default modeQtyRound formula number 1QtyType constant Shares, Value, Percent SharesQuantity formula shares or contracts account size / entry priceReduce constant True or False FalseRollCost formula dollars 0SetupScore formula number (highest first) alphabetical by symbolSetupSkip formula condition 0 (false)Side constant Long,Short,Both BothSlippage formula dollars per share 0 (none)StopSlip formula dollars per share 0 (use Slippage)StrategyScore formula number (highest first) script sequenceTLAdjusted constant True or False FalseTLDateFmt constant MDY or DMY program options settingTLDelim constant Comma, Semicolon, Tab TLFields constant ordered list of field names noneTLIgnoreRules constant True or False FalseTLNumFmt constant Point or CommaTLStratName constant string current strategy nameTLTimeShift constant number of hours 0TradeList file file path no trade listUsing special strategy name(s) not using anything
* For the above elements that specify "logical time of day" as their Value Type, available constant values are ThisClose, Intraday, NextOpen, or NextClose. Use the links to the corresponding Element Name topics for further information.
17.15.8. Parameters Section
Parameters or optimization variables are defined in their own section of the script. They can be given any name and used by any strategy. 
221Parameters can also be referred to in the formulas for items in the Data Section. The syntax for defining parameter variables is different from other script sections where the standard formula syntax is used.The end product of a parameter variable declaration is a list of values to use. The syntax supports all of the following methods of defining a value list:Â· A single numberÂ· Traditional loop statement, e.g. "from 5 to 50 step 5"Â· Loop with multiplication, e.g. "from 5 to 200 mult 1.1"Â· Optionally, either of the above can include a "def" and/or "round" clause, e.g. "from 5 to 50 step 5 def 20" or "from 5 to 200 mult 1.1 round 1"Â· Or you can simply list the values you want, separated by commasNote that all values used in this section must be simple numeric constants. No expression syntax (e.g. division) is allowed.The following are examples of supported syntax:
If no default ("def") is specified, then the default value will be the first number in a list or loop. Default values are used in the following circumstances:
Â· a single test is run, rather than an optimizationÂ· an optimization is run but that parameter is not selected in the optimization parameter listÂ· a formula from a non-strategy section, e.g. Scan, refers to a Data item that refers to a parameter in its formulaThe Debug Panel can be used to experiment with the above syntax. 
Evaluating any "from" statement in the debug formula causes the resulting value list to be written to the log window.
22217.15.9. Results Section
The Results Section is where the columns to display in any Results Window are defined.Here is the default set of Results window columns and their definitions: 
You are welcome to edit this file (press F9 when viewing a results window) and/or include a different set of column definitions in other test scripts. Examples of some columns that you might want to add are provided as comments in this default script (rows beginning with //).Every test result record contains the same set of underlying Test Statistics Arrays (the green items in the above example). Your column formulas select which stats you want to display, allow you to specify the format of the numbers, and make it possible to calculate higher-level stats however you prefer. Results column formulas are calculated only once, at the end of a test run. When they are calculated, the context is the last date of the test. This is why, for example, S.Number is used to display the number of periods (dates) over which a test was run. The daily stats record for the first date is 1, the second date is 2, and so on. At the end of the above test, there were 6,894 stats records, so the number of the last record was 6,894.Similarly, for stats where we want the total count of something for the entire test, we use the Sum function.Results formulas can optionally reference Trade Statistics Functions, though calculating these can be slow for tests with very high trade counts.A format specification comment can be included in any item. If no format is specified, the item will use default number formatting. The vertical bar {|} in a Results item format specification indicates that this item should be calculated after each day of the test and displayed in the status bar as the test is running.To apply Results section formulas to all currently open Results windows, press F4 or click Apply.See also Default Scripts.
17.15.10. Graphs Section
223This script section defines each graph to include in the list of available daily stats graphs for any test that has been run. If the active script does not include a Graphs section then the default graphs script graphs.rts is used.Each graph type defined in this section becomes a button on the tab bar at the top of every Graph Window.
To access the underlying formulas for any Results, Graphs, Trades or Chart window, press the F9 key or use the context menu.Each item defined in the Graphs section defines a graph to include. The item name becomes the name of the graph, and the item formula is evaluated for every date in the test results record and then plotted as either a continuous line or a histogram.If a graph item name begins with an underscore, that item will not be plotted. Rather, it will just serve as an intermediate variable that other items can refer to. This can be useful to avoid repeating the same expression several times or to calculate an indicator that requires several steps.A format specification comment can be included in any item and has two purposes. If no format is specified, the item will be graphed as a line using default number formatting. The vertical bar {|} is used to specify that a histogram is to be drawn, otherwise a line graph will be drawn. If a number format is specified, it will be used when drawing the Y axis and whenever a value is 
224displayed for a specific date.The special format code {^} is used to specify which graphs are included in Test Summary Reports.To apply Graphs section contents to all currently open Graph windows, press F4 or click Apply.See also Default Scripts.
17.15.11. Trades Section
The Trades Section is where the columns to display in any Trade List Window are defined.Here is an example of a script (the default trades.RTS) which adds some custom columns:
Applying this script causes the new columns to be shown in all open trade windows. Here is how the trade list looks when scrolled horizontally to show the custom columns:
The formulas used in the Trades section will most often refer to syntax elements that begin with T. When a Trade List Window is opened, RealTest loops through all the trade records that are embedded in the results record for that test and calculates each of the formulas in the Trades section for that trade. The context of any T. variable is therefore the specific trade being evaluated in this loop.Trade List formulas can also refer to any stock bar elements such as Open, High, Low, Close and also any Data section elements. The context when bar/data elements are referenced will always be the bar on which the trade was exited. To refer to the entry bar of a trade, use T.Bars as an offset. For example, the close of the entry bar will be C[T.Bars]. To refer to the EntrySetup bar (the last completed bar at entry time), use C[T.Bars+1] unless EntryTime was ThisClose (market-on-close).A format specification comment can be included in any item. If no format is specified, the item will use default number formatting. To apply Trades section formulas to all currently open Trade List windows, press F4 or click Apply.Literal strings or string functions such as Format can also be used in custom trade list columns.In addition to the above, there are two special Trades items that can optionally be added: Filter and 
225Sort.The filter formula is evaluated for each trade to determine whether to include it in the list. A trade is included only if the Filter formula evaluates to "TRUE" or a non-zero value. 
The sort specification lets you name the column(s) to use for initial sorting of the rows of the trade list after it is generated.See also Default Scripts.
17.15.12. Charts Section
This script section defines any lines to be plotted on bar or candlestick charts whenever they are viewed. If the active script does not include a Charts section then the default charts script charts.rts is applied.
Each item defined in the Charts section defines a data series line to display. The item name becomes the name of the line on the chart, and the item formula is evaluated for every bar and then plotted as a continuous line. If a Charts item name begins with an underscore, that item will not be plotted. Rather, it will just serve as an intermediate variable that other items can refer to. This can be useful to avoid repeating the same expression several times or to calculate an indicator that requires several steps.A format specification comment can be included in any item and has multiple purposes. If no format is specified, the item will be plotted along with the price bars and use their scale.The accent {^} is used to plot this line in the top (indicator) pane rather than the price pane.  (You may have to press âiâ or open the chart options dialog to show the indicator pane.) The vertical bar {|} is used to plot this line in the bottom (volume) pane rather than the price pane.  (You may have to press âvâ or open the chart options dialog to show the volume pane.) If no lower pane indicators are specified, the pane will show volume bars. (It is not currently possible to plot both indicators and volume bars in the lower pane.)If a number format is specified, it will be used whenever the value of the item is displayed for a specific bar.To apply Charts section contents to all currently open Chart windows, press F4 or click Apply in the Tool Bar.Items defined above are plotted below.
226If a special Charts item called "Text" is defined, it is interpreted as a string formula and its output is appended to the chart's legend row.The example belows shows how to add the current bar's "volume surge" to the chart legend using this technique:
See also Default Scripts.
17.15.13. Include Section
227Though this appears as an outer-level "script section", Include is just a simple statement to allow a script to include other scripts. This capability is provided to make it easier to maintain common elements that several scripts share. Examples would be common Data Section items, a frequently used Import definition, or even a Strategy (e.g. an index benchmark) that you often add to other strategies in a script.
Several of the Example Scripts that are based on mr_sample.rts illustrate the use of Include:
This example includes the entire original script and then adds a SPY benchmark to it.Note that the script being included must consist of one or more entire script sections. For example, it would not work to combine a set of strategy entry formulas from one script with exit formulas for a different script by including both scripts. It would, however, work to include a Template section that various strategies share.You can combine items of the same section if that section supports multiple instances. This is the case for Data, Library and Parameters, so Include can be used to share common subsets of those sections among various scripts if desired.Finally, if you have certain elements that you want to include in every script in a folder, RealTest supports automatic inclusion of any script named autoinclude.rts in the same folder as the script being run. If this special script is found, it is included at the top of any other script from the same folder.
17.16. Formula Syntax
Many elements of a RealTest script allow a formula expression to be provided to calculate the value to be used.Examples of places where formulas are allowed include:Â· all the items in the Data, Scan, Results, Graphs, Trades and Charts sectionsÂ· most of the elements of the Strategy section (see the Strategy Element Table for specifics)Â· the ExcludeIf element of the Import sectionÂ· the SkipTestIf and TestName elements of the Settings sectionÂ· the Debug PanelÂ· the Plot Options dialog
RealTest formula syntax is straightforward and will seem familiar if youâve used any other testing or scanning software, or ever written an Excel cell formula.
All expressions (including rolling time-series functions) are fully recursive (able to be nested), placing no limits on the type of any argument.  Every term in every function (even bar offset specifications) can be its own formula. For example, RealTest includes both weighted moving average (WAvg) and Hull moving average (HAvg) 
228built-in functions in addition to the more common simple (MA) and exponential (EMA) flavors. With the WAvg function and recursive syntax, it was not really necessary to add the built-in HAvg (nevertheless it is there). The two formulas below will produce the same result:
As an alternative to writing deeply nested expressions, you can use the Data section to calculate various parts of a complex rule, and then refer to them by name in other formulas, as shown in many of the Example Scripts.
If a formula cannot be evaluated, the return value will be "nan" (not a number). The only reasons that a formula cannot be evaluated are:Â· not enough bars were available to fulfill its lookback plus offset length (unless UseAvailableBars was specified)Â· it refers to a specific symbol or strategy that is not available in the current data fileOnce a formula has returned nan, all other formulas that contain or reference it will also be nan.If desired, you can use IsNan function to see if a formula would return nan, and/or the NoNan function to force a formula to return 0 instead of nan.Data Section formulas that return nan will store nan as that data item, so all references to it will be nan.Scan or Trades Section formulas that return nan will display that item as "nan".Strategy Element formulas that return nan are treated the same as formulas that return 0, so in general you don't need to worry about nan in your strategy formulas.
17.16.1. Operators
The following table lists all of the operators can be used in any RealTest script formula.The general structure of a formula is term operator term.The definition of term in this structure is ... any formula.The examples in the table below show the simplest possible structure, with just a number on either side of each operator.
OperatorAlternativePrecedence Rank Description Example() 1 parentheses (1+1)*2 is 4+ - 2 unary plus or minus +2 + -2 is 0NOT ! 2 logical not NOT false is true^ 3 power, as in x^y (x to the power y) 9 ^ 2 is 81* 4 multiplication  9 * 2 is 18/ 4 division 6 / 2 is 3MOD % 4 modulo (remainder after division) 10 MOD 3 is 1+ 5 addition 2 + 2 is 4- 5 subtraction 9 - 2 is 7> 6 greater than 7 > 5 is true>= 6 greater than or equal to 7 >= 7 is true
229< 6 less than 7 < 5 is false<= 6 less than or equal to 7 <= 7 is true= == 7 is equal to 7 = 7 is true<> != 7 not equal to 7 <> 7 is falseAND && 8 logical and true AND false is falseOR || 9 logical or true OR false is true
The Precedence Rank column comes into play when formulas include more than one operator. Lower numbers mean higher precedence.Operators with higher precedence rank are evaluated first, no matter where they are in the formula.Operators with the same precedence rank are evaluated from left to right.The best practice, to avoid confusion, is to use parentheses to make precedence explicit in your formulas.A couple of examples to clarify this:Â· "value1 + value2 * value3" would be the same as "value1 + (value2 * value3)", because * has higher rank than +.Â· "condition1 OR condition2 AND condition3" would be the same as "condition1 OR (condition2 AND condition3)" because AND has higher rank than OR.Special note about division: RealTest formulas allow division by zero. Anything divided by zero is zero. Though this is mathematically incorrect, it removes the unnecessary complexity of having to check that every divisor is non-zero in your own formulas.
17.16.2. Formula Evaluation
The RealTest formula evaluator works like a "virtual machine". Each formula in the script is compiled to a binary format and preprocessed. The repeated evaluation that occurs during a test is therefore as efficient as possible. One way in which evaluation is optimized is known as "short circuit". If it becomes known before evaluation is finished that there is only one possible result, the remainder of the evaluation process is skipped.For example, in the pseudo-expression "0 and this and that and the other thing", nothing after the 0 would be evaluated, because it is logically impossible for an expression (or sub-expression) with "0 and â¦" to be anything other than 0. Ditto with "1 or â¦", "0 * â¦", "0 / â¦", etc. You can see this short-circuit in action if you experiment with some formulas in Debug Panel with "show evaluation" checked. You can then use this knowledge of how formulas are evaluated to make your tests run even faster, by putting the most-likely-to-be-false terms at the beginning of your conditional formulas.The best place to take advantage of short-circuit efficiency is in the Data section and in your EntrySetup formula. For example, say you have a multi-part EntrySetup concept, such as:Â· price between 10 and 80Â· 20-day average volume at least 100KÂ· price above its 200-day moving averageÂ· price down 3 days in a row
230You could write this as:
          
C > MA(C,200) and MA(V,20) >= 100000 and CountTrue(C < C[1], 3) == 3 and C > 10 and C < 80or you could write the same logic as:
          
C > 10 and C < 80 and CountTrue(C < C[1], 3) == 3 and MA(V,20) >= 100000 and C > MA(C,200)In the first example, the 200-day moving average will have to be calculated for every stock in your database for every date in your backtest. Each of these calculations will require going back 200 bars from the current bar, adding all the closes, and then dividing the sum by 200. RealTest can actually perform these millions of lookups and calculations remarkably quickly, but your tests will run a lot faster if you write your formulas like the second example. In the second example, formula elements are written in order of calculation speed. Because of short-circuit optimization, all of the preceding comparisons will have to be true in order for it to remain necessary to calculate the 200-day moving average. You can make an educated guess about which formula elements take the longest to calculate from the lookback length - how many bars back it must go to calculate its value for each bar.Short-circuit optimization in general speeds up formula processing throughout RealTest by about 50%. You might nevertheless prefer that this optimization not be employed, e.g. if you use formulas where part of the expression might result in "nan". If you need to ensure that any possible "nan" in any formula is accounted for, you can disable this optimization by unchecking Use Short-Circuit Logic in the Program Options dialog box.
17.16.3. Breadth Tags / Cross-Sectional Functions
RealTest makes it easy to specify and calculate cross-sectional or "breadth" functions in the Data Section of a script.Whereas the usual rolling bar functions such as Avg, Sum, Highest, Lowest, etc. operate "vertically" (down a column of the same symbol for different dates), the breadth functions operate "horizontally" (across a row of the same date for different symbols).The format of a data item that calculates a breadth function is:
          
name: #function formulaName is the name of the data item, as usual.Function is the specific breadth function to use.Formula is the formula to calculate for each cell (a specific symbol on a specific date).Only one breadth function can be used in a data item, and it must appear at the start of the formula for that item. Any number of data items can have breadth tags, though, so if you need to perform a multi-level breadth calculation, just use multiple data items. When the item is calculated for each date, the following things occur:
1.formula is calculated for every symbol with date for that date2.function is calculated for the set of values produced by step 13.the result is stored as the value of the data item for every symbol for that dateDepending on which function is used, the end result may be the same for every symbol on a given date.#Avg, #Count, #Highest, #Lowest, #Median, #StdDev and #Sum will, by definition, all produce the same answer for every cell in a row of data. Don't worry, formula will still only be evaluated once per symbol per date, and function is only 
231calculated once per date. The point is that this result is then separately stored for every symbol for that date. While this might sound silly, it actually simplifies other formulas that want to access this result, because they can simply refer to it in the context of their own current symbol.#PercentRank and #Rank, on the other hand, will (by definition) produce a different answer for every cell in a row of data. In this case, formula is still only evaluated once per symbol per date, after which function is calculated by sorting the resulting array of values and then storing each symbol's ordinal (expressed as rank percent or rank number) as its data value for that date.The example script ibd_rs.rts shows how to use this feature to calculate IBD-style "relative strength" ranking. Here is how the S&P 500 components were ranked for IBD RS on 6/26/20:
Note that if a breadth function formula result is nan (not a number -- unable to calculate) then that stock is not included in the ranking list (reducing the total count) and its rank value would be nan as well. Similarly, nan values would not be included in the value count for any breadth functions that use it (e.g. #Avg, #Median, #StdDev).
17.16.4. Special Syntax for Individual Futures Contract Testing
This category of external item reference is somewhat more specialized. If you import all of the individual historical contracts for a futures market, you can, of course, refer to any specific contract by symbol, but how can you model something like a realistic roll-over strategy?To solve this problem, RealTest does some extra processing on futures symbols during import. To take advantage of this feature your futures symbols, if your data is not from CSI or Norgate, must have the same format used by one of them. 
232Specifically, the format must be either: XX-YYYYM, e.g. ES-2016Z,  GC-2021K, etc. or XX_YYYYM, e.g. ES_2016Z, GC_2012K, etc.By using the logic inherent in this naming convention, RealTest is able to construct a "symbol chain" during import, which it can later use to permit REALTIVE external symbol references. The syntax for a relative reference is Extern(&n, expression), where "n" is a numeric offset in either direction. Positive directions refer to newer contracts (ones that expire farther in the future) and negative directions to older ones (ones that expire sooner).For example, if your current symbol is ES-2016Z, then Extern(&1, C) would give you todayâs close for ES-2017H, and Extern(&-1,C) would give todayâs close for ES-2016U.Note that a relative contract reference will return nan if the relevant contract does not include a bar for the current date (the date for which the formula is being evaluated).The simplest application of this syntax is to accurately model "buy and hold" of a futures market using any desired rollover rule. For example, this strategy will hold 1 ES and roll at the open after the first day where the new contract has more volume than the old one:
You can also use this technique to model spread trading, calculate contango/backwardation indicators, or who knows what else.The script es_compare.rts in the example scripts directory includes the above strategy and runs a comparison study of modeling "buy and hold" ES since its inception using (1) individual contracts with accurate rollover transaction modeling, (2) a single continuous price series without back-adjustment, and (3) a single continuous back-adjusted price series.
When this kind of futures symbol chain exists, RealTest can also calcluate market-specific breadth values such as ranking by volume the active contracts within each market on a given date. See #ByMkt and the futures_calendar_spread.rts and futures_volume_rank.rts example scripts for details.Besides relative contract lookup, there is one additional variation of this syntax. If your data file includes the CSI or Norgate continuous contract series as well as individual contract symbols, you can reference the corresponding continuous series for the current individual symbol by 
233using either Extern(&cc, formula) if you want the non-back-adjusted one, or Extern(&ccb, formula) if you want the back-adjusted one.The futures_volume_rank.rts example script shows how this technique can be used to implement a trend-following strategy that trades individual contracts while using a continuous series to generate its signals.Going the other way, if the current symbol is a Norgate continuous contract symbol, the corresponding individual contract with the nearest upcoming expiration date can be referenced using Extern(&0, formula). The second nearest is Extern(&1, formula), and so on.Knowing this, it becomes simple to calculate spreads:
The futures_calendar_spread.rts example implements this in a slightly more efficient way, but the result is the same.
17.16.5. Statistics Values in Formulas
RealTest provides a large set of daily test stat variables which can either be used directly or combined in expressions to calculate any conceivable system metric.In order to give each of these stat items the most logical name without preventing that same name from being used as a column variable in Results or Graphs definitions, the built-in items all have names beginning with "S." Stats variables are used in all of the formulas in RESULTS.RTS and GRAPHS.RTS - the default definitions for all Results and Graph windows.Stats variables can also be used in any formula-based Strategy Element definition. When a test is being run, each day's daily stats variables are calculated and stored at the end of that day during the test. This makes it possible, for example, for EntrySetup or ExitRule or Quantity formulas to include references to the strategy's current results so far. A simple reference to a stat variable returns the value for the current day only. To obtain summary stats, use multi-bar functions with the stat variables.For example, say a test is on day (bar) 100 and you want to know the overall profit factor so far. Profit factor is defined as dollars won / dollars lost. The RealTest syntax for dollar (or other currency) value won is S.WinAmt and for value lost is S.LossAmt (both return positive values). The number of stat days so far in a test is available as S.Number. The profit-factor-so-far formula would therefore be Sum(S.WinAmt,S.Number) / Sum(S.LossAmt,S.Number). Or you might want to use a rolling 3-month profit factor, which would be Sum(S.WinAmt,63) / Sum(S.LossAmt,63).The following stat properties are exceptions to the above rule and are accumulated internally, such that each day's value incorporates the entire test so far:S.MinEquity, S.MaxEquity, S.MaxDDDlr, S.MaxDDPct, S.MaxDDBars(It should be clear from the Min/Max prefixes that this is how these work.)To make all of the above more concrete, do the following:1.Run a test or open a results file2.Open the debug panel3.Select a test number and strategy name under "Stats Context"4.Select a date that is within the range of dates for the test (and not a weekend or holiday)5.Click "Stats" under "Examine"The output will look something like the following image. There are more columns in the stats window 
234than are visible here. Scroll right to see the rest of them. 
17.17. Syntax Element Categories
All of the elements of the RealTest Script Language syntax are listed here according to usage categories, alphabetically within each category.
17.17.1. Script Sections
A script can contain a variety of top-level sections. Specific section types are listed below.Â· Benchmark - begin a new benchmark strategy definitionÂ· Charts - chart indicator definitionsÂ· Data - named formulas calculated and stored in memory arrays for each bar of each symbol before tests are runÂ· Graphs - graph type definitionsÂ· Import - data import definitionsÂ· Include - allows a script to always include another script
235Â· Library - named formulas calculated when they are referenced, using the current contextÂ· Namespace - specifies a prefix for script-defined names, to prevent duplication when including multiple scriptsÂ· Notes - a free-form section in which to organize any notes about the scriptÂ· OrderSettings - override general settings when script is run as OrdersÂ· OrdersInclude - allows a script to include another script only when being run as OrdersÂ· Parameters - system parameter definitionsÂ· Results - results column definitionsÂ· Scan - filter and column definitions for general-purpose scansÂ· ScanInclude - allows a script to include another script only when being run as ScanÂ· ScanSettings - override general settings when script is run as ScanÂ· Settings - runtime settings for all script run modesÂ· StratData - named formulas calculated and stored in memory arrays for each strategy each date while tests are runÂ· Strategy - begin a new trading strategy definitionÂ· Template - begin a new template strategy definitionÂ· TestData - named formulas calculated and stored in memory arrays for each symbol each date while tests are runÂ· TestInclude - allows a script to include another script only when being run as TestÂ· TestScan - filter and column definitions for scans that include trade and position informationÂ· TestSettings - override general settings when script is run as TestÂ· Trades - trade list column definitionsÂ· WalkForward - system parameter values by date
17.17.2. Settings
These define the settings to apply when running a script.Â· AccountSize - starting capital amountÂ· AccountType - specifies the type of account being modeledÂ· AllowSameName - allow user-defined items to replace prior ones with the same name in the same section typeÂ· AlwaysImport - causes data to be re-imported before a script runs in any modeÂ· BarSize - default test data timeframeÂ· CashIntPct - interest rate received for positive daily excess cashÂ· Currency - account base currency for multi-currency system modelsÂ· DataFile - test data file pathÂ· DateDisplay - how dates are displayed in the user interface, scans, trade lists, etc.Â· DateInput - how dates are parsed when day/month vs. month/day is ambiguousÂ· DateSym - symbol to use for "Earliest" or "Latest" in StartDate or EndDate
236Â· DaysPerYear - number of market days per year for stats purposesÂ· EndDate - last date of testÂ· EndOfTestExits - controls whether open positions are exited at the end of a backtestÂ· ExchangeMap - details about specific exchanges for which you may want to generate ordersÂ· HolidayList - list of holidays (only required for order generation)Â· KeepTrades - types of trades to store in each results recordÂ· MarginIntPct - interest rate charged for negative daily excess cash (margin loan)Â· NumBars - number of market dates to testÂ· OptimizeSettings - various settings applying to Optimize ModeÂ· OrderClerkFolder - path of folder to use with OrderClerkÂ· OrdersComment - string to add to the top of the order list when orders are generatedÂ· OrdersFile - path\name of order list file to generateÂ· OrdersLiveData - allows order generation for "ThisClose" entry and exit timesÂ· OrdersMode - specifies the format of generated ordersÂ· OrdersNetLiq - path\name of a text file containing the current live Net Liquidation Value of a brokerage accountÂ· OrdersTemplate - path\name of CSV order list template fileÂ· RandomSeed - provides a way to use the same sequence of random numbers every time a script is runÂ· ReportContent - specify which content items to include in summary reportsÂ· ReportsFolder - path of folder in which Test Summary Reports are createÂ· ResultsFile - path\name of RTR file to open or create before running a testÂ· RiskFreeRateSym - symbol of data series to store in the test statistics for later use when calculating SharpeÂ· SaveChartsTo - path of folder in which to automatically save a chart for every row of the scanÂ· SavePositionsAs - path\name of CSV file to create at end of a test to list open positionsÂ· SaveScanAs - path\name of CSV file to create and write scan output toÂ· SaveStatsAs - path\name of CSV file to create and write stats details toÂ· SaveTestListAs - path\name of CSV file to create with the list of test results as they appear in the results windowÂ· SaveTradesAs - path\name of CSV file to create and write the trade list toÂ· SaveTradesType - format to use for SaveTradesAs output fileÂ· ScanNoDefCols - allows the default Date and Symbol columns to be optionally omittedÂ· ScanNoHeader - allows creation of a CSV file with no header rowÂ· ScanNoWindow - allows scanning directly to CSV without displaying the output in a windowÂ· SkipTestIf - allows tests to be skipped in multi-parameter optimizations (e.g. useless parameter combinations)Â· StartDate - first date of testÂ· SymChangeList - path\name of CSV file containing list of symbol changes to use when processing imported tradesÂ· TestName - give the test a name
237Â· TestOutput - additional output and actions during and after a testÂ· TestScanAllDates - allows TestScan to ouput rows for every date of a test, not just the last dateÂ· UseAvailableBars - allows simple averages and indicators to optionally be calculated with fewer bars than specified
17.17.3. Import Specification
All the information needed to import data for use in scans and tests.Â· Adjustment - Norgate data adjustment typeÂ· CIIFamily - Norgate corresponding industry index familyÂ· CIILevel - Norgate corresponding industry index levelÂ· Classification - Scheme to use when querying Norgate for sector and industryÂ· Constituency - Norgate index constituency symbol listÂ· CSVDateFmt - CSV date format (M/D/Y vs. D/M/Y if ambiguous)Â· CSVDelim - CSV column delimiterÂ· CSVFields - CSV field order (comma-separated list)Â· CSVFile - CSV data file path for for single-file importÂ· CSVNumFmt - CSV number separatorÂ· DataPath - CSV or MetaStock data folder locationÂ· DataSource - data source nameÂ· EndDate - latest end dateÂ· EventListFile - event list file pathÂ· ExcludeIf - import filter formula (exclude symbol if true)Â· ExcludeList - excluded symbol list or file pathÂ· Fundamentals - Norgate current fundamental item listÂ· KeepAdjusted - keep all bar values split-adjusted in the data fileÂ· KeepNonIncluded - keep all symbols found in local file data pathÂ· KeepRedundant - keep redundant symbols for the same companyÂ· IncludeList - included symbol list or file pathÂ· LogFile - path\name of import log file to createÂ· NoWeekends - remove weekend barsÂ· Padding - type of padding (if any) to use for missing barsÂ· RemoveLatest - removes global latest bar from any symbol that has itÂ· SaveAs - path\name of imported data (.RTD) file to saveÂ· StartDate - earliest start dateÂ· SymInfoFile - symbol information file pathÂ· Update - Norgate data update request
23817.17.4. Strategy Elements
All the elements of a trading strategy definition.Â· Allocation - dollars allocated to this strategyÂ· AllowMissingBar - allow backtests to trade and orders to be generated after missing bars Â· AllowNoVolume - allow entry and exit transactions on zero-volume days (typically padding bars)Â· Ambiguity - assumption to use when sequence of entry/target/stop is unknowableÂ· BarSize - strategy-specific timeframeÂ· CalendarSym - symbol to use as the market date list for this strategyÂ· CashInOut - daily deposit and/or withdrawal specification by formula (excluded from backtest stats)Â· CashList - CSV file with list of specific deposit and/or withdrawal amounts (excluded from backtest stats)Â· Category - position category value for use with MaxCatExp, MaxCatInv, and MaxSameCatÂ· CloseSlip - slippage for at-close market transactionsÂ· Commission - commission per entry or exit transaction in dollarsÂ· Compounded - optionally overrides the automatically-determined S.Compounded settingÂ· DebugEntry - log output from a running test at EntrySetup evaluation timeÂ· DebugExit - log output from a running test at ExitRule evaluation timeÂ· DebugTargetStop - log output from running a test at ExitLimit / ExitStop evaluation timeÂ· DynamicSizing - determines whether strategy operates in a special dynamic sizing modeÂ· EntryLimit - price to use when entering a position with a limit orderÂ· EntryScore - ranking value for entry-time constraints (does not impact setup selection)Â· EntrySetup - true/false condition for whether a stock is a setup this periodÂ· EntrySkip - condition for whether to skip an entry (does not impact setup selection)Â· EntryStop - price to use when entering a position with a stop orderÂ· EntryTime - logical time of day at which positions are to be entered (typically next open)Â· EntryTradeValue - calculates a value to store in T.ValueIn item in the trade list record for this entryÂ· ExitLimit - price to use when exiting a position with a limit orderÂ· ExitLimitQty - share or contract quantity for partial limit-price exitsÂ· ExitLimitTime - exit limit execution timeÂ· ExitQty - share or contract quantity for partial at-market exitsÂ· ExitRule - true/false condition for whether to exit a positionÂ· ExitStop - price to use when exiting a position with a stop orderÂ· ExitStopQty - share or contract quantity for partial stop-price exitsÂ· ExitStopTime - exit stop execution timeÂ· ExitTime - logical time of day at which positions are to be conditionally exited (typically next 
239open)Â· ExitTradeValue - calculates a value to store in T.ValueOut item in the trade list record for this exitÂ· FeesInOut - daily deposit and/or withdrawal specification by formula (included in backtest stats)Â· FeesList - CSV file with list of specific deposit and/or withdrawal amounts (included in backtest stats)Â· FuturesMargin - dollar margin required to open a futures positionÂ· GreedyScoring - determines whether strategy uses a special variant of the setup selection processÂ· IgnoreDividends - exclude dividends from trade and test P/L calculationsÂ· LimitExtra - extra excursion beyond a limit price required to assume order was filledÂ· LimitSlip - slippage for at-limit-price transactions (typically 0)Â· MarkToMarket - whether strategy equity includes open-position mark-to-market valueÂ· MaxCatExp - maximum same-category percent investmentÂ· MaxCatInv - maximum same-category dollar investmentÂ· MaxEntries - maximum position entries to allow (rarely used)Â· MaxExposure - maximum percent investmentÂ· MaxInvested - maximum dollar investmentÂ· MaxLongExp - maximum long percent investmentÂ· MaxLongInv - maximum long dollar investmentÂ· MaxNetExp - maximum net long-short percent investmentÂ· MaxNetInv - maximum net long-short dollar investmentÂ· MaxNewExp - maximum new exposure per day Â· MaxNewInv - maximum new investment per day Â· MaxNewPos - maximum new positions per day Â· MaxPerTurn - how many setups per selection turn a strategy can addÂ· MaxPositions - maximum open positions Â· MaxSameCat - maximum same-category position countÂ· MaxSameSym - maximum same-symbol position countÂ· MaxSetups - maximum entry setups per day Â· MaxShortExp - maximum short percent investmentÂ· MaxShortInv - maximum short dollar investmentÂ· MaxSymExp - maximum same symbol percent investmentÂ· MaxSymInv - maximum same-symbol dollar investmentÂ· MinFreeCash - minimum free cash in the accountÂ· MinNetExp - minimum net long-short percent investmentÂ· MinNetInv - minimum net long-short dollar investmentÂ· OpenSlip - slippage  for at-open market transactionsÂ· OrdersMktAsLmtPct - allows generated market orders to optionally be converted to limit ordersÂ· OrderNote - string to add to the text of each order and as the "note" value in CSV order lists
240Â· OrdersFile - path/name a strategy-specific order list file to generateÂ· OrdersTemplate - path/name a strategy-specific orders template fileÂ· PriceRound - order and trade price rounding intervalÂ· QtyFinal - can be used to modify the quantity of an entry after setup ranking is completeÂ· QtyPrice - which price (order vs. fill) to use when calculating Quantity, trade fraction, and exposureÂ· QtyRound - position size rounding intervalÂ· QtyType - position size formula unit typeÂ· Quantity - position size to enter as shares, value, or percent depending on QtyTypeÂ· Reduce - whether to reduce position size rather than skip the entry due to capacity constraintsÂ· RollCost - total cost of each roll transaction while holding a futures positionÂ· SetupScore - ranking factor value used to prioritize entry setup selectionÂ· SetupSkip - entry setup skip condition Â· Side - strategy side constantÂ· Slippage - general-purpose slippage (price points)Â· StopSlip - slippage for at-stop-price transactionsÂ· StrategyScore - ranking factor value for strategies at each turn of the setup selection processÂ· TLAdjusted - whether quantities and prices in an imported trade list are split-adjustedÂ· TLDateFmt - whether dates in an imported trade list are DMY or MDYÂ· TLDelim - specifies the column delimiter in a tradelist fileÂ· TLFields - defines the column layout of an imported trade list CSV fileÂ· TLIgnoreRules - whether strategy formulas are ignored in Test mode trade list playbackÂ· TLNumFmt - specifies the number format in a tradelist fileÂ· TLStratName - strategy name within tradelist that maps to this script strategyÂ· TLTimeShift - number of hours to add or subtract to trade list entry dates/timesÂ· Tracker - whether to automatically create a tracking benchmark copy of a strategyÂ· TradeList - imported trade list file (CSV format)Â· Using - strategy/benchmark/template to inherit from
17.17.5. Bar Data Values
Refer to the current bar in a scan or backtest. The value[offset] syntax can be used to refer to previous bars. Â· BarDate - date of the current barÂ· BarNum - number of this bar from start of dataÂ· BarsLeft - number of bars remaining before the end of dataÂ· Close or C - bar close priceÂ· Day - day numberÂ· DayOfWeek - day of week (Monday is 1)
241Â· DayOfYear - day of yearÂ· Dividend - dividend amount ($/share)Â· EndOfMonth - true if next bar will end in a different month than this oneÂ· EndOfQuarter - true if next bar will end in a different quarter than this oneÂ· EndOfWeek - true if next bar will end in a different week than this oneÂ· EndOfYear - true if next bar will end in a different year than this oneÂ· Event - user-defined value from Event List fileÂ· Extra - bar extra value from CSV importÂ· FunBar - relative bar number within a multi-bar function calculationÂ· High or H - bar high priceÂ· InXXX - index constituency flag (Norgate) as set during importÂ· Low or L - bar low priceÂ· Month - month numberÂ· NextOpen - next bar open priceÂ· Open or O - bar open priceÂ· Range or R - bar intraday rangeÂ· Split - bar split factor (unadjusted / adjusted)Â· TrueRange or TR - bar range including prior closeÂ· Volume or V - bar volumeÂ· Week - week of yearÂ· Year - year number
17.17.6. Indicator Functions
Calculate specific technical indicators using data relative to the current bar. The indicator()[offset] syntax can be used to calculate indicators relative to previous bars. Any parameter of an indicator, as well as the offset (if provided) can be a literal number, a single value, or a formula. Â· ADX - Wilder's average directional indexÂ· ATR - Wilder's average true rangeÂ· BBBot - Bollinger band bottomÂ· BBPct - Bollinger band percent (%B)Â· BBTop - Bollinger band topÂ· BBTrend - Bollinger band trendÂ· BBWidth - Bollinger band widthÂ· CCI - commodity channel indexÂ· CRSI - Connors RSI indicatorÂ· HVOL - historical volatilityÂ· KBBot - Keltner band bottomÂ· KBTop - Keltner band top
242Â· MACD - MACD = EMA(C,len1) - EMA(C,len2)Â· MACDH - MACDH = MACD(len1,len2) - MACDS(len1, len2, len3)Â· MACDS - MACDS = MACD(len1,len2) - EMA(MACD(len1,len2),len3)Â· MDI - Wilder's negative directional indexÂ· OBV - on balance volumeÂ· PDI - Wilder's positive directional indexÂ· RRSI - reverse RSI (price required for RSI to reach level)Â· RSI - Wilder's relative strength indexÂ· SAR - Wilder's parabolic stop and reverseÂ· SigSpike - Grimes' Sigma Spike indicatorÂ· STOC - stochasticsÂ· SuperTrend - Olivier Seban's SuperTrend indicator
17.17.7. Multi-Bar Functions
Calculate any expression across multiple bars of any data series going back in time from the current bar. To start at an earlier bar, use the function()[offset] syntax. Any parameter of a function, as well as the offset (if provided) can be a literal number, a single value, or a formula.Â· AEMA - adaptive exponential moving averageÂ· AESD - adaptive exponential standard deviationÂ· BBBotF - Bollinger band bottom as a functionÂ· BBPctF - Bollinger band percent (%B) as a functionÂ· BBTopF - Bollinger band top as a functionÂ· BBTrendF - Bollinger band trend as a functionÂ· BBWidthF - Bollinger band width as a functionÂ· Correl - correlation of two seriesÂ· CorrelAvg - average correlation of a stock to a group of stocksÂ· CorrelMed - median correlation of a stock to a group of stocksÂ· CorrelMin - lowest correlation of a stock to a group of stocksÂ· CorrelMinSym - symbol of stock with lowest correlation to the current stockÂ· CorrelMax - highest correlation of a stock to a group of stocksÂ· CorrelMaxSym - symbol of stock with highest correlation to the current stockÂ· CountTrue - count of all bars for which expression was trueÂ· DEMA - double exponential moving averageÂ· EMA or XAvg - exponential moving averageÂ· ESD - exponential standard deviationÂ· HMA or HAvg - Hull moving averageÂ· Highest or HHV - highest valueÂ· KAMA - Kaufman adaptive moving averate
243Â· Kurtosis - sample kurtosisÂ· LinReg - linear regressionÂ· Lowest or LLV - lowest valueÂ· MA or Avg - simple moving averageÂ· Median - median of valuesÂ· Peak - value of nth most recent peak followed by an n% drop (does not look ahead)Â· PeakBars - count of bars since nth such PeakÂ· PercentRank - percent rank among valuesÂ· PercentRankN - value with nth percent rankÂ· Product - product of valuesÂ· Rank - numeric rank among valuesÂ· RankN - value with nth numeric rankÂ· ROC or PctChg - %gain/lossÂ· RsiF - RSI as a functionÂ· SarF - SAR as a functionÂ· Sequence - check for a sequence of conditions within a specific number of barsÂ· SinceHigh - bars since highest valueÂ· SinceLow - bars since lowest valueÂ· SinceTrue - bars since expression was true (0 if now, -1 if never)Â· Skewness - sample skewnessÂ· Slope - slope of linear regressionÂ· Spearman - Spearman's Rank CorrelationÂ· StdDev - standard deviationÂ· StdErr - standard error of predicted vs actual values in a regressionÂ· Sum - sum of valuesÂ· SumSince - sum of values since condition was trueÂ· SumSQ - sum of squared valuesÂ· TEMA - triple exponential moving averageÂ· Trough - value of nth most recent trough followed by an n% rise (does not look ahead)Â· TroughBars - count of bars since nth such TroughÂ· TrueInRow - count of bars in a row for which expression was trueÂ· UntilTrue - bars until expression will be true (0 if now, -1 if never)Â· VWMA - volume weighted moving averageÂ· WhenTrue - value when expression was true (or will be true if count < 0)Â· WMA or WAvg - weighted moving averageÂ· YInt - y-intercept of linear regression
17.17.8. Cross-Sectional Functions
244For use in the Data section to tag a data item as a cross-sectional function. Normally, a data formula is calculated by going back in time from the current bar for the given symbol. Cross-sectional items are instead calculated by going across all symbols on the given date. One use of cross-sectional data is to calculate ranking for a rotational strategy. Another is to generate market-breadth indicators. Â· #Avg - cross-sectional average valueÂ· #ByCII - groups values by corresponding industry index (?CII) for any cross-sectional functionÂ· #ByEcon - groups values by economic sector (?EconSect) for any cross-sectional functionÂ· #ByGroup - groups values by industry group (?IndGroup) for any cross-sectional functionÂ· #ByIndu - groups values by industry (?Industry) for any cross-sectional functionÂ· #ByListNum - groups values by Import IncludeList numberÂ· #ByMkt - groups values by futures market (ES, CL, etc.) for any cross-sectional functionÂ· #BySect - groups values by business sector (?Sector) for any cross-sectional functionÂ· #Count - cross-sectional count of valuesÂ· #DenseRank - cross-sectional numeric rank of unique valuesÂ· #Highest - cross-sectional highest valueÂ· #Lowest - cross-sectional lowest valueÂ· #Median - cross-sectional median valueÂ· #OnePerDate - calculate and store only one value per date (same value for all symbols)Â· #OnePerSym  - calculate and store only one value per symbol (same value for all dates)Â· #PercentRank - cross-sectional percent rankÂ· #Rank - cross-sectional numeric rankÂ· #SlowCalc - forces Data item to not use one-pass calculation (not actually cross-sectional)Â· #StdDev - cross-sectional standard deviationÂ· #Sum - cross-sectional sum of values
17.17.9. General-Purpose Functions
Perform general operations on single values. Any parameter of a function can be a literal number, a single value, or a formula. Â· Abs - absolute value of a numberÂ· ArcCos - determines which angle has the specified cosineÂ· ArcSin - determines which angle has the specified sineÂ· ArcTan - determines which angle has the specified tangentÂ· Assert - require a condition to be true for the script to continueÂ· Bound - limit the range of a valueÂ· CDF - cumulative distribution functionÂ· Combined - evaluate stats expression using combined strategy resultsÂ· Cosine - trigonometric cosine of a number of degreesÂ· Cross - value1[1] < value2[1] and value1 > value2
245Â· DataType - causes value to be treated as a specific type (price vs. volume)Â· Date - get the numeric date for a given year, month, dayÂ· DateBars - count of bars since (or until) a specific dateÂ· Days - number of calendar days between two datesÂ· DebugEval - stop script execution and log the details of a strategy formula's evaluation when a condition is metÂ· Exp - exponential function (e^x)Â· Extern - evaluate expression for a different stock/contract or strategyÂ· ICDF - inverse cumulative distribution functionÂ· IF - conditional branchÂ· InSet - whether a value is in a specific set of valuesÂ· IsNan - true if value can't be evaluated, false if it canÂ· Item - refer to a Data or Library item by nameÂ· Log - natural logarithm of a numberÂ· Logit - inverse logistic functionÂ· Max - largest of a group of valuesÂ· MaxN - Nth largest of a group of valuesÂ· Min - smallest of a group of valuesÂ· MinN - Nth smallest of a group of valuesÂ· NoNan - evaluate an expression with no possibility of a nan (not a number) resultÂ· NthOfMonth - whether current bar date is nth specific weekday of current monthÂ· Random - random number from min to max rounded to stepÂ· Reason - return both a value and a string for use in e.g. ExitLimitÂ· Rescale - map a value from one scale to anotherÂ· Round - round value to nearest stepÂ· Select - multi-part conditional branchÂ· Sign - sign of a number (1 or -1)Â· Sine - trigonometric sine of a number of degreesÂ· Sqr - square root of a numberÂ· StratRef - find the number of a given strategy, and/or allow dynamic Extern strategy referencesÂ· Switch - value switch functionÂ· SymRef - find the number of a given symbol, and/or allow dynamic Extern symbol referencesÂ· Tangent - trigonometric tangent of a number of degreesÂ· TanH - hyberbolic tangent of a numberÂ· TargetPrice - calculate the value of tomorrow's close that would cause an indicator to reach a specific levelÂ· Text - literal text for scan output, with optional embedded numeric valuesÂ· This - anchored term in multi-bar functionÂ· Top - top N digits of a number
24617.17.10. String Functions
These functions operate on string values. Some of them return strings and others return numeric values.Â· Find - find a string within another string and return its offsetÂ· Format - embed numeric or string values within a string using formatting codesÂ· FormatDate - convert a date to a string in any formatÂ· GetField - extract a delimited substring from a stringÂ· Left - get the left end of a stringÂ· Length - get the number of characters in a stringÂ· Match - see if a string matches a patternÂ· Mid - extract part of a stringÂ· Replace - replace text wherever it is found in a stringÂ· Right - get the right end of a stringÂ· ToDate - parse a string and return a date valueÂ· ToLower - convert a string to lowercaseÂ· ToNum - find a number within a stringÂ· ToUpper - convert a string to uppercase
17.17.11. Stock/Contract Information
Information about the current stock in a test or scan.Â· ?CII - corresponding industry index symbol stringÂ· ?Currency - currency in which security tradesÂ· ?Domicile - country name stringÂ· ?Exchange - exchange name stringÂ· ?EconSect - economic sector name stringÂ· ?EquityType - security equity type (Common, Unit, etc.)Â· ?IndGroup - industry group name stringÂ· ?Industry - industry name stringÂ· ?ListingType - security listing type (Primary, ADR, etc.)Â· ?Name - security/company name stringÂ· ?ReportingCurrency - currency in which security reports earningsÂ· ?Sector - business sector name stringÂ· ?Symbol - security symbol stringÂ· ?Type - security type stringÂ· InfoID - Norgate Asset ID for this symbol
247Â· InfoExpiry - futures contract expiration dateÂ· InfoFloat - shares in circulationÂ· InfoGICS - Global Industry Classification Standard codeÂ· InfoMargin - futures contract current margin requirementÂ· InfoTRBC - Thomson Reuters Business Classification codeÂ· F.xxx / F.xxx.Date - Norgate current fundamental item value / date Â· FilterNum - which filter was passed in a multi-filter scanÂ· InList - whether the stock was part of a specific IncludeList during importÂ· ListNum - number of first IncludeList the stock was part of during importÂ· PointValue - futures contract point valueÂ· InfoShares - shares in existenceÂ· Symbol - current symbol codeÂ· TickSize - futures contract tick size
17.17.12. Current Position Information
Information about the current position in a test. Â· BarsHeld - age of current position in barsÂ· Category - category specified for current positionÂ· EntryDate - date on which current position was enteredÂ· FillFraction - equity fraction of current position at time of fillÂ· FillPrice - entry fill price of current positionÂ· FillPriceAvg - average fill price of current position if multiple positionsÂ· FillPriceMax - highest fill price of current position if multiple positionsÂ· FillPriceMin - lowest fill price of current position if multiple positionsÂ· FillQty - shares or contracts in current position at time of entryÂ· FillValue - dollar value of current position at time of fillÂ· FxRatio - foreign exchange currency ratio for this position on this dateÂ· IsExit - whether the formula being evaluated pertains to a position being exitedÂ· IsOrder - whether the current stock is a setup that was not skipped todayÂ· IsSetup - whether the current is a setup todayÂ· OrderRank - top-down order rank number for this position's entry across all strategiesÂ· OrderSum - evaluates a formula for each non-skipped setup and returns the sum valuesÂ· PrevExitLimit - previous exit limit price for use in trailing target calculationsÂ· PrevExitStop - previous exit stop price for use in trailing stop calculationsÂ· PositionSum - evaluates a formula for each open position and returns the sum of valuesÂ· SetupRank - rank number by SetupScore for this position when it was entered
248Â· SetupSum - evaluates a formula for each setup and returns the sum of valuesÂ· Shares or Contracts - number of shares or contracts in current positionÂ· TLValueIn - the ValueIn value for a position that originated from trade listÂ· TLValueOut - the ValueOut value for a position that originated from trade list
17.17.13. Current Strategy Information
Information about the current strategy in a test.
Â· ?Strategy - name of current strategyÂ· ?StratType - type of current strategyÂ· StratNum - ordinal number of current strategy in the scriptÂ· IsTracker - current strategy is an auto-created Tracker for another strategy
17.17.14. Test Statistics Arrays
Used in the special-purpose scripts results.rts and graphs.rts, and can also be used in strategy formulas. Similar to a bar fields in that these represent a series of values, one per date. Â· FunStat - ordinal number of a stat period within the calculation of a multi-bar functionÂ· S.Alloc - current allocation amountÂ· S.BPY - strategy bars per yearÂ· S.CashInOut - cumulative net cash in-out (excluded from backtest stats)Â· S.Comms - total commissions this periodÂ· S.Compounded - strategy compounding flagÂ· S.Date - date of the current stat periodÂ· S.DDBars - current drawdown durationÂ· S.DDDlr - current dollar drawdownÂ· S.DDPct - current percent drawdownÂ· S.Dividends - total dividends this periodÂ· S.Entries - count of positions entered this periodÂ· S.EntryOrders - number of entry orders that were placed this periodÂ· S.Equity - current equity amountÂ· S.Exits - count of positions exited this periodÂ· S.Exposure - total percent of allocation held overnight in open positionsÂ· S.FeesInOut - cumulative net fees in-out (included in backtest stats)Â· S.First - period number in which first strategy trade entry occurredÂ· S.FreeCash - current free cash balanceÂ· S.Interest - net interest received-paid this periodÂ· S.Invested - total dollar value held overnight in all open positionsÂ· S.LongExp - total percent of allocation held overnight in open long positions
249Â· S.LongInv - total dollar value held overnight in open long positionsÂ· S.LossAmt - dollar (or base currency) P&L of losing trades this periodÂ· S.LossBars - duration of losing trades this periodÂ· S.Losses - count of losing exits this periodÂ· S.LossPct - percent P&L of losing trades this period based on position sizeÂ· S.LossPctAlloc - percent P&L of losing trades this period based on allocationÂ· S.M2M - net mark-to-marketÂ· S.MAE - maximum adverse excursion (worst intraday drawdown)Â· S.MaxAlloc - highest allocation amountÂ· S.MaxDDBars - longest drawdown durationÂ· S.MaxDDDlr - largest dollar drawdownÂ· S.MaxDDPct - largest percent drawdownÂ· S.MaxEquity - highest equity amountÂ· S.MFE - maximum favorable excursion (best intraday runup)Â· S.MinAlloc - lowest allocation amountÂ· S.MinEquity - lowest equity amountÂ· S.NetDlr - dollar change in allocation value for this periodÂ· S.NetPct - percent change in allocation value for this periodÂ· S.NetFx - sum of net currency exchange rate change impact on trade profit or loss for this periodÂ· S.Number - number of current stat period in a testÂ· S.Positions - count of overnight open positionsÂ· S.RollCosts - total futures roll costs this periodÂ· S.Setups - total count of entry setups this periodÂ· S.ShortExp - total percent of allocation held overnight in open short positionsÂ· S.ShortInv - total dollar value held overnight in open short positionsÂ· S.Slips - total slippage this periodÂ· S.StartEquity - starting equity amountÂ· S.Stops - count of exits that were stops this periodÂ· S.Targets - count of exits that were targets this periodÂ· S.TradeBars - duration of all trades this periodÂ· S.TradeDlr - dollar P&L of all trades this periodÂ· S.TradePct - percent P&L of all trades this period based on position sizeÂ· S.TradePcAlloc - percent P&L of all trades this period based on allocationÂ· S.TWEQ - time-weighted equity valueÂ· S.Usage - total long+short dollars in intraday open positionsÂ· S.WinAmt - dollar (or base currency) P&L of winning trades this periodÂ· S.WinBars - duration of winning trades this periodÂ· S.WinPct - percent P&L of winning trades this period based on position size
250Â· S.WinPcAlloc - percent P&L of winning trades this period based on allocationÂ· S.Wins - count of winning exits this period
17.17.15. Trade Record Values
These items provide detailed information about each specific trade in a test. Â· T.Bars - trade duration (same-bar entry and exit is 0)Â· T.CommIn - entry commision ($)Â· T.CommOut - exit commision ($)Â· T.DateIn - date of trade entry (numeric yyyymmdd)Â· T.DateOut - date of trade exit (yyyymmdd)Â· T.Div - net dividend received or paid ($)Â· T.Fraction - fraction of allocation at trade entry time that was used as the position sizeÂ· T.FxIn - currency exchange rate on trade entry dateÂ· T.FxOut - currency exchange rate on trade exit dateÂ· T.Highest - highest high during trade Â· T.Lowest - lowest low during trade Â· T.NetFx - currency exchange rate change impact on trade profit or lossÂ· T.NetPct - net trade profit after commission and dividend, expressed as a fraction of entry position sizeÂ· T.Points - net points gained or lost ($/share)Â· T.PriceIn - trade entry price Â· T.PriceOut - trade exit price Â· T.Profit - net trade profit after commission and dividend, expressed in dollarsÂ· T.PtVal - point value of symbol of a tradeÂ· T.QtyIn - shares or contracts bought or shortedÂ· T.QtyOut - shares or contracts sold or coveredÂ· T.Reason - exit or skip reason codeÂ· T.Side - side of a trade (1=long, -1=short)Â· T.SlipIn - entry slippage ($)Â· T.SlipOut - exit slippage ($)Â· T.SplitIn - split factor (real / adj) at entry timeÂ· T.SplitOut - split factor (real / adj) at exit timeÂ· T.Strat - strategy number of a tradeÂ· T.TimeIn - trade entry time-of-day codeÂ· T.TimeOut - trade exit time-of-day codeÂ· T.ValueIn - value calculated by EntryTradeValue when position was enteredÂ· T.ValueOut - value calculated by ExitTradeValue when position was exitedThese syntax elements are used most often in the special-purpose script Trades.rts or in a substitute 
251Trades Section. They can also be used in Charts Section and the Trade Plot Options Dialog formula. As well, a Strategy can use these items to refer to Past Trades as part of its trading logic.
17.17.16. Trade Statistics Functions
These functions can be used in Results and/or Strategy formulas to drill down into the list of trades from the current test and calculate a few basic statistics about them. Unlike the Indicator and Multi-Bar functions, the optional Count argument in these functions is a count of closed trades, not a count of bars or dates. If the optional third argument Symbol is specified, Count applies to closed trades for that symbol.Here are some example use cases:
Most often the items that you'll want to reference within these formulas will be Trade Record Values. When called from a Strategy Element formula, Bar Data Values can also be referenced. When called from a Results Section formula, only the Trade Record Values are available.If you need to reference a trade-specific data value such as an ATR indicator, you can calculate it during the test using EntryTradeValue or ExitTradeValue and then access it for the formulas below using T.ValueIn or T.ValueOut.The following trade statistics functions are provided:Â· TradeStatAvg - the average of trade record values for the most recent N trades or for all tradesÂ· TradeStatMax - the largest  of trade record values for the most recent N trades or for all tradesÂ· TradeStatMin - the smallest  of trade record values for the most recent N trades or for all tradesÂ· TradeStatStdDev - the standard deviation of trade record values for the most recent N trades or for all tradesÂ· TradeStatSum - the sum of trade record values for the most recent N trades or for all trades
17.18. Syntax Element Details
All the elements of the RealTest Script Language syntax are listed here in alphabetical order, each with a detailed description of its purpose and usage.
17.18.1. #Avg
CategoryCross-Sectional FunctionsDescription
252For each date, evaluates a formula and calculates the average value for all symbols on that date.Example
17.18.2. #ByCII
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of stocks that share the same corresponding industry indexExample
Ranks $SPX constituents separately by Norgate corresponding industry index. NotesSee also ?CII, CIIFamily, and CIILevel.See the cii_rotate.rts sample script for a complete example.
17.18.3. #ByEcon
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of stocks that share the same economic sector nameExample
Calculates the average 100-bar ROC of all stocks in this economic sector and stores it as "EconROC" for each stock. NotesRequires data with ?EconSect names in each stock record.Norgate provides these automatically -- use Classification to specify which scheme to request at Import time.For other data sources you would need to provide them via a SymInfo file.
17.18.4. #ByGroup
CategoryCross-Sectional Functions
253DescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of stocks that share the same industry group nameExample
Calculates the average 100-bar ROC for all stocks in this industry group and stores it as "GroupROC" for each stock.NotesRequires data with ?IndGroup names in each stock record.Norgate provides these automatically -- use Classification to specify which scheme to request at Import time.For other data sources you would need to provide them via a SymInfo file.
17.18.5. #ByIndu
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of stocks that share the same industry nameExample
Calculates the average 100-bar ROC for all stocks in this industry and stores it as "InduROC" for each stock.NotesRequires data with ?Industry names in each stock record.Norgate provides these automatically -- use Classification to specify which scheme to request at Import time.For other data sources you would need to provide them via a SymInfo file.
17.18.6. #ByListNum
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for the stocks from each separate IncludeListExample
Counts the number of stocks in the same IncludeList as the current stock.
254NotesThe ListNum of a symbol is the number of the first IncludeList that it appears in. The above example is therefore only useful when each IncludeList contains unique symbols. The secondary cross-sectional ranking functions all work this way. For example a stock cannot belong to more than one sector or industry.
17.18.7. #ByMkt
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of individual futures contracts within the same market.Example
Rather than ranking all symbols in the data file by volume, each market-specific subset is ranked separately.Having defined this data item, you could then simply refer to MktRank for the current symbol to see if it's the current highest-volume contract in its market.See the example script futures_volume_rank.rts for a complete implementation of this.Note that this mechanism only works with Norgate futures data, or with data that uses an identical naming convention. See Special Syntax for Individual Futures Contracts for additional details.
17.18.8. #BySect
CategoryCross-Sectional FunctionsDescriptionA secondary cross-sectional function, which requests that the primary function be calculated separately for each group of stocks that share the same business sector nameExample
Calculates the average 100-bar ROC of all stocks in this sector and stores it as "SectROC" for each stock. NotesRequires data with ?Sector names in each stock record.Norgate provides these automatically -- use Classification to specify which scheme to request at Import time.For other data sources you would need to provide them via a SymInfo file.
17.18.9. #Count
255CategoryCross-Sectional FunctionsDescriptionFor each date, calculates the count of symbols for which a formula can be evaluated on that date.Example
NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the count.
17.18.10. #DenseRank
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and then calculates the dense rank of each symbol's value among all symbols on that date. Lowest rank (1) means highest value. Identical values get the same rank number.Example
This first calculates a sector score as the average 20-day return of the symbols in that sector. All symbols in the same sector will have the same score. #DenseRank is then used to assign sector ranks to each symbol starting with 1 for the top sector, 2 for the next sector, etc. This makes it possible to determine e.g. the top stock from each of the top 5 sectors using a custom scoring factor.NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the ranking list (reducing the total count) and its rank value would be nan as well.If the formula result is the same for two symbols then they both get the same rank number. Use #Rank if you want every symbol to have a unique rank number.
17.18.11. #Highest
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and calculates the highest (largest) value for all symbols on that date.
256Example
17.18.12. #Lowest
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and calculates the lowest (smallest) value for all symbols on that date.Example
17.18.13. #Median
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and calculates the median value for all symbols on that date.Example
NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the count from which the median is derived.
17.18.14. #OnePerDate
CategoryCross-Sectional FunctionsDescriptionEvaluate this Data or TestData formula only once per date and return this value for any stock that references the itemNotesThis is most applicable to something like Extern($SPY, C > MA(C,200)) where the result will be the 
257same for all symbols.Prior to release 2.0.26.1 RealTest would nevertheless evaluate that same formula redundantly for every date of every symbol, and waste memory storing all these redundant values.For this specific example RealTest now automatically applies #OnePerDate even if not specified. Add this tag explicitly at the start of any formula to enforce this behavior.See also #OnePerSym.Add both #OnePerDate and #OnePerSym to calculate and store only a single value for all bars of all stocks (this is done automatically for constants and constant expressions).
17.18.15. #OnePerSym
CategoryCross-Sectional FunctionsDescriptionEvaluate this Data or TestData formula only once per symbol and return this same value for all bars.NotesThis is most applicable to something like Top(InfoTRBC, 4) where the result will be the same for all symbols.Prior to release 2.0.26.1 RealTest would nevertheless evaluate that same formula redundantly for every date of every symbol, and waste memory storing all these redundant values.For this specific example RealTest now automatically applies #OnePerSym even if not specified. Add this tag explicitly at the start of any formula if to enforce this behavior.See also #OnePerDate.Add both #OnePerDate and #OnePerSym to calculate and store only a single value for all bars of all stocks (this is done automatically for constants and constant expressions).
17.18.16. #PercentRank
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and then calculates the percent rank of each symbol's value among all symbols on that date.NotesThe largest value will have a percent rank of 100, the lowest value 0, and the others will be distributed evenly between those extremes.Example
NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the ranking list (reducing the total count) and its rank value would be nan as well.
25817.18.17. #Rank
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and then calculates the rank of each symbol's value among all symbols on that date. Lowest rank (1) means highest value. Identical values get different rank numbers.Example
NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the ranking list (reducing the total count) and its rank value would be nan as well.If the formula result is the same for two symbols then the one that comes first alphabetically gets the lower rank number. Use #DenseRank if you want identical values to get the same rank number.
17.18.18. #SlowCalc
CategoryCross-Sectional FunctionsDescription#SlowCalc is a special Data Section tag that looks like a cross-sectional function name but is not one.Specifying #SlowCalc at the beginning of a Data formula tells RealTest to NOT use the faster one-pass formula calculation mode for this formula.If you have a Data formula that you suspect may be calculating incorrect values, especially around bars with stock splits, try adding this tag to the start of the formula and recalculating it. If the output changes, keep the tag in place, otherwise remove it so the faster calculation speed can remain in use.See also Split Handling, particularly the example "exponential slope" calculation.
17.18.19. #StdDev
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and then calculates the standard deviation of values among all symbols on that date.Example
259NotesIf the formula result is nan (not a number -- unable to calculate) then that stock is not included in the count that is used in the standard deviation calculation.
17.18.20. #Sum
CategoryCross-Sectional FunctionsDescriptionFor each date, evaluates a formula and calculates the sum of values for all symbols on that date.Example
17.18.21. ?CII
CategoryStock/Contract InformationDescriptionSymbol of the corresponding industry index (CII) of the current securityNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.22. ?Currency
CategoryStock/Contract InformationDescriptionName of the currency that the security trades inNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.23. ?Domicile
CategoryStock/Contract InformationDescription
260Name of the country of origin (domicile) of the securityNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.24. ?EconSect
CategoryStock/Contract InformationDescriptionName of the economic sector of the security (TRBC or GICS column 1)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.This value is also used for two-level Data item ranking when #Rank #ByEcon is specified.Use Classification to specify which scheme to request at Import time.
17.18.25. ?EndDate
CategoryGeneralDescriptionThe EndDate setting value of the current script being runNotesThe date is returned as both a number (yyyymmdd) and a string (formatted).For example Days(?StartDate, ?EndDate) can be used to count the days of the current test.If a script includes run-mode-specific Settings Sections, the return value will reflect the setting from the section corresponding with the mode the script is running in. For example, if ScanSettings has EndDate: 2024-01-01 and TestSettings has EndDate: 2020-01-01, ?EndDate will be return the former if the script was run by pressing Scan, or the latter if the script was run by pressing Test.If there is no mode-specific EndDate setting for the current run mode, the value from Settings is used and returned. If there is no Settings StartDate either, the first date from the Settings Panel is used.
17.18.26. ?EquityType
CategoryStock/Contract InformationDescriptionEquity type of the security (Common/Ordinary, Unit, etc.)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
26117.18.27. ?Exchange
CategoryStock/Contract InformationDescriptionName of the exchange that the security trades onNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.28. ?IndGroup
CategoryStock/Contract InformationDescriptionName of the industry group of the security (TRBC or GICS column 3)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.This value is also used for two-level Data item ranking when #Rank #ByGroup is specified.Use Classification to specify which scheme to request at Import time.
17.18.29. ?Industry
CategoryStock/Contract InformationDescriptionName of the industry of the security (TRBC or GICS column 4)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.This value is also used for two-level Data item ranking when #Rank #ByIndu is specified.Use Classification to specify which scheme to request at Import time.
17.18.30. ?ListingType
CategoryStock/Contract InformationDescriptionListing type of the security (Primary, ADR, etc.)Notes
262The return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.31. ?LocalTime
CategoryGeneralDescriptionReturns the current local date and timeNotesWhen used as a String the format is yyyy-mm-dd hh:mm:ss, e.g. "2023-12-21 14:40:05"When used as a number the value is yyyymmdd.hhmmss, e.g. 20231221.144005
17.18.32. ?Name
CategoryStock/Contract InformationDescriptionName of the security (company or security name)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.33. ?ReportingCurrency
CategoryStock/Contract InformationDescriptionName of the currency that the security reports earnings inNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.
17.18.34. ?RunMode
CategoryGeneralDescriptionName of the mode in which the script is being runNotesThe return value is a string containing one of these run-mode names:
26317.18.35. ?ScriptName
CategoryGeneralDescriptionName of the script being runNotesThe string returned is the name of the current script with neither the full folder path nor the .RTS extension. For example ?ScriptName would be "mr_sample" for c:\RealTest\Scripts\Examples\mr_sample.rts.
17.18.36. ?Sector
CategoryStock/Contract InformationDescriptionName of the business sector of the security (TRBC or GICS column 2)NotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.This value is also used for two-level Data item ranking when #Rank #BySect is specified.Use Classification to specify which scheme to request at Import time.
17.18.37. ?Strategy
CategoryCurrent Strategy InformationDescriptionName of the current strategyNotesThe return value is a string containing the full name of the current strategy.See also StratNum, which returns the current strategy's number, and StratRef, which allows dynamic strategy lookup.
17.18.38. ?StratType
CategoryCurrent Strategy Information
264DescriptionType of the current strategyNotesThe return value is a string containing the type of the current strategy.Possible return values are:Â· Benchmark - the strategy is a BenchmarkÂ· StatsGroup - the strategy is a StatsGroup or CombinedÂ· Strategy - the strategy is a regular Strategy
17.18.39. ?StartDate
CategoryGeneralDescriptionThe StartDate setting value of the current script being runNotesThe date is returned as both a number (yyyymmdd) and a string (formatted).For example Days(?StartDate, ?EndDate) can be used to count the days of the current test.If a script includes run-mode-specific Settings Sections, the return value will reflect the setting from the section corresponding with the mode the script is running in. For example, if ScanSettings has StartDate: 2024-01-01 and TestSettings has StartDate: 2020-01-01, ?StartDate will be return the former if the script was run by pressing Scan, or the latter if the script was run by pressing Test.If there is no mode-specific StartDate setting for the current run mode, the value from Settings is used and returned. If there is no Settings: EndDate either, the first date from the Settings Panel is used.
17.18.40. ?Symbol
CategoryStock/Contract InformationDescriptionSymbol of the current securityNotesThe return value is a string which can be used in the Scan or Trades section or as input to any String Function.See also Symbol, which returns the current symbol as a constant Symbol Reference, and SymRef, which allows dynamic symbol lookup.?Symbol = "MSFT" and Symbol = $MSFT would both accomplish the same purpose, but it is slightly more efficient to use symbol constants. Symbol constants also have the advantage of smart auto-complete when entering them.
17.18.41. ?Type
265CategoryStock/Contract InformationDescriptionType of the securityNotesWhen used in place of a formula, causes this text to be displayed in a column.Can only be used in the Scan or Trades section.
17.18.42. Abs
CategoryGeneral-Purpose FunctionsDescriptionAbsolute Value of a numberSyntaxAbs(value)Parametersvalue - formula
17.18.43. AccountSize
CategorySettingsDescriptionDollars in the simulated account at the beginning of each backtestNotesIf AccountSize is not specified in a script then the value from the Settings Panel will be used.
17.18.44. AccountType
CategorySettingsDescriptionSpecifies the type of account being modeled.ChoicesCashSameDay - model a cash account where sale proceeds can be reinvested the same dayCashNextDay - model a cash account where sale proceeds can't be reinvested until the next dayMargin - model a margin account (default)Notes
266This setting affects backtests and order generation in the following ways:Â· In the Margin account model, MinFreeCash defaults to unlimited (can become negative) while in either Cash model, MinFreeCash defaults to 0 (can't become negative).Â· In the Margin and CashSameDay models, proceeds from sales made today can be used immediately to buy other positions, while in the CashNextDay model there is a one-day delay before those proceeds can be used.
17.18.45. Adjustment
CategoryImport SpecificationDescriptionPrice data adjustment settingSyntaxAdjustment: choiceChoicesTotalReturn - all types of dividends are converted to splitsCapitalSpecial - corporate restructure events (mergers etc.) and special dividends are converted to splitsCapital -  (default) no dividend types are converted to splitsNone - adjustment information is not imported (not recommended)NotesRealTest receives adjusted and unadjusted prices along with split and dividend histories from Norgate and some other sources. Imported data is then stored and used in unadjusted form so that each price reference on a given date reflects the actual price that was traded on that date. When necessary for multi-bar indicator calculation or lookback comparisons, on-the-fly adjustment is performed.See Split Handling for additional details about how this works.General best practice is to use the default Capital in most cases. Here are the trade-offs for each choice:Â· TotalReturn converts all dividends to splits. This makes trades held across an ex-dividend date look like their share quantities were adjusted when they actually would not have been.Â· CapitalSpecial does the above for special dividends including corporate restructuring events while correctly simulating payout of ordinary dividends.Â· Capital only treats actual stock splits as splits while simulating payout as a dividend of every other adjustment event. This introduces an occasional large price gap (with corresponding simulated dividend payout) around corporate restructuring events.
17.18.46. ADX
CategoryIndicator Functions
267DescriptionWilder's Average Directional IndexSyntaxADX(len)Parameterslen - lookback periodNotesCalculation uses the original Welles Wilder formula. Wilder's exponential smoothing is equivalent to using 2*len-1 in a regular exponential moving average.This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.47. AEMA
CategoryMulti-Bar FunctionsDescriptionAdaptive Exponential Moving AverageSyntaxAEMA(expr, factor)Parametersexpr - data series formulafactor - weighting factor formulaNotesAn AEMA is an EMA that supports a variable weighting factor. In other words, an EMA is an AEMA with a constant weight.The count of an EMA becomes a weight factor using the formula factor = 2 / (count + 1).Conversely the factor of an AEMA can be converted to a EMA count using count = (2 - factor) / factor.In both cases the average series is created by repeatedly calculating newAverage = oldAverage + factor * (newValue - oldAverage).The key difference between the functions is that while the EMA count is evaluated only once before the series of values is calculated, the AEMA factor is reevaluated for every bar of the series, thus making it adaptive.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.48. AESD
CategoryMulti-Bar Functions
268DescriptionAdaptive Exponential Standard DeviationSyntaxAESD(expr, factor)Parametersexpr - data series formulafactor - weighting factor formulaNotesThis function calculates a standard deviation of values as an exponential series using a constant weighting factor represented as a bar count.As with the ESD function, the weighting factor is used both to calculate an exponential mean of values and one of squared differences.As with the AEMA function, the factor is equivalent to 2 / (count + 1) of an ESD and is reevaluated for every bar of the calculation, thus making it adaptive.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.49. Allocation
CategoryStrategy ElementsDescriptionDollars allocated to this strategyInputAny formula specifying a dollar amountNotesIn most scripts it is not necessary to specify Allocation.It is generally not recommended to use Allocation to specify the fraction of the account that a strategy should use. Instead apply the fraction via the Quantity formula when modeling combined compounding, or use StartPercent to specify an initial fraction when modeling strategies trading in separate accounts.See Asset Allocation and Position Sizing for an example of each of these alternatives.The default allocation is Combined(S.Equity) when no StartPercent is specified (all strategies in one account).Strategies that specify StartPercent have a default allocation of S.Equity (each strategy in its own account).Strategies that specify Compounded: False have a default allocation of S.StartEquity (maintain a constant dollar allocation).The S.Alloc variable is updated daily by evaluating the Allocation formula if specified or using its default value otherwise.S.Alloc is used implicitly in Quantity when QtyType is Percent.Quantity should refer to S.Alloc rather than S.Equity when using either of the other quantity types (Value or Shares).
269Allocation has no effect on the maximum investment level allowed for a strategy. Investment level limits are specified using MaxExposure and/or MaxInvested and/or MaxPositions.
17.18.50. AllowMissingBar
CategoryStrategy ElementsDescriptionWhether to allow backtests to enter and exit positions after missing barsInputTrue or False (default is False)NotesA "missing bar" is a bar that is absent in this stock while being present in most other stocks from the same exchange.Often these are caused by temporary "halt" conditions. Missing bars can also simply reflect days when there was no trading volume. (Unless Padding is specified, RealTest does not import zero-volume bars.)By default RealTest will not allow an entry or an exit in a backtest to occur on any bar for which the prior bar's date is not the prior date in the trading calendar of the exchange (the prior date of most other symbols). This models a daily process that only places orders for tomorrow for stocks that had trades today. Accordingly, RealTest won't generate orders after a missing bars by default either.If you want RealTest to simulate and generate orders even when the most recent bar is missing, specify AllowMissingBar: True in that Strategy definition.See also the general topic of Calendar Alignment and the MissingBars function, which can be used to count missing bars.
17.18.51. AllowNoVolume
CategoryStrategy ElementsDescriptionWhether to allow backtests to enter and exit positions on bars with zero volumeInputTrue or False (default is False)NotesMost data providers including Norgate do not provide bars for days on which there were no trades.The Padding setting AllMarketDays can be added to an Import definition to include those bars.Bars added as padding always have zero volume and zero price movement (Open, High, Low, Close are all equal to the prior close).By default RealTest will not allow an entry or an exit in a backtest to occur on such a bar, since in live trading there could have been no such transaction.If you have a use case that requires transactions on zero-volume bars, add AllowNoVolume: True to 
270your Strategy definition.
17.18.52. AllowSameName
CategorySettingsInputTrue or False (default is False)DescriptionIf True, RealTest will allows items in sections with user-defined names to be replaced by defining a new item with the same name.If False (the default), the parser shows an error message whenever the same name is used twice.NotesSee Combining Scripts for more information about this setting.
17.18.53. AlwaysImport
CategorySettingsInputTrue or False (default is False)DescriptionIf True, RealTest will always run an Import (if the script has defined one) when any Run mode is initiated, prior to running the script in the requested mode.If False (the default), RealTest only runs an Import when Import was the requested run mode.NotesIt is not advisable to leave this setting on True unless you have a specific need to do so. Importing data can be a time-consuming process. Doing so redundantly defeats the purpose of RealTest's local data file architecture.
17.18.54. Ambiguity
CategoryStrategy ElementsDescriptionSpecifies what assumptions to make when there is price sequence ambiguity in a testChoicesDefault - assume that if Close > Open then Low preceded High, or if Close < Open then High preceded Low (best guess)Stop - always exit at the stop price if that price was touched (most pessimistic) Target - always exit at the target (limit) price if that price was touched (most optimistic)Neither - do not exit if exit price cannot be determined with zero ambiguity (most strict)
271NotesThis constant specifies what RealTest should do in a trade where more than one outcome could occur within the same bar and where a smaller timeframe bar would be required to know for sure which outcome happened first.One example is a target and stop both being hit within a wide-range bar. Another is a limit order entry and target exit within a single bar. The "Default" (best guess) choice is used if Ambiguity is not specified, and in most situations this will provide the most realistic results.In order to see how often this setting is being applied, run your test with TestOutput: Log and then search the log file for the word "assuming".
17.18.55. ArcCos
CategoryGeneral-Purpose FunctionsDescriptionDetermines which angle has the specified CosineSyntaxArcCos(value)Parametersvalue - a cosine in the range of -1 to 1.NotesThe return value is expressed in degrees (0 to 180).To convert degrees to radians, divide by 57.2957795131.
17.18.56. ArcSin
CategoryGeneral-Purpose FunctionsDescriptionDetermines which angle has the specified SineSyntaxArcSin(value)Parametersvalue - a sine in the range of -1 to 1.NotesThe return value is expressed in degrees (-90 to 90).To convert degrees to radians, divide by 57.2957795131.
17.18.57. ArcTan
272CategoryGeneral-Purpose FunctionsDescriptionDetermines which angle has the specified TangentSyntaxArcTan(value)Parametersvalue - a tangentNotesThe return value is expressed in degrees (-90 to 90).To convert degrees to radians, divide by 57.2957795131.
17.18.58. Arg1-Arg9
CategoryLibrary SectionDescriptionSpecial variables that can be used within a Library formula to access the arguments that were passed to itNotesLibrary items can be referenced either with or without arguments. When referenced with arguments (so that the reference looks like a function call), the item formula can obtain the values passed in as arguments by using these numbered variables. Arg1 is the first (leftmost) argument, Arg2 the second one, and so on.Library function arguments can be either numbers or strings (or formulas that evaluate to either).Library arguments are "passed by value" (not "by reference"). For example myLibFunc(close) would first evaluate "close" to determine the current close, then pass it to the function.This implies that library functions that use arg1-arg9 should not attempt to pass these along to a multi-bar function, refer to them with a bar offset, etc. A that point they are constants, not arrays.
17.18.59. Assert
CategoryGeneral-Purpose FunctionsDescriptionRequire a condition to be true for the script to continueSyntaxAssert(condition, text {optional})
273Parameterscondition - formula specifying a conditiontext - formula specifying text to display in the popup messageNotesWhen the condition is true, the function does nothing.When the condition is false, a pop-up message appears:
The default text shows the assertion that failed and which formula, strategy, symbol, date and time the formula was being evaluated for.If the optional text parameter is provided that text is displayed in place of the above.The script can either be continued (Yes) or stopped (No) after the pop-up is dismissed.
17.18.60. ATR
CategoryIndicator FunctionsDescriptionWilder's Average True RangeSyntaxATR(len)Parameterslen - lookback periodNotesCalculation uses the original Welles Wilder formula. Wilder's exponential smoothing is equivalent to using 2*len-1 in a regular exponential moving average.This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
27417.18.61. BarDate
CategoryBar Data ValuesDescriptionDate of this barNotesReturns the current bar end date as a number in YYYYMMDD format.If the bar is of non-daily BarSize, then this will be the closing date of the bar.Use BarStart to get the opening date of the current bar.Negative offsets, e.g. BarDate[-5], can be legitimately used to obtain the date of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.62. BarNum
CategoryBar Data ValuesDescriptionOrdinal number of a bar within the data for that stock. The earliest bar is 1, next earliest is 2, etc.
17.18.63. BarsHeld
CategoryCurrent Position InformationDescriptionThe number of bars since this position was entered, not including the entry dayNotesFor daily bars, it is easiest to think of this as Nights Held.This will generally be used in the ExitRule formula to implement a Time Stop. For example, if you entered on Monday and want to exit on Friday, your ExitRule formula would be BarsHeld=4 (assuming there were no holidays that week). You are exiting the 4th trading day after your entry day.If used as Combined(BarsHeld) when multiple positions are open in the same symbol (whether due to pyramiding or multiple strategies), the oldest entry date (largest value of BarsHeld) for that symbol will be returned.See also EntryDate.
17.18.64. BarsLeft
Category
275Bar Data ValuesDescriptionThe number of bars remaining before the end of data for this symbolNotesBarsLeft is 0 for the last bar, 1 for the next-to-last bar, and so on.This can be used in the EntrySetup formula to avoid entering positions in stocks that will soon be delisted. RealTest will automatically exit any position that remains open on the last data date (or last date of a test) at the close of that bar, so it is not necessary to use BarsLeft unless you want to be sure to exit before the last date.BarsLeft can also be useful when modeling futures rollovers using individual contract data.
17.18.65. BarSize
CategorySettings or Strategy Elements or DataDescriptionSpecifies the default bar size (periodicity) for scans and/or tests, a strategy-specific bar size, or the bar size for a group of data items.NotesValid values are Daily, Weekly, Monthly, Quarterly, Yearly.If Settings BarSize is not specified in a script then the value from the Settings Panel will be used.See Bar Sizes and Multiple Timeframes for more information about how this works.
17.18.66. BarStart
CategoryBar Data ValuesDescriptionStart Date of this barNotesReturns the current bar start date as a number in YYYYMMDD format.Use BarDate to get the current bar end date.If the bar has daily BarSize, then BarDate and BarStart are the same.
17.18.67. BBBot
CategoryIndicator FunctionsDescriptionBollinger band bottomSyntax
276BBBot(len, mult)Parameterslen - lookback periodmult - number of standard deviationsNotesThis is equivalent to Avg(C, len) - (mult * StdDev(C, len)).To calculate BBBot for something other than Close use BBBotF.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.68. BBBotF
CategoryMulti-Bar FunctionsDescriptionBollinger band bottom as a functionSyntaxBBBotF(expr, len, mult)Parametersexpr - data series formulalen - lookback periodmult - number of standard deviationsNotesThe BBBot indicator always uses the series of closing prices for its calculations. This function makes it possible to calculate the Bollinger band bottom of any series of values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.69. BBPct
CategoryIndicator FunctionsDescriptionBollinger band percent (%B)SyntaxBBPct(len, mult)Parameterslen - lookback periodmult - number of standard deviationsNotes
277This indicator returns the position of Close relative to the Bollinger bands.This is equivalent to (Close - BBBot(len, mult)) / (BBTop(len, mult) - BBBot(len, mult)).The return value is:Â· >1 if close is above the top bandÂ· 1 if close equals the top bandÂ· 0.5 if close equals the moving averageÂ· 0 if close equals the bottom bandÂ· <0 if close is below the bottom bandTo calculate BBPct for something other than Close use BBPctF.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.70. BBPctF
CategoryMulti-Bar FunctionsDescriptionBollinger band percent (%B) as a functionSyntaxBBPctF(expr, len, mult)Parametersexpr - data series formulalen - lookback periodmult - number of standard deviationsNotesThe BBPct indicator always uses the series of closing prices for its calculations. This function makes it possible to calculate the %B of any series of values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.71. BBTop
CategoryIndicator FunctionsDescriptionBollinger band topSyntaxBBTop(len, mult)Parameterslen - lookback period
278mult - number of standard deviationsNotesThis is equivalent to Avg(C, len) + (mult * StdDev(C, len)).To calculate BBTop for something other than Close use BBTopF.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.72. BBTopF
CategoryMulti-Bar FunctionsDescriptionBollinger band top as a functionSyntaxBBTopF(expr, len, mult)Parametersexpr - data series formulalen - lookback periodmult - number of standard deviationsNotesThe BBTop indicator always uses the series of closing prices for its calculations. This function makes it possible to calculate the Bollinger band top of any series of values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.73. BBTrend
CategoryIndicator FunctionsDescriptionBollinger band trendSyntaxBBTrend(len1, len2, mult)Parameterslen1 - first lookback periodlen2 - second lookback periodmult - number of standard deviationsNotesThe BBTrend indicator is calculated as follows:lower = ABS(BBBot(len1, mult) - BBBot(len2, mult))upper = ABS(BBTop(len1, mult) - BBTop(len2, mult))
279BBTrend = (lower - upper) / Avg(C, len1)This indicator is intended to signal both strength and direction of trend.To calculate BBTrend for something other than Close use BBTrendF.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.74. BBTrendF
CategoryMulti-Bar FunctionsDescriptionBollinger band trend as a functionSyntaxBBTrendF(expr, len1, len2, mult)Parametersexpr - data series formulalen1 - first lookback periodlen2 - second lookback periodmult - number of standard deviationsNotesThe BBTrend indicator always uses the series of closing prices for its calculations. This function makes it possible to calculate the Bollinger band trend of any series of values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.75. BBWidth
CategoryIndicator FunctionsDescriptionBollinger band widthSyntaxBBWidth(len, mult)Parameterslen - lookback periodmult - number of standard deviationsNotesThis indicates the width of the Bollinger bands relative to the average price that they surround.This is equivalent to 100 * (BBTop(len, mult) - BBBot(len, mult)) / Avg(C, len).To calculate BBWidth for something other than Close use BBWidthF.This function supports one-pass calculation when used in the Data Section with a non-variable 
280count.
17.18.76. BBWidthF
CategoryMulti-Bar FunctionsDescriptionBollinger band width as a functionSyntaxBBWidthF(expr, len, mult)Parametersexpr - data series formulalen - lookback periodmult - number of standard deviationsNotesThe BBWidth indicator always uses the series of closing prices for its calculations. This function makes it possible to calculate the Bollinger band width of any series of values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.77. Benchmark
CategoryScript SectionsDescriptionDefines a benchmark strategyNotesSee Special Strategy Types for details.
17.18.78. Bound
CategoryGeneral-Purpose FunctionsDescriptionForce a value to be between a lower and upper limitSyntaxBound(value, low, high)Parametersvalue - formula specifying a value to bound
281low - formula specifying a lower boundary valuehigh - formula specifying an upper boundary value
17.18.79. CalendarSym
CategoryStrategy ElementsDescriptionSymbol to use as the market date list for this strategyInputAny symbol in the current data file (does not require an extra $)NotesCalendarSym is only needed when a multi-strategy script includes strategies for different countries or for markets with different trading calendars.An global date list is needed when evaluating formulas that don't have a specific symbol context, e.g. MaxPositions, MaxExposure, etc.The global date list includes every date that has a bar for any stock in the data file.Specifying CalendarSym replaces the default date list with a specific symbol's date list for this strategy only.Do not prefix the symbol with $ -- that is only required for symbol references within formulas.An example of the problem that this optional element solves:Â· it is Tuesday morning and Monday was a US holidayÂ· your data file includes the symbol AUDUSD which has a bar for MondayÂ· the global date list therefore includes Monday's dateÂ· your strategy uses a MaxPositions formula that varies depending on a US-index-based trend filterÂ· while trying to evaluate MaxPositions for Tuesday's trades, it sets the context to Monday's date, based on the global date listÂ· there is no Monday bar for US indices, so references to them return nanÂ· MaxPositions is therefore 0Adding e.g. CalendarSym: $SPX to the strategy would resolve this issue.(Importing with  Padding: AllMarketDays would also resolve it but there may be reasons you don't want to do that.)See also the general topic of Calendar Alignment.
17.18.80. CashInOut
CashInOutStrategy ElementsDescriptionSpecifies deposits and/or withdarawals to/from the current equity of a strategy by formulaInput
282Formula expression returning an amount in dollarsNotesThis formula is evaluated once per day at the beginning of the day, before any trading signals are processed. The resulting amount is added to the equity of the strategy. The formula should return a positive value for deposits or a negative value for withdrawals, or 0 on dates when neither occurs.The simplest way to use this formula in a multi-strategy system is to give it its own strategy, as in the examples below.To provide a list of specific dates and amounts, use CashList rather than CashInOut. Unlike FeesInOut, CashInOut is NOT included in backtest stats such as the annual return, max drawdown, and daily net percent gain or loss.ExamplesAdd $1,000 every month at the start of the month:CashInOut: if(Month <> Month[1], 1000, 0)Withdraw 40% of last year's net profit at the start of each year:CashInOut: if(Year[-1] > Year, -0.4 * max(0, Combined(Sum, S.NetDlr, S.BPY))), 0)See also the annual_taxes.rts example script.
17.18.81. CashIntPct
CategorySettingsDescriptionInterest rate received for positive daily excess cashNotesIf the settings also provide a RiskFreeRateSym then CashIntPct is added to the current daily interest rate as determined by today's value of the risk-free rate series. In this case, CashIntPct would typically be negative, e.g. -0.5 if your broker pays 0.5% less than the fed funds rate (with floor of zero).If RiskFreeRateSym is provided but CashIntPct is not provided or is 0 then no interest is received. You must specify a non-zero value of CashIntPct to include interest on excess cash in your backtests.If CashIntPct is provided when there is no RiskFreeRateSym then CashIntPct is simply a fixed annual interest rate.Daily net interest received or paid is added to combined S.Equity and therefore becomes part of the total return of the backtest.The stats series S.Interest can be used to graph or reference the cumulative net interest received or paid in the account.See also MarginIntPct which specifies the rate charged for negative excess cash (margin loan).
17.18.82. CashList
CashListStrategy ElementsDescription
283Specifies a CSV file that lists deposits and/or withdrawals to/from the current equity of a strategyInputPath to a CSV file with dates in the first column and amounts in the second columnNotesThe file can have any number of rows, and can have multiple rows for the same date.The header row is optional.Use positive amounts for deposits and negative amounts for withdrawals.Amounts for each date in a test are applied at the beginning of that day, before any trading signals are processed.If dates are weekend or holiday, they are applied to the next trading day.To specify deposits and withdrawals by formula, use CashInOut rather than CashList.ExampleCashList is most often used with strategies that use TradeList to play back live trades:
The CSV file would look like this (additional columns will be ignored):
17.18.83. Category (definition)
CategoryStrategy ElementsDescriptionAssigns a category value to a position at entry timeInputFormula expressionNotesThis formula is evaluated before the EntrySetup for each stock each day, so its value can be accessed in any other entry-related formula using the Category property.A typical usage, along with the MaxSameCat element, is to limit the number of simultaneous positions from the same sector or industry. When using Norgate data, either the TRBC or GICS  classification value for the current symbol can be referenced in the Category formula. Using TRBC along with the Top function is an especially convenient way to specify a category for this purpose. For example, Top(TRBC,2) is the economic sector, Top(TRBC,4) is the business sector,  Top(TRBC,6) is the industry group, and Top(TRBC,8) is 
284the specific industry.
17.18.84. Category (reference)
CategoryCurrent Position InformationDescriptionThe value of the Category strategy element formula for this positionNotesThis property can be referenced in any strategy element formula. It is most likely useful in EntrySetup, Quantity, or ExitRule.
17.18.85. CCI
CategoryIndicator FunctionsDescriptionCommodity Channel IndexSyntaxCCI(len)Parameterslen - lookback periodNotesFor the best description of this indicator, see its StockCharts ChartSchool page.
17.18.86. CDF
CategoryGeneral-Purpose FunctionsDescriptionCumulative Distribution FunctionSyntaxCDF(value)Parametersvalue - formulaNotesThe CDF calculates the probability that a random observation will be less than or equal to a certain value. By normalizing financial data to a range of 0 to 1, it enables consistent comparison across assets and periods, aiding in the creation of trading indicators.
28517.18.87. Charts
CategoryScript SectionsDescriptionChart indicator definitions NotesSee Charts Section and Candlestick/Bar Charts.
17.18.88. CIIFamily
CategoryImport SpecificationDescriptionNorgate corresponding industry index familySyntaxCIIFamily: choiceChoices$SPX - S&P 500 industry indices$SP1500 - S&P 1500 industry indices$XJO -ASX 200 industry indices$XKO - ASX 300 industry indicesNotesUsed in conjunction with CIILevel to add corresponding index references to each import stock symbol.Causes the relevant index symbols to be automatically added to the import as well.Automatically-added index symbols are placed in virtual ListNum = 99.The specific industry index for the current symbol can be referenced using Extern(&99, expression).
17.18.89. CIILevel
CategoryImport SpecificationDescriptionNorgate corresponding industry index levelSyntaxCIILevel: choiceChoices
286EconomicSector - use economic sector indicesIndustryGroup - use industry group indicesSpecificIndustry - use specific industry indicesSubIndustry - use sub-industry indicesNotesUsed in conjunction with CIIFamily to add corresponding index references to each import stock symbol.Causes the relevant index symbols to be automatically added to the import as well.Automatically-added index symbols are placed in virtual ListNum = 99.The specific industry index for the current symbol can be referenced using Extern(&99, expression).
17.18.90. Classification
CategoryImport SpecificationDescriptionName of the classification scheme to use when querying Norgate for each stock's sector and industry namesChoicesTRBC - use The Refinitive Business ClassificationGICS - use the Global Industry Classification StandardNotesFour classification names are imported for each stock: ?EconSect, ?Sector, ?IndGroup, and ?Industry. In each of the two schemes, the first four column values (see above links) are assigned to those names respectively.As well as for display purposes, these names are used when calculating two-level rankings e.g. #Rank #ByIndGroup factor.
17.18.91. Close or C
CategoryBar Data ValuesDescriptionCurrent bar closing price NotesEither Close or C can be used as the name of this value.
17.18.92. CloseSlip
CategoryStrategy Elements
287DescriptionSlippage amount, in points (dollars per share or contract), for each transaction that simulates a market order filling at the closeInputAny formula specifying dollars per share or contract (points)NotesDefines the amount of slippage to apply to each market-at-close transaction, in price points. CloseSlip is applied to any transaction that logically occurs at the close and not at a specified limit or stop price.If CloseSlip is not specified then Slippage is applied instead.
17.18.93. Combined (function)
CategoryGeneral-Purpose FunctionsDescriptionevaluate stats expression using combined strategy resultsSyntaxCombined(expression)Parametersexpression - formulaNotesThis function is intended for use with strategy-specific syntax elements such as S.Equity or Shares.
17.18.94. Combined (section)
CategoryScript SectionsDescriptionAllows definition of all-strategy combined constraints such as MaxExposure, MaxInvested, MaxPositions, etc.Notes.See Special Strategy Types for details.
17.18.95. CommCurrency
CategorySettingsDescriptionSpecifies how the Commission formula is interpreted in a multi-currency script.
288ChoicesInstrument - commission values are interpreted as being in the currency of the instrument being traded (default)Account - commission values are interpreted as being in the base currency of the accountNotesSome brokers, including IB (Interactive Brokers), charge trade commissions in the currency of the instrument being traded. Other brokers may charge commissions in the account's base currency. This setting lets you tell RealTest which way your broker does it.CommCurrency also determines how commission values in Imported Trade Lists are interpreted.See also Testing Multi-Currency Strategies.
17.18.96. Commission
CategoryStrategy ElementsDescriptionCommission amount, in instrument or account currency units, for each tradeInputFormula specifying a commission amountNotesIf your broker charges no commissions, omit this formula or set it to 0. If you pay a flat fee for every trade, simply specify that number. Commission is calculated and charged separately for entry and exit transactions, so round-trip commission is twice the value of this formula. If FillPrice is used in the Commission formula, it will automatically retrieve the entry price for the entry commission and the exit price for the exit commission.The formula for the standard US commission at Interactive Brokers is: Min(0.01 * FillValue, Max(0.005 * Shares, 1)).IB's Canadian commission formula is: Min(0.005 * FillValue, Max(0.01 * Shares, 1)) -- yes that's correct, the 0.01 and 0.005 are reversed vs. US.The Australian commission formula for IB is: 1.1 * Max(6.00, 0.0008 * FillValue) -- the 1.1x is the 10% GST and the remainder is the IB commission.For US IB commissions, you can omit the "Min(0.01 * FillValue" part unless you intend to trade penny stocks. By definition a stock would need to be priced below $0.50/share for 1% of its value to exceed $0.005/share.By default, Commission is assumed to be in the currency of the instrument being traded. If your broker (unlike IB) charges a commission rate in local account currency regardless of the instrument's currency, use the CommCurrency setting to specify Account.
17.18.97. Compounded
CategoryStrategy ElementsDescription
289Optionally overrides the automatically-determined S.Compounded flag for a strategyChoicesTrue - force the strategy to report stats as if compounded False - force the strategy to report stats as if non-compounded(unspecified) - report stats as compounded if equity is compounded or as non-compounded if equity is not compounded (default)NotesThis setting mainly controls how percent-based stats are reported. For tests where Compounded was True, the "ROR" stat is compound annual return (CAR) and the denominator used to calculate percent drawdown is the peak equity value.For tests where Compounded was False, the "ROR" stat is average annual return (AAR) and the denominator used to calculate percent drawdown is the starting (constant) equity value.If Allocation was not specified then it will default to Combined(S.Equity) when Compounded is True or to S.StartEquity when Compounded is False.This in turn impacts Quantity (position size) calculations as the strategy runs.To deliberately show compounded stats for a non-compounded test, explicitly specify Allocation: S.Equity or Allocation: Combined(S.Equity) while using QtyType of either Shares or Value and a Quantity formula that refers to neither S.Alloc nor S.Equity.To deliberately show non-compounded stats for compounded test, explicitly specify Allocation: S.StartEquity while using QtyType of either Shares or Value and a Quantity formula that refers to S.Equity.See also Compounding.
17.18.98. Constituency
CategoryImport SpecificationDescriptionNorgate index constituency listSyntaxConstituency: $SPX, $DJI // etc.NotesNorgate supports historical index constituency series for many different indexes.The following links to their website will provide the latest details:Â· US Historical Index ConstituentsÂ· AU Historical Index ConstituentsÂ· CA Historical Index ConstituentsThese details can also be found in the constituency.csv file that comes with RealTest and is automatically loaded each time the program starts.Here is a subset of that file:
290Column A contains the index number used by RealTest internally to identify each constituency time series. Column B contains the symbol to use in your Constituency statement if you want to include that constituency time series in your imported data.Column C is the InXXX variable to reference to use in your script formulas to find out whether the current stock was a member of that index on the current date. Column D is the name of the standard Norgate watchlist containing current members of that index.When your Import definition includes a Current & Past version of any of these standard watchlists, RealTest automatically adds the Constituency series for each such index to your imported data IF your script does NOT include a Constituency statement.Therefore you may rarely need to specify Constituency in an Import definition -- do so only when importing your own custom watchlists but still need to use InXXX in some of your formulas. A Constituency specification, if provided, must include all the indices for which InXXX is needed.The first row above is a special case. It refers to Norgate's  US Major Exchange Listed time series. Add Constituency: $MEL to your import and refer to InMEL in your formulas to ensure that a stock was listed on a major exchange (not over-the-counter traded) on that date. (In practice this makes very little difference if you already use a reasonable liquidity filter.)Similarly (but not shown above) add Constituency: $SPAC to your import and refer to InSPAC in your formulas to determine whether and when a stock was trading as a "Special Purpose Acquisition Company".See Event List Files for details about how Constituency data is stored in an RTD file and how to provide your own such data when importing from CSV or other sources.
17.18.99. Correl
CategoryMulti-Bar FunctionsDescriptionPearson's Correlation of two seriesSyntax
291Correl(expr1, expr2, count)Parametersexpr1 - data series formulaexpr2 - data series formulacount - lookback periodNotesCorrel(ROC(C,1), Extern($SPY, ROC(C,1)), 100) would be a simple way to calculate the rolling 100-day correlation of a stock to SPY.See also Spearman, CorrelAvg, etc.
17.18.100. CorrelAvg
CategoryMulti-Bar FunctionsDescriptionAverage correlation of a stock to a group of stocksSyntaxCorrelAvg(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlatecount - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)log {0} - log the individual correlations when the formula is evaluatedNotesCorrelAvg(InDJI, ROC(C,1), 20) would return the average 20-bar correlation of each DJIA constituent to the current stock.See also Correl, Spearman, CorrelMed, CorrelMin, CorrelMinSym, CorrelMax, CorrelMaxSym
17.18.101. CorrelMed
CategoryMulti-Bar FunctionsDescriptionMedian correlation of a stock to a group of stocksSyntaxCorrelMed(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlate
292count - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)log {0} - log the individual correlations when the formula is evaluatedNotesCorrelMed(InDJI, ROC(C,1), 20) would return the median 20-bar correlation of each DJIA constituent to the current stock.See also Correl, Spearman, CorrelAvg, CorrelMin, CorrelMinSym, CorrelMax, CorrelMaxSym
17.18.102. CorrelMin
CategoryMulti-Bar FunctionsDescriptionLowest correlation of a stock to a group of stocksSyntaxCorrelMin(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlatecount - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)log {0} - log the individual correlations when the formula is evaluatedNotesCorrelMin(InDJI, ROC(C,1), 20) would return the lowest 20-bar correlation of any DJIA constituent to the current stock.See also Correl, Spearman, CorrelAvg, CorrelMed, CorrelMinSym, CorrelMax, CorrelMaxSym
17.18.103. CorrMinSym
CategoryMulti-Bar FunctionsDescriptionSymbol of stock with lowest correlation to the current stockSyntaxCorrelMin(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlatecount - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)
293log {0} - log the individual correlations when the formula is evaluatedNotesCorrelMinSym(InDJI, ROC(C,1), 20) would return the symbol of the DJIA constituent with the lowest 20-bar correlation to the current stock.The symbol is returned as both a number and a string. Use SymRef to refer to symbol with Extern.See also Correl, Spearman, CorrelAvg, CorrelMed, CorrelMin, CorrelMax, CorrelMaxSym
17.18.104. CorrelMax
CategoryMulti-Bar FunctionsDescriptionHighest correlation of a stock to a group of stocksSyntaxCorrelMax(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlatecount - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)log {0} - log the individual correlations when the formula is evaluatedNotesCorrelMax(InDJI, ROC(C,1), 20) would return the highest 20-bar correlation of any DJIA constituent to the current stock.See also Correl, Spearman, CorrelAvg, CorrelMed, CorrelMin, CorrelMinSym, CorrelMaxSym
17.18.105. CorrelMaxSym
CategoryMulti-Bar FunctionsDescriptionSymbol of stock with highest correlation to the current stockSyntaxCorrelMax(filter, expr, count, spearman {0}, log {0})Parametersfilter - stock filter formulaexpr - value to correlatecount - lookback periodspearman {0} - use Spearman's Rank Correlation method (default is to use Pearson's Correlation)log {0} - log the individual correlations when the formula is evaluated
294NotesCorrelMaxSym(InDJI, ROC(C,1), 20) would return the symbol of the DJIA constituent with the highest 20-bar correlation to the current stock.The symbol is returned as both a number and a string. Use SymRef to refer to symbol with Extern.See also Correl, Spearman, CorrelAvg, CorrelMed, CorrelMin, CorrelMinSym, CorrelMax
17.18.106. Cosine
CategoryGeneral-Purpose FunctionsDescriptionTrigonometric cosine of a number of degreesSyntaxCosine(value)Parametersvalue - formulaNotesThe parameter value is assumed to be degrees (0-360).To convert radians to degrees, multiply by 57.2957795131 (180/Ï).
17.18.107. Cross
CategoryGeneral-Purpose FunctionsDescriptionCompares two values for two bars to see if their ranking has changedSyntaxCross(value1, value2)Parametersvalue1 - formula related to bar datavalue2 - formula related to bar dataNotesThis function is a shortcut for the expression value1[1] < value2[1] and value1 > value2. It is most commonly used to compare two moving averages, or price to a moving average, e.g. Cross(MA(C,5), MA(C,20)) would return 1 (true) if the 5-day average was below the 20-day average yesterday and is above it today.Logically, Cross(A,B) means "A has crossed above B". To test for "A has crossed below B", simply use Cross(B,A).
17.18.108. CountTrue
295CategoryMulti-Bar FunctionsDescriptionCount of bars for which a condition was true (non-zero)SyntaxCountTrue(condition, count {0})Parameterscondition - data series formulacount - lookback period (optional)NotesCondition will always be evaluated for count bars (or all bars if omitted). For each bar, condition is evaluated as if that bar were the current bar, i.e. without knowledge of future splits relative to that bar.If condition was never true for any bar, the return value is 0.Unless you really care about the specific count, it is more efficient to use SinceTrue to test whether a condition has ever been true.This function supports one-pass calculation when used in the Data Section without a count argument.
17.18.109. CRSI
CategoryIndicator FunctionsDescriptionConnors RSI IndicatorSyntaxCRSI(lenRocRank, lenRsiPrice, lenRsiStreak)ParameterslenRocRank - number of bars to use in the PercentRank(ROC(C,1), len) portion of the calculationlenRsiPrice - length parameter for the price RSI portion of the calculationlenRsiStreak - length parameter for the "streak" RSI portion of the calculation
NotesThis calculates the equivalent of the following formula:
CRSI was added as a built-in function to improve calculation speed and enable "reverse CRSI" to be calculated by passing it to the TargetPrice function.
17.18.110. CSVDateFmt
CategoryImport Specification
296DescriptionSpecifies whether the dates in a CSV Import are in M/D/Y vs. D/M/Y formatChoicesDMY - dates are D/M/YMDY - dates are M/D/YNotesThe default if your Import definition does not include CSVDateFormat is to use the Date Display Format setting from the Program Options Dialog.This element lets you use CSV data files with the opposite of your standard date format more easily.Other date formats are supported which are not ambiguous and therefore do not require CSVDateFmt to be specified.
17.18.111. CSVDelim
CategoryImport SpecificationDescriptionSpecifies the column delimiter in a CSV Import fileChoicesCommaSemicolonTabNotesThe default column delimiter is Comma when CSVNumFmt is Point or Semicolon when CSVNumFmt is Comma.
17.18.112. CSVFields
CategoryImport SpecificationDescriptionCSV field order (comma-separated list)ChoicesDate - this field is the bar dateTime - this field is the bar timeOpen - this field is the open priceHigh - this field is the high priceLow - this field is the low priceClose - this field is the close priceVolume - this field is the volume
297AdjClose - this field is the adjusted close priceRealClose - this field is the unadjusted (as-traded) close priceSplit - this field is the split ratio (real close / adjusted close)Dividend - this field is the dividend amount (should be 0 except on ex-dividend dates)Extra - this field is the value that can be referenced as ExtraNotesCSV field order must be specified for CSV Import to work. If CSV data files include header rows with column labels, these are simply ignored.Here is a partial example of a CSV import specification showing how this looks:
Note that CSV field names (like all names in RealTest) are not case-sensitive.To ignore a column in a CSV file, add an extra comma to the field order list, e.g. "date,,,open,high,low,close,,volume".To ignore the first one or more columns, add extra comma(s) at the start of the list, e.g. ",,date,close".
17.18.113. CSVFile
CategoryImport SpecificationDescriptionCSV file to be used for single-file CSV data importInputThe full path to a file that contains CSV data for one or more symbols.NotesThe file must include a Symbol column, and CSVFields must specify its location.For multi-file CSV import (one file per symbol), use DataPath instead of CSVFile.See CSV Import for additional details.
17.18.114. CSVNumFmt
CategoryImport SpecificationDescriptionSpecifies whether numbers (prices) in a CSV Import use a point or a comma as their decimal separatorChoicesPoint - point (period) is used (default)Comma - comma is usedNotesBy default (and by definition) comma is the field separator in a CSV file, and point is the decimal 
298separator.This optional item enables European-format "CSV" files to be imported by RealTest. When you add CSVNumFmt: Comma to your CSV Import definition, semicolon becomes the default CSVDelim and comma is used as the decimal separator.Such files sometimes use point as the date field separator, and RealTest also supports this format automatically. See also CSVDateFmt for D/M/Y date field order specification.
17.18.115. Currency
CategorySettingsDescriptionThe base currency of the model account in a backtestValueA three-letter currency abbreviation such as AUD, CAD, USD, JPY etc. (do not include quotation marks)NotesOnly specify a base currency when you specifically want to test multi-currency strategies, e.g. trading US stocks in a non-US account.For this setting to work, the active data file must include the appropriate exchange rate series, e.g. AUDUSD, and the stock metadata must specify the currency for each symbol.See Testing Multi-Currency Strategies for details on how this works.
17.18.116. Data
CategoryScript SectionsDescriptionNamed formulas calculated once and stored in memory arrays before tests are runNotesSee Data Section for a more detailed description.
17.18.117. DataFile
CategorySettingsDescriptionPath to the .RTD data file to load before running a scan or testNotesIf DataFile is not specified in a script then the path from the Settings Panel will be used.
29917.18.118. DataPath
CategoryImport SpecificationDescriptionCSI Futures, CSI Stocks, CSV, or MetaStock file location InputThe full path to a directory (folder) that contains a collection of local data files.NotesBy default all data files found in each specified DataPath are included in the import.Specify one or more IncludeList to optionally filter the files to include only those symbols listed.IncludeList can also be used to provide InList names or numbers with local-file import.Specify KeepNonIncluded: True if you want to define InList names while still importing all the data files.See CSI Futures Import, CSI Stocks Import, CSV Import, or MetaStock Import for further details.
17.18.119. DataSource
CategoryImport SpecificationDescriptionName of the data source to use for a data importChoicesNorgate - import from Norgate NDU (stocks, futures, indexes, indicators)Yahoo - import from finance.yahoo.com (stocks)Tiingo - import from  api.tiingo.com (stocks)TiingoCrypto - import end-of-day Crypto currency prices from TiingoMetastock - import stock data from a local Metastock databaseCSIFutures - import futures data from CSI Unfair Advantage portfoliosCSV - import any type of data from your own local CSV files
17.18.120. DataType
CategoryGeneral-Purpose FunctionsDescriptionCauses a value to be treated as a specific type of dataSyntax
300DataType(expression, type)Parametersexpression - any formula or valuetype - what type to assign to the result: 0 = none, 1 = price, 2 = volumeNotesThis function is rarely needed because RealTest automatically determines the type of most calculated values correctly.The data type of a value is only important when the value is used in multi-bar formulas or indicators that cross a split date.Only use this function if you have observed incorrect split handling in, for example, a complex Data Section formula.
17.18.121. Date
CategoryGeneral-Purpose FunctionsDescriptionReturns a numeric date value for a given year, month and daySyntaxDate(year, month, day)Parametersyear - year numbermonth - month numberday - day numberNotesThe return value is the date in YYYYMMDD format, which can be used for comparison with BarDate or as input to DateBars.
17.18.122. DateBars
CategoryGeneral-Purpose FunctionsDescriptionNumber of bars since (or until) a specific dateSyntaxDateBars(date)Parametersdate - a numeric dateNotesThis function can be used to return a bar count or offset from the current bar to a specific date in the past or future.The date parameter can be any formula returning a numeric date value.
301The Date function is a convenient way to generate a numeric date.If there is no bar with the specified date, the first bar with a date more recent than the specified date is used.ExamplesROC(C, DateBars(Date(2016,2,1)) + 1) returns the percent gain or loss since February 1, 2016. (The +1 is needed to make the bar count inclusive of the specified bar when using the count as a length argument.)C[DateBars(Date(Year,1,1))] returns the closing price for the first trading date of the current year.(Here the bar count is an offset rather than a length so the +1 is not needed.)
17.18.123. DateDay
CategoryGeneral-Purpose FunctionsDescriptionExtract the day number from a dateSyntaxDateDay(date)Parametersdate - an integer date value e.g. 20230816, S.Date, T.DateIn, etc.
17.18.124. DateDisplay
CategorySettingsDescriptionSpecifies how dates are displayed in the user interface, scans, trade lists, etc.NotesThis setting optionally overrides the default date display format as defined in Program Options. The override applies while the script is running and the prior setting is restored when it finishes.See Date Format Pictures for details about the format specification string.
17.18.125. DateInput
CategorySettingsDescriptionSpecifies how dates are parsed when it isn't clear whether the first two numbers are day/month or month/day.Notes
302RealTest can parse dates in any known format without being told what the format is. The only exception is when day and month precede year. In this case it is not always clear which is which, so a setting is required.This setting optionally overrides the default date input format as defined in Program Options. Note that this setting is independent of the DateDisplay format, which is not used when parsing dates in scripts or input files.
17.18.126. DateMonth
CategoryGeneral-Purpose FunctionsDescriptionExtract the month number from a dateSyntaxDateMonth(date)Parametersdate - an integer date value e.g. 20230816, S.Date, T.DateIn, etc.
17.18.127. DateSym
CategorySettingsDescriptionSymbol to use to interpret "Earliest" or "Latest" in StartDate or EndDateNotesBy default Earliest means the oldest date and Latest the newest date of any symbol in the current data file.If DateSym is specified then that symbol is used instead.A good use of DateSym is to avoid the common problem where adding a currency symbol like AUDUSD to your data file causes the "latest" bar to be one for which no stocks have bars.Do not prefix the symbol with $ -- that is only required for symbol references within formulas.
17.18.128. DateYear
CategoryGeneral-Purpose FunctionsDescriptionExtract the year number from a dateSyntaxDateYear(date)
303Parametersdate - an integer date value e.g. 20230816, S.Date, T.DateIn, etc.
17.18.129. Day
CategoryBar Data ValuesDescriptionDay of month of this barNotesReturns the day of month of the current bar date as a number.Negative offsets, e.g. Day[-5], can be legitimately used to obtain the day of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.130. DayOfWeek
CategoryBar Data ValuesDescriptionNumeric code for day of week of this barNotes1=Monday2=Tuesday3=Wednesday4=Thursday5=Friday6=Saturday (e.g. for Crypto)7=Sunday (ditto)Negative offsets, e.g. DayOfWeek[-1], can be legitimately used to obtain the weekday of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.131. DayOfYear
CategoryBar Data ValuesDescription
304Day of year of this barNotesReturns the calendar day of year, not the number of bars. For example, a February 1 bar will always return 32. A December 31 bar will return 365 on normal years or 366 on leap years.Negative offsets, e.g. DayOfYear[-10], can be legitimately used to obtain the day of year of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.132. Days
CategoryGeneral-Purpose FunctionsDescriptionCounts the number of calendar or market days from one date to anotherSyntaxDays(date1, date2, market {false})Parametersdate1 - formula returning a datedate2 - formula returning a datemarket - optionally counts market days rather than the default calendar daysNotesThe parameters can be date constants in YYYYMMDD format, or any function that returns a date, e.g. BarDate or ToDate or InfoExpiry.One use of this function is to convert a bar count to a date count, e.g. Days(BarDate[20], BarDate).If you need the know the bar (market day) count between two dates, pass TRUE as the optional third argument.
17.18.133. DaysPerYear
CategorySettingsDescriptionNumber of market days per year for stats purposesNotesThis becomes the value returned by S.BPY for Daily BarSize tests (S.BPY is logically always 52 for Weekly, 12 for Monthly, 4 for Quarterly, 1 for Yearly).The default if not specified is 252. Use 365 for a 7-day asset such as Crypto.S.BPY is used internally to calculate the following:- S.BPW = S.BPY / 52
305- S.BPM = S.BPY / 12- S.BPQ = S.BPY / 4- HVOL(len) = StdDev(log(c/c[1]), len) * 100 * Sqr(S.BPY)S.BPY is also used in some of the formulas in Graphs.rts and Results.rts.
17.18.134. DebugEntry
CategoryStrategy ElementsDescriptionLog output from a running test at position entry (or skip) timeInputAny formula returning a string (blank string "" means don't log anything) or numeric value (0 means don't log anything)NotesIf this formula is present in a strategy, it will be evaluated for every setup just prior to position entry processing.If the DebugEntry formula returns a non-blank string or a non-zero numeric value then whatever it returns is added to the test debug or log output.To make the best use of this debugging feature, use the IF and Format functions, as in this example (from mr_sample_debug.rts):
17.18.135. DebugEval
CategoryGeneral-Purpose FunctionsDescriptionStop script execution and log the details of a strategy formula's evaluation when a condition is metSyntaxDebugEval(condition, formula)Parameterscondition - when to stop execution and evaluate the formulaformula - the formula to evaluateNotesDebugEval is meant to be wrapped around a strategy formula when necessary to learn the details of how it is being calculated in the context of a specific point in a running test.For example say you have a complex Quantity formula such as:
306(from the clenow_stocks_on_move_dynamic.rts example script)You want to see exactly how it is being calculated for AAPL on 2024-06-21:
Run the test and it will run as normal until coming to that symbol and date, then will:Â· turn on the same mechanism used for "Show Evaluation" option in the Debug PanelÂ· evaluate the formula, causing full evaluation details to be written to a log windowÂ· abort the testAt this point you can examine the log output and also use the debug panel as needed to explore data values in memory, open positions, etc.Note that DebugEval cannot be used in Data or Scan formulas. This is because those are calculated in separate threads and this function is not reentrant. It is intended for use in Strategy formulas only.
17.18.136. DebugExit
CategoryStrategy ElementsDescriptionLog output from a running test at ExitRule evaluation timeInputAny formula returning a string (blank string "" means don't log anything)NotesIf this formula is present in a strategy, it will be evaluated for every stock every day of the test, just prior to the ExitRule formula evaluation.If the DebugExit formula returns a non-blank string or a non-zero numeric value then whatever it returns is added to the test debug or log output.To make the best use of this debugging feature, use the IF and Format functions, as in this example (from mr_sample_debug.rts):
17.18.137. DebugTargetStop
CategoryStrategy ElementsDescriptionLog output from a running test at ExitLimit / ExitStop evaluation timeInputAny formula returning a string (blank string "" means don't log anything)NotesIf this formula is present in a strategy, it will be evaluated for every stock every day of the test, just prior to the ExitLimit and ExitStop formula evaluations.
307If the DebugTargetStop formula returns a non-blank string or a non-zero numeric value then whatever it returns is added to the test debug or log output.To make the best use of this debugging feature, use the IF and Format functions, as in this example (from mr_sample_debug.rts):
17.18.138. DEMA
CategoryMulti-Bar FunctionsDescriptionDouble Exponential Moving AverageSyntaxDEMA(expr, count)Parametersexpr - data series formulacount - lookback periodNotesCount is usually thought of as an integer representing a number of bars, but can actually be any decimal value. An EMA is constructed by multiplying each difference between the result so far and the next value by a factor equal to 2 / (count + 1).Double EMA is calculated as 2 * EMA(expr, count) - EMA(EMA(expr, count)). Unlike the EMA function, DEMA applies the exponential weight factor from the start of available data rather than beginning with MA(expr, count). This is consistent with how other backtesting software calculates this indicator.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.139. Dividend
CategoryBar Data ValuesDescriptionDividend amount ($/share) earned on an ex-dividend dateNotesDividend will be 0 for every bar except for those of ex-dividend dates. In other words, for any bar, Dividend is the $/share you will receive if you held the stock that morning before the open.Dividend values will only be present in the data if the data source used for import provided them. Norgate and Yahoo both provide dividend amounts.If Adjustment is set to TotalReturn when Norgate data is imported, then dividends are converted to splits (price adjustments) rather than reported as dividend payments.When data includes dividend payments and a position is held across an ex-dividend date in a 
308backtest, RealTest assumes the dividend was received on that date, adds its amount to total equity, and reports it as a separate item in the trade list.The main reason you would reference the dividend amount directly would be to filter for stocks with high or low dividends, or use time until next ex-dividend date as a factor in a strategy. 
17.18.140. DllDataCalc
CategoryGeneral-Purpose FunctionsDescriptionCall a custom external DLL function to calculate a Data itemSyntaxDllDataCalc(...)Parametersnone required, any number optionalNotesA native Windows DLL must be specifically built for this purpose.See the RTDLL folder within your RealTest installation folder for details and an example.
17.18.141. DynamicSizing
CategoryStrategy ElementsDescriptionDetermines whether strategy operates in a special dynamic sizing modeChoicesTrue - use dynamic sizing modeFalse - use typical entry/exit formula mode (default)NotesIf DynamicSizing is set to True then most of the typical strategy formulas become disabled and the Quantity formula determines whether a new position or partial position is entered or exited each day.In this mode the following elements are disallowed: EntrySetup, EntryLimit, EntryStop, EntryScore, ExitRule, ExitLimit, ExitStop, ExitQty, ExitLimitQty, ExitStopQty, ExitScore, MaxSameSym, MaxSameCat, MaxSetups, MaxEntries, Side.Instead of the logic provided by all of the above elements, the backtest engine simple evaluates Quantity once per test period. The value returned is the "target position size" for that period.If the target size is larger than the current size, an entry is made for the difference. If the target size is smaller than the current size, an exit is made for the difference.The sign of the quantity determines the side (long vs. short) of the position to establish.If the prior position was the opposite side, all current positions are exited and then the new position is entered.Internally RealTest implements this functionality using multiple positions per symbol, similar to the older way of simulating dynamic sizing.
309The key differences are:Â· Quantity is simply the desired position rather than having to calculate the difference vs. current positionÂ· EntrySetup is implicitly True when quantity is larger than current positionÂ· MaxSameSym is implicitly infiniteÂ· ExitRule is implicitly true when quantity is smaller than current positionÂ· ExitScore is implicitly "-Shares" i.e. always exit the smallest sub-positions firstÂ· Shares are implicitly Extern(@thisStrat, Shares), i.e., combined quantity of all sub-positions in this strategy for this symbolÂ· there is no way to access individual sub-positions from strategy formulas though they are still evident in the trade list, log, and ordersDynamicSizing strategies can specify any desired QtyType and, as usual, should express their target quantities in that type.These strategies can specify any of the usual capacity constraints except for those that constrain position counts. Top-down setup selection logic works as usual, including when adding to positions.See the two example scripts clenow_stocks_on_move.rts and clenow_stocks_on_move_dynamic.rts. These implement the same strategy logic using (a) the older approach and (b) dynamic sizing mode.
17.18.142. EMA or XAvg
CategoryMulti-Bar FunctionsDescriptionExponential Moving AverageSyntaxEMA(expr, count) or XAvg(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEither EMA or XAvg can be used as the name of this function.Count is usually thought of as an integer representing a number of bars, but can actually be any decimal value. An EMA is constructed by multiplying each difference between the result so far and the next value by a factor equal to 2 / (count + 1).Note that, like most other backtesting software, RealTest begins each EMA calculation with MA(expr, count), then begins to apply the EMA weighting for subsequent bars once count has been reached.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.143. EndDate (Import)
Category
310Import SpecificationDescriptionThe last date to include in imported dataChoicesDate Constant - a literal date Latest - always use the most recent available date 
17.18.144. EndDate (Setting)
CategorySettingsDescriptionThe last date to include in a scanChoicesDate Constant - a literal date Latest - the newest date of any symbol in the current data fileNotesIf a date range is not specified in a script then the dates from the Settings Panel will be used.To get the most recent N bars, use EndDate: Latest with NumBars but no StartDate.If DateSym is specified then Latest means the newest date of that specific symbol.
17.18.145. EndOfMonth
CategoryBar Data ValuesDescriptionIndicates whether this bar is the last bar of its monthNotesReturns 1 for the last bar of a month, otherwise 0.Note that this function operates on the unified date list for all symbols in the current data file by default, or the date list of the CalendarSym if specified. To check whether the current bar is the last bar of the month for a specific symbol, use Month[-1] <> Month.To work correctly when generating tomorrow's orders or using negative (future) offsets, a HolidayList should also be provided.
17.18.146. EndOfQuarter
CategoryBar Data Values
311DescriptionIndicates whether this bar is the last bar of a calendar quarterNotesReturns 1 for the last bar of a month when month is March, June, September or December, otherwise 0.Note that this function operates on the unified date list for all symbols in the current data file by default, or the date list of the CalendarSym if specified. To check whether the current bar is the last bar of the quarter for a specific symbol, use Month[-1] <> Month and Month % 3 = 0.To work correctly when generating tomorrow's orders or using negative (future) offsets, a HolidayList should also be provided.
17.18.147. EndOfTestExits
CategorySettingsDescriptionControls whether open positions are exited at the end of a backtestChoicesTrue - exit all positions at the end of each test (default)False - do not exit open positionsNotesPositions exited because the test has ended will show "end-of-test" in the "Reason" column of the trade list.When EndOfTestExits is False, open positions will not appear in the trade list.Possible reasons to disable end-of-test exits are:Â· to exclude still-open positions from trade-level stats Â· to keep those position records in memory for inspection in the Debug Panel (previously this was controlled by the Debug choice of the TestOutput setting)
17.18.148. EndOfWeek
CategoryBar Data ValuesDescriptionIndicates whether this bar is the last bar of the market weekNotesReturns 1 for the last bar of a week (typically Friday), otherwise 0.Note that this function operates on the unified date list for all symbols in the current data file by default, or the date list of the CalendarSym if specified. To check whether the current bar is the last bar of the week for a specific symbol, use Week[-1] <> Week.To work correctly when generating tomorrow's orders or using negative (future) offsets, a 
312HolidayList should also be provided.
17.18.149. EndOfYear
CategoryBar Data ValuesDescriptionIndicates whether this bar is the last bar of its yearNotesReturns 1 for the last bar of a year, otherwise 0.Note that this function operates on the unified date list for all symbols in the current data file by default, or the date list of the CalendarSym if specified. To check whether the current bar is the last bar of the year for a specific symbol, use Year[-1] <> Year.To work correctly when generating tomorrow's orders or using negative (future) offsets, a HolidayList should also be provided.
17.18.150. EntryDate
CategoryCurrent Position InformationDescriptionThe date on which this position was enteredNotesThe return value is a number in YYYYMMDD format and is the date on which the entry occurred (not the EntrySetup signal day).For a non-daily BarSize strategy, this will be the actual entry date (e.g. a Monday if Weekly).If used as Combined(EntryDate) when multiple positions are open in the same symbol (whether due to pyramiding or multiple strategies), the most recent entry date for that symbol will be returned.See also BarsHeld.
17.18.151. EntryLimit
CategoryStrategy ElementsDescriptionPrice to use when entering a position with a limit orderInputAny formula specifying a price per shareNotesThe price returned by the EntryLimit formula is used to place a one-day limit order. For a long buy, the Low must be less than or equal to the limit price to potentially generate an entry. For a short 
313sale, the High must be greater than or equal to the limit price.If the opening price for a stock is at or beyond the limit price, then the the order is assumed to have been filled at the opening price, otherwise it fills at the limit price. Limit orders that fill at the open are assumed to have filled first when some entries have to be skipped due to position count or investment level caps.If both EntryLimit and EntryStop are used, then the entry order becomes a stop+limit order. For this order to fill, both of these prices must be touched. The most common reason to use a stop+limit order is to avoid entries in a stop-based entry strategy where the opening gap is excessively large.When a strategy includes an EntryLimit and/or an EntryStop formula, all entry-related formulas are evaluated using the prior day as the current bar, so that there can be no possibility of a look-ahead error. EntrySetup is evaluated first, and no other entry formulas are evaluated if it returns 0. (The only exception is when EntryTime is ThisClose, which implies that a live data feed would be used to enter just before the close.)If the EntryLimit formula returns 0, this means "always enter", i.e., it becomes a market order (or a simple stop order if EntryStop was also specified).ExamplesEnter long when price drops 4% below yesterday's close: EntryLimit: C * 0.96Enter short when price touches an upper Bollinger Band: EntryLimit: BBTop(20, 2)Enter long when RSI(2) reaches 5: EntryLimit: RRSI(2,5)
17.18.152. EntryRank
CategoryCurrent Position InformationDescriptionReturns the rank number for this position when EntryScore was evaluated at entry time.NotesEntryRank can be referred to in any strategy formula except EntrySetup.Entry ranks can also be observed by running a test with TestOutput: Log enabled.
17.18.153. EntryScore
CategoryStrategy ElementsDescriptionRanks potential entries when a strategy has more setups than can be enteredInputAny formula specifying a numeric valueNotesEntryScore is a specialized formula that is only needed when modeling strategies that allow more setups than entries. It should NOT be used as a general-purpose setup ranking function -- always use SetupScore for that purpose. See also MaxEntries.
31417.18.154. EntrySetup
CategoryStrategy ElementsDescriptionDetermines whether a stock is eligible for entryInputAny formula specifying a true/false condition (non-zero means true)NotesEntrySetup is the first formula evaluated for each stock on each date of a backtest. If the return value is non-zero (true) then the stock is set up for entry (is an entry candidate). If a strategy has no EntrySetup formula, then it will produce no trades (unless it uses an Imported Trade List).If a strategy also includes an EntryLimit and/or EntryStop formula, or if it specifies EntryTime as NextOpen (or leaves it unspecified), then all entry-related formulas including EntrySetup are evaluated using the day prior to entry day as the most recent bar in the formula. The only case where the entry-day bar can be accessed in entry-related formulas is when none of those things are true, i.e., when the strategy models entry with a market order just before the close.For more information on how the backtest engine works, see Backtest Engine Details.EntrySetup formulas can, at times, be rather complex. For this reason, it is highly recommended to make use of the Data Section for most of your entry condition logic. I will often have a series of data items that feed into a final one called something like "IsSetup", then just use EntrySetup: IsSetup. The mr_sample.rts sample script includes an example of this tactic:
17.18.155. EntrySkip
CategoryStrategy ElementsDescriptionEnables skipping an entry if a condition appliesInput
315Any formula specifying a true/false condition (non-zero means true)NotesAfter all other conditions for entry have been met, the EntrySkip formula is evaluated (if provided). If the result is non-zero (true) or if the formula can't be evaluated (nan) then the entry is not taken.All skipped entries (potential entries that passed the EntrySetup condition but did not become positions for any reason) are optionally included in the Trade List when a test is run. Skipped entries shown in the trade list include a column where the reason the entry was skipped is shown. Trades skipped because the EntrySkip condition was true show "skip formula" as their skip reason.A good use of EntrySkip is, for example, EntrySkip: random() < 0.05. This would randomly skip about 5% of entries, e.g. to simulate not being able to borrow shares to short. By running this same test a number of times we can see the probable range of how this would impact the stats of the strategy.
17.18.156. EntryStop
CategoryStrategy ElementsDescriptionPrice to use when entering a position with a stop orderInputAny formula specifying a price per shareNotesThe price returned by the EntryStop formula is used to place a one-day stop order. For a long buy, the High must be greater than or equal to the stop price to potentially generate an entry. For a short sale, the Low must be less than or equal to the stop price.If the opening price for a stock is at or beyond the stop price, then the the order is assumed to have been filled at the opening price, otherwise it fills at the stop price. Stop orders that fill at the open are assumed to have filled first when some entries have to be skipped due to position count or investment level caps.If both EntryLimit and EntryStop are used, then the entry order becomes a stop+limit order. For this order to fill, both of these prices must be touched. The most common reason to use a stop+limit order is to avoid entries in a stop-based entry strategy where the opening gap is excessively large.When a strategy includes an EntryLimit and/or an EntryStop formula, all entry-related formulas are evaluated using the prior day as the current bar, so that there can be no possibility of a look-ahead error. EntrySetup is evaluated first, and no other entry formulas are evaluated if it returns 0. (The only exception is when EntryTime is ThisClose, which implies that a live data feed would be used to enter just before the close.)If the EntryStop formula returns 0, this means "always enter", i.e., it becomes a market order (or a simple limit order if EntryLimit was also specified).ExamplesEnter long when price moves above yesterday's high: EntryStop: H + TickSizeEnter short when price moves below a moving average: EntryStop: MA(C,20) - TickSizeEnter long if price moves above the 10-day highest close: EntryStop: Highest(C,10) + TickSizeAdd a limit order to the prior example to avoid entry at more than 2% above the stop price: EntryLimit: 1.02 * Highest(C,10)
17.18.157. EntryTime
316CategoryStrategy ElementsDescriptionSpecifies when a strategy enters new positionsChoicesThisClose - entries occur at the close of the current dayIntraday - entries occur when a trigger price is first touched tomorrow (default for limit and/or stop orders)NextOpen - entries occur at tomorrow's open (default for market orders)NextClose - entries occur at tomorrow's closeNotesUsing ThisClose implies an ability to generate realtime trading signals using live data. RealTest will not be able to generate Tomorrow's Orders for ThisClose entries.For strategies with no EntryLimit or EntryStop, EntryTime controls the time at which a market order is generated. NextOpen implies that a standard MKT order is placed before the open, to be filled at the open. (Intraday is interpreted as NextOpen for market orders.) NextClose implies that a MOC order is placed before the open, to be filled at the close.EntryTime also applies to strategies that use an EntryLimit and/or EntryStop price.Using ThisClose entry with EntryLimit specified is equivalent to adding "and C < n" to EntrySetup (for a long-side strategy) where "n" is the EntryLimit price. Similarly, a long EntryStop would be equivalent to "and C > n". Reverse these comparison operator directions for short-side strategies. As previously stated, orders cannot be generated in advance for this mode.With Intraday, NextOpen, or NextClose limit or stop entries, the trigger price is calculated using the prior bar, and the order can be placed in advance. A Intraday EntryLimit or EntryStop is a standard LMT DAY or STP DAY order.A NextOpen EntryLimit is a LMT OPG order, and a NextOpen EntryStop is STP GTD 9:31 EST. A NextClose EntryLimit is a LOC order, and a NextClose EntryStop is STP GAT 15:58 EST.In all of the above, if both EntryLimit and EntryStop are specified, the order becomes STPLMT with the same qualifiers.(All of the above order types are stated using Interactive Brokers order nomenclature, and can be automatically generated by adding OrdersTemplate: Examples\ib_basket_trader.csv to your Settings and running your script in Orders mode.)For more information on how the backtest engine works in general, see Backtest Engine Details.
17.18.158. EntryTradeValue
CategoryStrategy ElementsDescriptionCalculates a value to store in T.ValueIn item in the trade list record for this entryInputAny formula specifying a numeric valueNotesThis item can be useful in Trade Statistics Functions, especially when applied to Results formulas 
317which do not support access to bar data values or indicator functions.
17.18.159. ESD
CategoryMulti-Bar FunctionsDescriptionExponential Standard DeviationSyntaxESD(expr, count)Parametersexpr - data series formulacount - lookback periodNotesThis function calculates a standard deviation of values as an exponential series using a constant weighting factor represented as a bar count.As in the EMA function, count is converted to a weight factor using the formula factor = 2 / (count + 1).This factor is then used to calculate two intermediate series for an array of values.An EMA is calculated in place of the mean in a typical StdDev calculation.The average of the squared differences between each value and the mean (i.e. the standard deviation) is also calculated as an EMA using the same weight factor.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.160. Event
CategoryBar Data ValuesDescriptionGet the event code for this bar or the most recent event codeSyntaxEvent(type, latest {optional})Parameterstype - event type numberlatest - most-recent (1) vs. this-bar-only (0) flag -- 0 is the defaultNotesIf the current data file includes a user-defined Event List, this function looks up an event code for the current symbol and bar.If an event is found that has type as its type number, then its value is returned.
318If latest is true (non-zero), then the most recent event of this type for this symbol prior to (or on) the current bar is returned.If no matching event is found then 0 is returned.An event is considered to have occurred "on a bar" if the event's time value (from the imported event list) <= 16:00 (160000).
17.18.161. EventListFile
CategoryImport SpecificationDescriptionPath to a CSV file containing a list of specific event data to include in imported bar dataInputFile pathNotesSee Event and Event List Files for details on how this mechanism works and can be used.
17.18.162. ExchangeMap
CategorySettingsDescriptionSpecifies the path to a CSV file which helps RealTest generate orders with correct symbols, exchange names, and GAT/GTD timesNotesAn exchange map is required in order for RealTest to generate orders in any OrdersMode other than Text.If an ExchangeMap Setting is not specified, RealTest looks for a file called ExchangeMap.csv in the following locations:1.the current OrderClerkFolder when OrdersMode is OrderClerk2.the RealTest installation folderThe default ExchangeMap.csv file installed with RealTest looks like this:
319The columns can be in any sequence but must use the names listed below.The content and purpose of each column is described here:Column Content PurposeExchange exchange name with optional * or ? Match wildcard characters
matches the ?Exchange of the stock for which an order is being generatedPrimary brokerage exchange specifies the primary exchange in SMART/primaryMarket symbol matching patternallows different symbols on the same exchange to have different settings (e.g. for futures)Match1 symbol matching patternif the stock has no exchange specified, matches the symbol pattern to determine the exchange to useMatch2 same as above alternative symbol pattern (multiple data sources)HasOpg 0 or 1 1 if this exchange supports open-price-guarantee ordersHasMoc 0 or 1 1 if this exchange supports market-on-close orders else 0HasLoc 0 or 1 1 if this exchange supports limit-on-close orders else 0
320TimeZone Exchange timezone name in IANA tz database format
Appended to all date+time order fields for this exchange (required by IB)LastMocTime 24-hour hh:mm:ss "Good Until" time for entry orders for same-day MOC exitNearCloseTime same as above "Good After" time for "ThisClose" or "NextClose" entry or exit MKT orders including MOC if not supported by exchange (date determined automatically)EarlyLastMocTime same as above LastMocTime for early-close daysEarlyNearCloseTimesame as above NearCloseTime for early-close daysLateLocTime same as above closing auction LOC placement timeEarlyLateLocTime same as above ditto on early close daysWeeklyLastMocTimesame as above Friday "Good Until" time for weekly MOCLastOpenTime same as above GTD time for "at-open" STP ordersFuturesOpenTime time of day time after which to increment date when processing fill reports (0 or blank means never do so)AllHours 0 or 1 always generate GTD rather than DAY orders (set OutsideRTH flag in brokerage order)
The Match1 and Match2 symbol matching patterns are also used to know when to remove the country-specific suffix from a symbol when generating orders, e.g. changing BHP.au to BHP.If you're generating orders for futures, see also exchangemap_csi.csv or exchangemap_ndu.csv (both are in the Examples folder).
17.18.163. ExcludeIf
CategoryImport SpecificationDescriptionImport filter formula (exclude symbol if true)Inputnumber 
17.18.164. ExcludeList
CategoryImport SpecificationDescriptionList of one or more symbols to exclude when importing dataNotesAn Import Section can have any number of ExcludeList statements.Each ExcludeList statement can take one of the following forms:Â· One or more symbols, separated by commas (up to a maximum of 260 characters in total)
321Â· A path to a local file containing a list of symbolsIf a symbol from any IncludeList also appears on any ExcludeList, then that symbol will not be included in the imported data. Use of an ExcludeList is a convenient way to omit a few specific symbols from a data file without having to modify an existing watchlist.
17.18.165. ExitLimit
CategoryStrategy ElementsDescriptionA price at which to exit a position using a limit order (profit target)InputAny formula specifying a price per shareNotesExitLimit specifies a "target" price, implemented by default as a LMT DAY order. The formula is re-evaluated each day, so it can function as either a static or moving target, depending on how it is specified. ExitLimit is always evaluated using the day prior to exit day as the most recent bar in the formula.A simple fixed 5% profit target could be specified as FillPrice * 1.05 for a long position or FillPrice * 0.95 for a short position.An ATR-based target might be expressed as FillPrice + 2 * ATR(14) for a long position or FillPrice - 2 * ATR(14) for a short position.A strategy can include any combination of an ExitRule, ExitLimit and/or ExitStop (stop-loss). Whichever one is determined to have occurred first will be the one used in the test. The type of exit that occurred for each trade is displayed in the Reason column of the Trade List.See also ExitLimitTime for other target-order alternatives.For more information on how the backtest engine works in general, see Backtest Engine Details.
17.18.166. ExitLimitQty
CategoryStrategy ElementsDescriptionSpecifies the number of shares or contracts to buy or sell when a position exits on an ExitLimitInputAny formula specifying a number of shares or contractsNotesExitLimitQty can be used to model partial limit (target) exits (scaling out of positions or reducing their size).If ExitLimitQty is not specified then then entire position is always exited when an ExitLimit triggers.The ExitLimitQty formula must calculate the number of shares or contracts to exit regardless of the strategy's QtyType setting.To model partial exits for the other exit types, ExitQty and/or ExitStopQty can also be added to a 
322strategy.See ExitQty for additional information and an example.
17.18.167. ExitLimitTime
CategoryStrategy ElementsDescriptionSpecifies how a strategy exits positions when the ExitLimit formula is usedChoicesThisClose - exit at today's close if today's closing price touches or exceeds the limit price (impractical)Intraday - ExitLimit specifies the price of a live limit order to be placed tomorrow (default)NextOpen - exit at tomorrow's open if today's close touched or exceeded the limit priceNextClose - exit at tomorrow's close if tomorrow's close touches or exceeds the limit price (calculated from today's bar)NotesUsing ThisClose with ExitLimit equivalent to adding "and C > n", where "n" is the ExitLimit price (for a long-side strategy), to the ExitRule of a strategy with ExitTime ThisClose. In either case, orders could not be generated in advance for this mode.With Intraday, NextOpen, or NextClose ExitLimit orders, the trigger price is calculated using the prior bar, and the order can be placed in advance. A Intraday ExitLimit is a standard LMT DAY order.A NextOpen ExitLimit is a MKT order that is placed if the prior close touched the limit price.A NextClose ExitLimit is a LOC (limit on close) order at the specified limit price.Note that the Exit Logic of a strategy works differently from its Entry Logic. Specifically, there is always only one Entry order, while there can be up to three Exit orders. The three exit order types each have their own time specifier and function as a "one-cancels-all" order bracket, where the order to logically trigger first becomes the position exit and the others do not.To implement a trailing limit price, use PrevExitLimit in the ExitLimit price calculation.For more information on how the backtest engine works in general, see Backtest Engine Details.
17.18.168. ExitNum
CategoryCurrent Position InformationDescriptionReturns the number of this exit for this positionNotesExitNum will normally be 1 unless ExitQty, ExitLimitQty or ExitStopQty was previously used to exit part of the position.ExitNum can be used in any exit-related strategy formula as part of its exit logic.
32317.18.169. ExitQty
CategoryStrategy ElementsDescriptionSpecifies the number of shares or contracts to buy or sell when ExitRule is trueInputAny formula specifying a number of shares or contractsNotesExitQty can be used to model partial exits (scaling out of positions or reducing their size).If ExitQty is not specified then then entire position is always exited when ExitRule is true.The ExitQty formula must calculate the number of shares or contracts to exit regardless of the strategy's QtyType setting.To model partial exits for the other exit types, ExitLimitQty and/or ExitStopQty can also be added to a strategy.If the specified quantity is less than or equal to 0 then the exit is cancelled (the position is held at its current size).If the quantity is greater than or equal to the current position size then the entire position is exited.Use FillQty in these formulas to express the partial exit in terms of the original position size.For example to exit one fourth of the original position on each of the first four days after entry:
This use of FillQty rather than Shares is necessary because Shares will be reduced after each partial exit.Partial exits are implemented internally by temporarily cloning the position, changing the clone's quantity to the desired exit quantity, and then processing the exit of that new position. The quantity of the original position (Shares) is then changed to the prior quantity minus the exit quantity.When looking at the trade list of a strategy that uses partial exits, none of the trades will show the original entry quantity as their QtyIn values. Instead QtyIn is always equal to QtyOut (the partial exit quantity) for each individual trade (unless it was held across a split).To see the original entry quantities in the trade list, add this to the strategy:
and add this to Trades.rts:
17.18.170. ExitRank
CategoryCurrent Position InformationDescriptionReturns the rank number for this position based on ExitScore
324NotesExitScore is recalculated each bar for each open position, before any of the exit formulas are evaluated.Positions are then sorted by this score and their resulting rank numbers are stored.Use ExitRank to access the rank number of the current position based on that evaluation.
17.18.171. ExitRule
CategoryStrategy ElementsDescriptionSpecifies one or more conditions that would trigger a position exitInputAny formula specifying a true/false condition (non-zero means true)NotesThe ExitRule for a strategy is evaluated for every position every day. If it ever returns true (non-zero), the position is exited either that day at the close or the next day at the open, depending on the ExitTime setting.When exit time is NextOpen (the default) or NextClose, ExitRule is evaluated using the day prior to exit day as the most recent bar in the formula. For ThisClose exits, the exit day is the most recent bar.This formula is typically used to specify a conditional exits such as C > C[1], or time-based exits such as BarsHeld=10.A strategy can include any combination of an ExitRule, ExitLimit (target) and/or ExitStop (stop-loss). Whichever one is determined to have occurred first will be the one used in the test. The type of exit that occurred for each trade is displayed in the Reason column of the Trade List.Optionally, for ExitRule formulas with multiple "or" conditions, the formula can return a string which both serves as the "true" signal of the condition and provides the Reason name for the exit in the trade list.This example shows how to structure a multi-reason ExitRule formula using the Select function, and how each reason string is shown in the Trades Window:
Note that when used this way, the Select statement must be the entire ExitRule formula. For example, to only check a pair of exit rules only at the end of each month, you must use this: 
      
ExitRule: Select(EndOfMonth and condition1, "reason1", EndOfMonth and condition2, "reason2") rather than this:
325      
ExitRule: EndOfMonth and Select(condition1, "reason1", condition2, "reason2")It does not work to move this special type of Select statement to a Library or Data item.For more information on how the backtest engine works, see Backtest Engine Details.
17.18.172. ExitScore
CategoryStrategy ElementsDescriptionCalculates a score value for use in ranking open positions prior to evaluating exit criteria each day in a testInputAny formula specifying a numeric valueNotesExitScore is recalculated each bar for each open position, before any of the exit formulas are evaluated.Positions are then sorted by this score and their resulting rank numbers are stored.Use ExitRank to access the rank number of the current position based on that evaluation.
17.18.173. ExitStop
CategoryStrategy ElementsDescriptionA price at which to exit a position using a stop order (stop loss)InputAny formula specifying a price per shareNotesExitStop specifies a "stop" price, implemented as a STP DAY order. The formula is re-evaluated each day, so it can function as either a static or trailing stop, depending on how it is specified. ExitStop is always evaluated using the day prior to exit day as the most recent bar in the formula.A simple fixed 5% stop loss could be specified as FillPrice * 0.95 for a long position or FillPrice * 1.05 for a short position.A trailing stop 5% below the highest high since entry could, for a long position, be expressed as 0.95 * Highest(H,BarsHeld).A strategy can include any combination of an ExitRule, ExitLimit (target) and/or ExitStop. Whichever one is determined to have occurred first will be the one used in the test. The type of exit that occurred for each trade is displayed in the Reason column of the Trade List.See also ExitStopTime for other stop-order alternatives.For more information on how the backtest engine works, see Backtest Engine Details.
17.18.174. ExitStopQty
326CategoryStrategy ElementsDescriptionSpecifies the number of shares or contracts to buy or sell when a position exits on an ExitStopInputAny formula specifying a number of shares or contractsNotesExitStopQty can be used to model partial stop exits (scaling out of positions or reducing their size).If ExitStopQty is not specified then then entire position is always exited when an ExitStop triggers.The ExitStopQty formula must calculate the number of shares or contracts to exit regardless of the strategy's QtyType setting.To model partial exits for the other exit types, ExitQty and/or ExitLimitQty can also be added to a strategy.See ExitQty for additional information and an example.
17.18.175. ExitStopTime
CategoryStrategy ElementsDescriptionSpecifies how a strategy exits positions when the ExitStop formula is usedChoicesThisClose - exit at today's close if today's closing price touches or exceeds the stop price (impractical)Intraday - ExitStop specifies the price of a live stop order to be placed tomorrow (default)NextOpen - exit at tomorrow's open if today's close touched or exceeded the stop priceNextClose - exit at (or just before) tomorrow's close if tomorrow's close touches or exceeds the stop price (calculated from today's bar)NotesUsing ThisClose with ExitStop equivalent to adding "and C < n", where "n" is the ExitStop price (for a long-side strategy), to the ExitRule of a strategy with ExitTime ThisClose. In either case, orders could not be generated in advance for this mode.With Intraday, NextOpen, or NextClose ExitStop orders, the trigger price is calculated using the prior bar, and the order can be placed in advance. A Intraday ExitStop is a standard STP DAY order.A NextOpen ExitStop is a MKT order that is placed if the prior close touched the stop price.A NextClose ExitStop is a STP order with a "good after time" clause with time a minute or two before the market closes.Note that the Exit Logic of a strategy works differently from its Entry Logic. Specifically, there is always only one Entry order, while there can be up to three Exit orders. The three exit order types each have their own time specifier and function as a "one-cancels-all" order bracket, where the order to logically trigger first becomes the position exit and the others do not.To implement a trailing stop price, use PrevExitStop in the ExitStop price calculation.For more information on how the backtest engine works in general, see Backtest Engine Details.
32717.18.176. ExitTime
CategoryStrategy ElementsDescriptionSpecifies when a strategy exits positions at market when the ExitRule condition is true (non-zero)ChoicesThisClose - exits occur at the close of the current dayNextOpen - exits occur at tomorrow's open (default)NextClose - exits occur at tomorrow's closeNotesUsing ThisClose implies an ability to generate realtime trading signals using live data. RealTest will not be able to generate Tomorrow's Orders for ThisClose exits.ExitTime controls the time at which a market order is generated. NextOpen implies that a standard MKT order is placed before the open, to be filled at the open. NextClose implies that a MOC order is placed before the open, to be filled at the close.For more information on how the backtest engine works in general, see Backtest Engine Details.
17.18.177. ExitTradeValue
CategoryStrategy ElementsDescriptionCalculates a value to store in T.ValueOut item in the trade list record for this exitInputAny formula specifying a numeric valueNotesThis item can be useful in Trade Statistics Functions, especially when applied to Results formulas which do not support access to bar data values or indicator functions.
17.18.178. Exp
CategoryGeneral-Purpose FunctionsDescriptionExponential function (e^x)SyntaxExp(value)Parameters
328value - formula
17.18.179. Extern
CategoryGeneral-Purpose FunctionsDescriptionEvaluate for a different stock/contract or strategy or bar sizeSyntaxExtern(item_reference, expression)Parametersitem_reference - a stock symbol, a strategy name, or a bar sizeexpression - formulaNotesThe default context in all formulas is the current stock for bar data items and the current strategy for daily stats items and position information.Extern allows you temporarily change context to a different stock or strategy or bar size.To reference a stock, use a $ to prefix the symbol of the desired stock, e.g. Extern($MSFT, C)If a stock symbol already starts with a $, e.g. $SPX, you will have to add another $, hence Extern($$SPX, C). The special symbol $CalSym can be used to reference the CalendarSym of the current strategy.See also Symbol References.There are also special types of Extern references available for individual futures contracts and corresponding industry index symbols.To reference a Strategy, Benchmark or StatsGroup, use a @ to prefix the name of the desired strategy, e.g. Extern(@mr_short, S.Equity).To reference the automatically-added Tracker benchmark of the current strategy, use @Tracker.To calculate a formula using a specific bar size, use a ~ to prefix the name of the bar size, e.g. Extern(~Weekly, MA(C, 20))Note that the expression referenced can be any formula, and it is most efficient to do as much as possible in a single Extern function. For example, Extern($SPY, C > MA(C,20)) would be preferable to Extern($SPY,C) > Extern($SPY, MA(C,20)) or, even worse, Extern($SPY,C) > MA(Extern($SPY,C), 20) -- though all would return the same result.It is also possible to refer to a dynamic (non-constant) external strategy or symbol, either by string or number, using StratRef or SymRef.The Extern function can be nested, e.g. Extern(@mystrat, Extern($XYZ, BarsHeld)) to determine how long mystrat has held a position in XYZ.
17.18.180. Extra
329CategoryBar Data ValuesDescriptionTurnover value from Norgate import, or user-defined Extra bar value from CSV import NotesNorgate's Turnover value is not simply Close * Volume. Rather, it is the sum of Price * Quantity of all intraday trades (ticks) in a day. As such, true daily VWAP (volume-weighted average price) can be calculated as Extra / Volume when data is from Norgate.With CSV import this field, which can also be referred to as Extra, will contain whatever values were included in the column defined as Extra in your CSV import.
17.18.181. F.xxx / F.xxx.Date
CategoryStock/Contract InformationDescriptionValue or report date of a current fundamental item that was imported from NorgateNotesNorgate current fundamentals can optionally be added to imported data by adding Fundamentals to your Import definition and specifying one or more fundamental items to obtain.Replace xxx with the name of an imported fundamental item, e.g. F.epsactualq, to access a value thus imported.Use F.xxx.Date, e.g. F.epsactualq.Date, to obtain the date on which this item was reported, according to Norgate.The Example Script fundamentals.rts shows how this all works:
33017.18.182. FeesInOut
FeesInOutStrategy ElementsDescriptionSpecifies deposits and/or withdarawals to/from the current equity of a strategy by formulaInputFormula expression returning an amount in dollarsNotesThis formula is evaluated once per day at the beginning of the day, before any trading signals are processed. The resulting amount is added to the equity of the strategy. The formula should return a positive value for deposits or a negative value for withdrawals, or 0 on dates when neither occurs.The simplest way to use this formula in a multi-strategy system is to give it its own strategy, as in the examples below.To provide a list of specific dates and amounts, use FeesList rather than FeesInOut. Unlike CashInOut, FeesInOut are included in all the stats calculations of a backtest, such as the 
331annual return, max drawdown, and daily net percent gain or loss.ExamplesPay $120/month to your broker for realtime data services:FeesInOut: if(EndOfMonth, -120, 0)See also the management_fees.rts example script.
17.18.183. FeesList
FeesListStrategy ElementsDescriptionSpecifies a CSV file that lists deposits and/or withdrawals to/from the current equity of a strategyInputPath to a CSV file with dates in the first column and amounts in the second columnNotesThe file can have any number of rows, and can have multiple rows for the same date.The header row is optional.Use positive amounts for deposits and negative amounts for withdrawals.Amounts for each date in a test are applied at the beginning of that day, before any trading signals are processed.If dates are weekend or holiday, they are applied to the next trading day.To specify deposits and withdrawals by formula, use FeesInOut rather than FeesList.Unlike CashList, items in FeesList are included in all the stats calculations of a backtest, such as the annual return, max drawdown, and daily net percent gain or loss.
17.18.184. FillFraction
CategoryCurrent Position InformationDescriptionEquity fraction of current position size at time of initial entry order (or actual entry)NotesFillFraction returns the initially ordered position size as a fraction of S.Alloc at the time of the order.This was the same fraction used to check the potential entry against the MaxExposure constraint.FillFraction is the same as the actual position size fraction unless a gap causes a difference between order price and entry price.The FillFraction of each trade becomes the T.Fraction value in the trade list.
33217.18.185. FillPrice
CategoryCurrent Position InformationDescriptionEntry fill price (or exit fill price when calculating commission or slippage for exit transactions)NotesFillPrice is generally the price per share at which this position was entered. This will match the PriceIn value from the backtest Trade List.In formulas evaluated at the same time as EntrySetup -- before tomorrow's entry price could have been known -- FillPrice returns OrderPrice by default.This automatic substitution of OrderPrice for FillPrice typically applies to:Â· QuantityÂ· ExitLimit and/or ExitStop for exit orders attached to an entry orderThe purpose of this automatic substitution is to ensure that a future backtest will match the orders that would have been generated and placed before the market open.On all subsequent days that a position is held, references to FillPrice return the actual entry price that was modeled.This entry-day substitution allows FillPrice to be used in your ExitLimit and ExitStop formulas without needing extra logic to use OrderPrice on entry day and FillPrice thereafter.If you would prefer that FillPrice always return the actual entry price (even for orders placed at the same time as the entry order when it could not have been known yet) add QtyPrice: FillPrice to the strategy definition. The one exception to FillPrice being the entry price (or order price) is when it is used in the Commission or Slippage formulas. Since those formulas are evaluated separately for the entry and exit sides of each round-trip trade, FillPrice automatically retrieves the exit price when these two formulas are evaluated at position exit time.
17.18.186. FillPriceAvg
CategoryCurrent Position InformationDescriptionAverage entry fill price of current position when pyramiding (MaxSameSym > 1)NotesFor pyrmiding strategies, FillPriceAvg returns the volume-weighted average price of all entry transactions in the current position.For non-pyramiding strategies, FillPriceAvg simply returns FillPrice.
17.18.187. FillPriceMax
CategoryCurrent Position Information
333DescriptionHighest entry fill price of current position when pyramiding (MaxSameSym > 1)NotesFor pyrmiding strategies, FillPriceMax returns the highest price of all entry transactions in the current position.For non-pyramiding strategies, FillPriceMax simply returns FillPrice.
17.18.188. FillPriceMin
CategoryCurrent Position InformationDescriptionLowest entry fill price of current position when pyramiding (MaxSameSym > 1)NotesFor pyrmiding strategies, FillPriceMin returns the lowest price of all entry transactions in the current position.For non-pyramiding strategies, FillPriceMin simply returns FillPrice.
17.18.189. FillQty
CategoryCurrent Position InformationDescriptionShares or contracts in current position at time of entryNotesFor most positions FillQty will be the same as Shares.The only time these quantities can differ is after a partial exit.Partial exits can be specified using ExitQty, ExitLimitQty, and/or ExitStopQty.Indeed the main purpose of FillQty is to facilitate expression of partial exit quantities in the above formulas.For example to exit one fourth of the original position on each of the first four days after entry, simply write:
17.18.190. FillValue
CategoryCurrent Position InformationDescriptionDollar value of current position at time of entry
334NotesFillValue returns the initial position size, in notional dollars, of the current position.This same value could be simply calculated as FillPrice * Shares * PointValue.The one exception to FillValue being the initial position size is when it is used in the Commission or Slippage formulas. Since those formulas are evaluated separately for the entry and exit sides of each round-trip trade, FillValue automatically retrieves the exit position size when these two formulas are evaluated at position exit time.If you need FillValue to be negative for short positions, multiply it by Side.
17.18.191. FilterNum
CategoryStock/Contract InformationDescriptionFilter formula number which the current stock passed on the current date during scan evaluationNotesThis syntax element is only applicable within a scan item definition. Scans with multiple filter formulas will loop through all the stocks on each date once for each provided filter, and include any symbol once for each filter it passes. FilterNum can then be used in the other scan output formulas to know which filter was just passed.See Multi-Row Scan for details and an example.
17.18.192. Find
CategoryString FunctionsDescriptionFind a string within another string and return its offsetSyntaxFind(string, substring)Parametersstring - a literal string enclosed in either double or single quotes ("string" or 'string') or a string functionsubstring - a string (or function) containing the substring to findReturn ValueThe offset to the substring if found, starting with 1 if found at the beginning of the string, or 0 if not found.NotesAll string comparisons in RealTest are case-insensitive.
17.18.193. Format
Category
335String FunctionsDescriptionFormat a string with embedded itemsSyntaxFormat("string", ...)Parametersstring - a literal string or string function result... - any number of comma-separated formulas corresponding to format codes embedded in the format stringNotesThe string parameter can contain one or more embedded Format Specifiers. Each one will correspond to a parameter passed to the function. The corresponding parameter (formula) is evaluated and its result is inserted in the string in place of the format specifier.An example this would be Format("5-day ROC {%2}", c / c[5] - 1).Use {?} to insert a string within another string. The parameter that corresponds with {?} can be either a literal string or a function that returns a string. You can even write nested Format functions if you can think of a reason to do so.
17.18.194. FormatDate
CategoryString FunctionsDescriptionConvert a date to a string in any formatSyntaxFormatDate(date, format)Parametersdate - numeric date value such as BarDate, 20240831, etc.format - Date Format PictureNotesIn script-specified output such as Scan items with {//} as their output format, dates are automatically formatted using the currently defined DateDisplay or the default as defined in Program Options. FormatDate is provided for the rare case where you need a specific date formatted differently from the current setting.
17.18.195. Fundamentals
CategoryImport SpecificationDescriptionList of one or more current fundamental items to include when importing Norgate dataNotes
336Norgate provides more than 160 current fundamental data items for each stock. To see the names and descriptions of these fields, add "Fundamentals: " to your Import section and then press F2 or start typing something. The auto-complete mechanism will guide you. Another way to quickly view all of the available fundamental items for a stock is to open a Chart and then select Get Information from the Chart Menu. To access the items thus imported, use F.xxx (where xxx is the item name) to get the value or F.xxx.Date to get its release date.The Example Script fundamentals.rts shows how this all works:
17.18.196. FunBar
CategoryBar Data ValuesDescriptionOrdinal number of a data bar within the the calculation of a multi-bar function. NotesA typical use case for FunBar is as the second argument to the Correl function when correlating a data series with a linear growth line.See also FunStat for the stats series version.FunBar makes it possible, in some cases, to calculate with a one-line function call a complex formula that otherwise need to be written with looping code.
337As a simple example of how this works, the following shows the evaluation steps of Sum(FunBar, 5):
Within the internal calculation loop of the Sum function, FunBar starts at 1 for the earliest bar, then is incremented as the calculation proceeds.For a more complex example, see the ehlers_windows.rts example script.
17.18.197. FunStat
CategoryDaily Test StatisticsDescriptionOrdinal number of a stat period within the calculation of a multi-bar functionNotesA typical use case for FunStat is as the second argument to the Correl function for correlating a stats series with a linear growth line.See also FunBar for the data series version.
17.18.198. FuturesMargin
CategoryStrategy ElementsDescriptionFutures margin requirement per contractInputFormula specifying dollars per contract of required marginNotesRealTest uses futures margin requirement data if available when a strategy trades futures and specifies either CashIntPct or MinFreeCash.
338Futures positions never "use margin" in the sense of having to borrow funds from the broker. Rather, futures margin is the cash collateral required to hold a position. Brokers typically do not pay interest on the cash used as collateral for futures positions and do not allow a position to be opened if there is insufficient cash to cover the margin requirement.Historical futures data typically does not include historical margin requirements. Norgate provides current margin requirements which RealTest imports and stores in InfoMargin. Users of other futures data sources can provide current margin requirements in their SymInfoFile if desired.If FuturesMargin is not specified in a strategy then InfoMargin is used by default. Provide a FuturesMargin formula if you want to calculate approximate historical margin requirements e.g. based on ATR.If a strategy does not provide FuturesMargin and a symbol does not have a value for InfoMargin then RealTest treats that symbol as non-futures for CashIntPct and MinFreeCash purposes.The total futures margin requirement in effect on each date of a test can be accessed via the S.FuturesMargin stats array.
17.18.199. FxRatio
CategoryCurrent Position InformationDescriptionForeign currency exchange ratio for this position on this dateNotesIf Currency was specified and the current symbol does not trade in that base currency and the needed FX conversion symbol was also imported then FxRatio will report the current currency conversion ratio for this position on this date.If any of the above conditions is not true then FxRatio will simply return 1.Since RealTest manages currency conversions at position entry and exit and adjusts daily mark-to-market position values by FX ratio, you're unlikely to need to use FxRatio directly. It is intended for use cases such as an informational daily TestScan output of open positions for all dates of a test.
17.18.200. GetField
CategoryString FunctionsDescriptionExtract a delimited substring from a stringSyntaxGetField(string, delimiter, instance)Parametersstring - a literal string enclosed in either double or single quotes ("string" or 'string') or a string functiondelimiter - a string (or function) containing the delimiter used to mark the start and/or end of a fieldinstance - the instance number of the field to return (1 being the first)Return Value
339The extracted field as a string.NotesThough delimiter is typically one character such as "," it can also be multiple characters.ExampleGetField("a-b-c", "-", 2) returns "b".
17.18.201. GreedyScoring
CategoryStrategy ElementsDescriptionDetermines whether strategy uses a special variant of top-down setup selectionChoicesTrue - use greedy scoring modeFalse - don't use greedy scoring mode (default)NotesGreedyScoring mode provides a way to employ a greedy algorithm within the top-down setup selection process.When enabled, this mode causes SetupScore to be re-evaluated for each setup at each step of the selection loop.This allows a kind of dynamic scoring process that includes each already-selected setup in the score for the next one.The main use case for this mode is to produce an optimally uncorrelated portfolio.The algorithm to do so works like this:while setup slots remain, select the available setup with the lowest average correlation to open positions and other setups selected so farSpecifically in a RealTest script (from the optimal_diversity.rts example):
      
SetupScore: Select(OrderSum(1) = 0 and PositionSum(1) = 0, score1, -CorrelAvg(IsOrder or Shares > 0, roc1, bars))In this example "score1" is calculated in Data and is only used when there are no open positions and no other setups selected yet, so nothing to correlate the new setup with:score1: if(setup, -CorrelAvg(setup, roc1, bars), nan)As can easily be imagined, re-evaluating CorrelAvg for a large number of symbols at each step of each period's setup selection loop can become VERY time consuming.This example restricts its universe to the S&P 100 (OEX) and operates on a weekly timeframe. Those constraints make backtest performance tolerably fast.There may be other use cases for GreedyScoring mode that do not involve correlation calculations.
17.18.202. Graphs
Category
340Script SectionsDescriptionDaily stats graph content definitions NotesSee Graphs Section and Daily Stats Graph Windows.
17.18.203. High or H
CategoryBar Data ValuesDescriptionCurrent bar high price NotesEither High or H can be used as the name of this value.
17.18.204. Highest or HHV
CategoryMulti-Bar FunctionsDescriptionHighest (largest) value in a seriesSyntaxHighest(expr, count) or HHV(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEither Highest or HHV can be used as the name of this function.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.205. HMA or HAvg
CategoryMulti-Bar FunctionsDescriptionHull moving averageSyntaxHMA(expr, count) or HAvg(expr, count)
341Parametersexpr - data series formulacount - lookback periodNotesEither HMA or HAvg can be used as the name of this function.The Hull moving average is calculated using nested weighted moving averages (WMA). HMA(expr, count) could be calculated as WMA((2 * WMA(expr, count/2) - WMA(expr, count)), SQR(count)).
17.18.206. HolidayList
CategorySettings or Strategy ElementsDescriptionSpecifies the path to a text file which contains a list of future holidays, or "us_auto"NotesThe purpose of the holiday list is to enable RealTest to know the next market date when generating orders.For backtesting, RealTest does not require a holiday list because there are simply no data bars with market holiday dates.There is therefore no reason to provide a holiday list except when generating orders.A settings-level HolidayList will apply to all strategies in the script.A strategy-level HolidayList only applies to that strategy and will override the settings-level list of both are provided.For US stock strategies you can specify HolidayList: us_auto and RealTest will calculate all US market holidays for the next several years.You can optionally specify HolidayList: us_auto_log to cause the generated holiday list to be written to a log window when a test is run.Note that the us_auto holiday list is calculated using NYSE holiday rules and does not include one-time holidays such as 2025-01-09.To specify holidays that aren't the same as the standard US ones, e.g. for another country, provide a text file with one holiday date per line.The Examples folder includes holiday list files for US, AU, and CA.Only future market holidays need to be listed (typically there are about 10 per year).Dates on which the market closes early should also be included, preceded by an asterisk, e.g. *2022-11-25. Early-close dates are used when generating orders that include specific times (good after time, good until date).
17.18.207. HVOL
CategoryIndicator Functions
342DescriptionHistorical volatilitySyntaxHVOL(len, ppy {252/52/12})Parameterslen - lookback periodppy - number of periods per year (optional)NotesHVOL(len) could be calculated as StdDev(log(c/c[1]),len) * 100 * Sqr(ppy).ppy defaults to S.BPY if the current bar size is Daily, 52 for Weekly, 12 for Monthly, 4 for Quarterly, 1 for Yearly.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.208. ICDF
CategoryGeneral-Purpose FunctionsDescriptionInverse Cumulative Distribution FunctionSyntaxICDF(value)Parametersvalue - formulaNotesThe inverse CDF converts cumulative probabilities into data values for a specified distribution, such as the normal distribution. This aids in trading indicator development by mapping normalized data back to meaningful price levels, helping to identify significant market thresholds.
17.18.209. IF
CategoryGeneral-Purpose FunctionsDescriptionConditional choice functionSyntaxIF(condition, if_true, if_false)Parameterscondition - formula specifying a true/false condition (non-zero means true)
343if_true - formula to evaluate and return the result of if condition is trueif_false - formula to evaluate and return the result of if condition is falseNotesOnly one the two formulas gets evaluated, depending on the condition. The function returns the result of evaluating the selected formula.This function can also be referred to as "IIF" if you prefer.
17.18.210. IgnoreDividends
CategoryStrategy ElementsDescriptionDetermines whether trade profits in a test include dividends paid while the position was heldChoicesTrue - don't include dividends in trade and test P/LFalse - include dividends in trade and test P/L (default)NotesThis strategy-level setting is only relevant if your imported data includes dividends as per-share amounts paid on ex-dividend dates rather than as dividend-adjusted prices.The default Adjustment mode for most DataSource choices (e.g. Norgate) is Capital, i.e. only adjust for stock splits, not for dividends.In this mode, RealTest by default applies each dividend received to the P/L of the trade and the test. For a long position, the dividend is a credit. For a short position it is a debit.Most users prefer to see the impact of dividends in their test results without having to use total-return adjustment.If you need to see results without dividends, e.g. for comparison with other software that doesn't support direct application of dividends to P/L, this strategy-level setting can be used to exclude dividends from your results.
17.18.211. Import
CategoryScript SectionsDescriptionData import specificationNotesSee Import Section.
17.18.212. Include
CategoryScript Sections
344DescriptionAllows a script to include another scriptSyntaxInclude: path where path is either a full file path (e.g. C:\RealTest\Scripts\script.rts) or a path relative to the Scripts folder (e.g. Examples\script.rts).NotesA script can include any number of other scripts by using multiple include statements.Included scripts can include other scripts, and so on (it's recursive).RealTest ensures that each specific script is included only once.Included scripts must contain entire script section definitions -- they cannot, for example, include just one part of a Strategy definition such as a set of exit-related items.The combined scripts are parsed as one large script, so each item name (Data items etc.) must be unique across the combined scripts.Suggested names in the script editor (auto-complete) will include any names defined in included scripts.Include is applied in all script run modes. To include another script in a specific mode only, use OrdersInclude, ScanInclude or TestInclude.See also Include Section.
17.18.213. IncludeList
CategoryImport SpecificationDescriptionList of one or more symbols to include when importing dataNotesAn Import Section can have any number of IncludeList statements.Each IncludeList statement can take one of the following forms:Â· One or more symbols, separated by commas (up to a maximum of 260 characters in total)Â· A path to a TXT file containing a list of symbols (one symbol per line with no commas)Â· A path to a CSV file in which a column of symbols has a name that contains "symbol" or "ticker" or "underlying"Â· The name of a Norgate watchlist, preceded by a dot (Norgate only)The symbols from all of the specified include lists are combined into a single internal list.If there are duplicates, only one copy of each symbol will be imported (from the first DataSource that includes it).A special syntax, SYMBOL>ALIAS, can optionally be used to rename a symbol after it is imported (e.g. AAPL>APPLE). This is meant to be used when you actually want to import the same symbol from two different sources, so that each can be uniquely identified.The number of the list in which a symbol first appears (whether literally or via an external file) is stored with the symbol and becomes the value return by ListNum when that symbol is the current context.Though a symbol is only imported once, it can be listed in more than one IncludeList. The InList(n) function can be used to check whether the current symbol was among the symbols in the nth IncludeList.
345An IncludeList can optionally be given a name. This is done by adding a squiggly-brace comment containing the name in quotes after the list definition, like this:
When a data file was imported using named include lists, a list name can optionally be used in place of the list number in the InList function, like this:
This can be a useful technique when combining multiple strategies in one script and therefore one Import definition. By default any date for which at least one imported symbol has a bar becomes part of the global date list used to run tests and scans.The symbols from an IncludeList can optionally be excluded from the global date list. This is useful, for example, when importing special symbols for risk-free interest rates, currency conversion etc. Often these symbols will include bars for dates which are otherwise market holidays. To prevent the symbols in an IncludeList from being added to the global date list, add the comment {//} to the same line in the script. If the list also requires a list name, use the same special comment, e.g. {"currency"//}.
17.18.214. InXXX
CategoryBar Data ValuesDescriptionNorgate Index constituency lookup (if specified during import)SyntaxInXXX where 'XXX' is a specific index symbol, e.g. InSPXNotesFor InXXX to return anything other than 0, the corresponding Constituency data series must have been included in the Import.See the Constituency topic for all the details about how this works.As with any other bar data value, you can use offset syntax with these. For example, InSPX > InSPX[1] would be a way to find dates on which stocks were added to the S&P 500, and InSPX < InSPX[1] would find dates on which they were removed.
17.18.215. InfoID
CategoryStock/Contract InformationDescriptionNorgate Asset ID for this symbolNotes
346Automatically provided when data is imported from Norgate.To provide this field in your own SymInfoFile, use the AssetId column.The Asset ID is an integer.
17.18.216. InfoDelist / InfoExpiry
CategoryStock/Contract InformationDescriptionStock delisting date or futures contract expiration dateNotesWhen using CSI Futures continuous contract data, InfoExpiry returns the expiration date of the individual contract that would be held on the date of the current bar for which the formula is being evaluated.When using Norgate futures data, InfoExpiry is only provided for individual contract symbols.With Norgate stock data, InfoDelist shows the delisting date for delisted symbols.To provide this field in your own SymInfoFile, use the DelistDate column.
17.18.217. InfoFloat
CategoryStock/Contract InformationDescriptionThe number of shares in circulation (float) for a stockNotesThis piece of information is provided automatically when data is imported from Norgate.This is not a historical data series. The number returned is always the current value.
17.18.218. InfoGICS
CategoryStock/Contract InformationDescriptionGlobal Industry Classification Standard code NotesAutomatically provided when data is imported from Norgate.See the GICS entry in Wikipedia for details.The InfoGICS code is available regardless of the Classification scheme used during import.
347To isolate the upper digits of the code, use the Top function.If the import classification scheme was GICS then level-specific names such as ?Sector are also available.
17.18.219. InfoMargin
CategoryStock/Contract InformationDescriptionFutures contract margin requirementNotesAutomatically provided when data is imported from Norgate.To provide this field in your own SymInfoFile, use the Margin column.Note that this is just a current value, not a historical data series.
17.18.220. InfoShares
CategoryStock/Contract InformationDescriptionNumber of shares in existence (outstanding) for a stockNotesThis piece of information is provided automatically when data is imported from Norgate.This is not a historical data series. The number returned is always the current value.
17.18.221. InfoTRBC
CategoryStock/Contract InformationDescriptionThomson Reuters Business Classification code NotesAutomatically provided when data is imported from Norgate.See the TRBC entry in Wikipedia for details.The InfoTRBC code is available regardless of the Classification scheme used during import.To isolate the upper digits of the code, use the Top function.If the import classification scheme was TRBC then level-specific names such as ?Sector are also available.
34817.18.222. InList
CategoryStock/Contract InformationDescriptionChecks whether this symbol was part of a specific IncludeList when it was importedParametersThe single parameter to this function can be either a list number, e.g. InList(2) or a list name, e.g. InList("my_list")NotesIf the current data file was imported using multiple IncludeList statements, InList can be used to filter symbols based on their include list membership.This is especially useful when a strategy uses one set of symbols for trading and a different set of symbols for calculating an indicator.Here is a contrived example:
A breadth indicator is constructed using NDX components by counting how many of them are above their 20-day averages.The strategy trades only DJIA components and only when the NDX breadth indicator is above 80.This example could also have used Constituency: $NDX, $DJI and replaced the InList(1) with InNDX and InList(2) with InDJI. Using historical index constituency (requires Norgate Platinum subscription) is recommended for backtests in order to avoid survivorship bias. The InList technique is shown here is only advisable for daily scans or very recent backtests.For examples of other ways to use InList, see combined.rts and vigilant_asset_allocation.rts in the Examples folder.See the example at the end of the IncludeList page for information on how to refer to an include list by name rather than by number.See also ListNum, which returns the number of the first list that included a symbol.
17.18.223. InSet
CategoryGeneral-Purpose FunctionsDescriptionWhether a value is in a specific set of valuesSyntaxInSet(value, value1, value2, value3, ...)
349Parametersvalue - the value to look upvalue1...valueN - values to compare it toReturn Value1 (true) if value is one of the set of values, 0 (false) otherwiseNotesInSet(Symbol, $AAPL, $GOOGL, $MSFT) is equivalent to:Symbol = $AAPL or Symbol = $GOOGL or Symbol = $MSFTArguments can be numeric or strings. If strings then comparison is case-insensitive.
17.18.224. IsExit
CategoryCurrent Position InformationDescriptionTrue when the formula being evaluated pertains to a position being exitedNotesIsExit is provided for the few strategy formulas that are evaluated at both entry time and exit time.This include:Â· CommissionÂ· SlippageÂ· OrderNote / OrderExtraUse IsExit in any of the above formulas as needed to differentiate entry vs. exit values.For example in a long strategy you could account for the extra SEC Section 31 fee on the sale of shares:
17.18.225. IsNan
CategoryGeneral-Purpose FunctionsDescriptionReturns 1 (true) if formula can't be evaluated, or 0 (false) if it can.SyntaxIsNan(value)Parametersvalue - formulaNotesThe most common reason that a formula can't be evaluated is that it tries to refer to more bars of 
350data than are currently available. For example, if you import data for SPY starting 1/2/2010 and then try to calculate a 200-day moving average for 2/1/2010, there are not enough bars yet, so Avg(C,200) will return NAN, and IsNan(AVG(C,200)) will return TRUE.Once any term of any formula evaluates to NAN, the result of the entire formula becomes NAN. This is why it can be useful to find out if a specific term is NAN before evaluating the entire formula. The IIF function is useful for this purpose.The constant NAN can also be used in any formula (wherever a number is expected) to force the formula evaluation to fail. (NAN stands for "not a number".)A great use for this NAN constant is when calculating a breadth function where you only want index constituents to be included for each date.Say you want to know the median price per share of all stocks in the S&P 500 for each date in the past. This example shows how to specify the Import, set up the Data section and run the Scan:
Notice how each of the three columns shows different values.MedC ignores index constituency so it includes all symbols that are no longer in the index (mostly penny stocks now).MedC0 filters out non-constituents, but by substituting 0 for their prices, it skews the median value even lower than the the prior column.MedX returns the correct values, because when a NAN is encountered by the cross-sectional calculator, that item is simply excluded from the calculation.
35117.18.226. IsOrder
CategoryCurrent Position InformationDescriptionReturns 1 (true) if the current stock passed EntrySetup for the specified strategy and was not "skipped" for any reason (MaxSetups, MaxPositions, etc.)NotesWithout Combined or Extern, IsOrder applies only to the current stock in the current strategy.When used with Combined or Extern, IsOrder returns the count of strategies for which the current stock is a setup and has not been "skipped".
17.18.227. IsSetup
CategoryCurrent Position InformationDescriptionReturns 1 (true) if the current stock passed EntrySetup for the specified strategy NotesWithout Combined or Extern, IsSetup will by definition be 0 (false) when referenced in EntrySetup, or 1 (true) in any other entry-related formula, since the others are only evaluated for setups.When used with Combined or Extern, IsSetup returns the count of strategies for which the current stock met the EntrySetup condition.Since IsSetup remains true even for skipped setups, IsOrder is generally more useful for avoiding duplicate entries in the same symbol.
17.18.228. IsTracker
CategoryCurrent Strategy InformationDescriptionIndicates whether the strategy is being processed as itself or as its tracking benchmarkNotesWhen a strategy specifies Tracker as either Visible or Hidden, a Benchmark copy of the strategy is internally added.This means that each formula defined by the strategy is evaluated twice per test day: once for the strategy and once for its tracking benchmark.IsTracker can be used in any formula that needs to do something different depending on which one is being evaluated.See the mr_sample_tracking.rts example script for a simple example of Tracker and IsTracker 
352usage.See the oex_tf_auto_track.rts example script and its description in the StratData section topic for a more complex example.
17.18.229. Item
CategoryGeneral-Purpose FunctionsDescriptionReference a Data Item, Library Item or Test Parameter by nameSyntaxItem(name, ...)Parametersname - string specifying an item nameNotesThis function works the same way Format does in terms of its parameters. The output is then treated as an item name. For example, Item("entry_rule_{#}", rule_num) would look for an item called "entry_rule_1" if rule_num had a value of 1.The referenced item must be the name of an item in either the Data or Library section of the current script (or an included script).One use of this feature is to have a set of different factors that could be parts of an EntrySetup or ExitRule, for which you can run a kind of optimization that tests each factor separately.Here is a template for how this might work:
(The "(formula)" items are just placeholders for meaningful trading conditions.)
17.18.230. KAMA
CategoryMulti-Bar FunctionsDescription
353Kaufman Adaptive Moving AverageSyntaxKAMA(expr, erlen, fastest, slowest)Parametersexpr - data series formulaerlen - lookback length for the Efficiency Ratio calculation used to adapt the EMA lengthfastest - shortest EMA equivalent lookback periodslowest - longest EMA equivalent lookback periodNotesKAMA is a kind of exponential moving average which adapts its weighting factor (often mistaken for a lookback length) at each bar of its calculation by computing the Kaufman Efficiency Ratio and using that to determine that bar's weighting.The most common parameters are KAMA(expr, 10, 2, 30).See stockcharts.com for further details.This function supports one-pass calculation when used in the Data Section with non-variable length parameters.
17.18.231. KBBot
CategoryCategoryIndicator FunctionsDescriptionKeltner band (channel) bottomSyntaxKBBot(len, atrs)Parameterslen - lookback periodatrs - number of ATRsNotesIt's not clear that there's a "standard" way to implement Keltner channels. The center line could be either a simple or an exponential average. The ATR might use a simple average, EMA, or Wilder's smoothing. This function is a shortcut for EMA(C, len) - atrs * EMA(TR, len).This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.232. KBTop
CategoryIndicator FunctionsDescriptionKeltner band (channel) topSyntax
354KBTop(len, atrs)Parameterslen - lookback periodatrs - number of ATRsNotesIt's not clear that there's a "standard" way to implement Keltner channels. The center line could be either a simple or an exponential average. The ATR might use a simple average, EMA, or Wilder's smoothing. This function is a shortcut for EMA(C, len) + atrs * EMA(TR, len).This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.233. KeepAdjusted
CategoryImport SpecificationDescriptionWhether to keep imported price and volume data values split-adjusted rather than as-tradedChoicesFalse - don't keep adjusted (default)True - keep adjustedNotesIn most cases, False is the recommended choice.If True is selected, all prices used or shown in any context are adjusted for future splits. If True is selected and the data source provides it, the Extra field is used to store the unadjusted close in each bar.See Split Handling for details on how RealTest uses unadjusted data with knowledge of split factors to provide realistic as-traded backtests.
17.18.234. KeepNonIncluded
CategoryImport SpecificationDescriptionWhether to keep all files found in local file data path when IncludeList is usedChoicesFalse - only import the symbols in the IncludeList if specified (default)True - import all files (symbols) found even when IncludeList is specifiedNotesWith database (whether local or cloud) data sources (Norgate, Tiingo, Yahoo, etc.) it is always true that only the symbols listed in one or more IncludeList definitions will be imported. With local file data sources (CSV, CSIFutures, CSIStocks, Metastock) we often want to simply import all the files found in the specified DataPath locations.By default, with local file sources, the use of an IncludeList acts like a filter, meaning "only include 
355these symbols".KeepNonIncluded enables IncludeList to be used to define named/numbered subsets of the available symbols while still importing all of them.
17.18.235. KeepRedundant
CategoryImport SpecificationDescriptionWhether to keep multiple redundant stocks of the same company in the data fileChoicesFalse - don't keep redundant stocks (default)True - keep redundant stocksNotesBy default, when you import data that includes company names, RealTest uses the names to look for redundancies. Specifically, if two names include " class " or " series " (note the spaces on either side of each string), and the strings up to and including that word are identical, then the two stocks are considered redundant.When a pair of redundant stocks is found, the most recent 20-day average turnover is calculated for each, and only the one with the larger average turnover is kept.Redundant stocks that were removed are shown in the Import Log if one was created, like this example for the Norgate Nasdaq 100 Current & Past watchlist:
35617.18.236. KeepTrades
CategorySettingsDescriptionSpecifies which categories of trades to store in each test results recordChoices (multiple, separated by commas)None - don't keep any trades (a good choice when running large optimizations)Strategy - keep regular strategy trades (the most common choice)Benchmark - keep benchmark strategy tradesSkipped - keep trades (setups) that were skipped for various reasonsAll - a one-word shortcut for all of the above (except none)NotesIf KeepTrades is not specified in a script then the choices from the Settings Panel will be used.
17.18.237. Kurtosis
CategoryMulti-Bar FunctionsDescriptionStatistical measure of the heaviness of the tail of a distribution of valuesSyntaxKurtosis(expr, count)Parametersexpr - data series formulacount - lookback periodNotesKurtosis is calculated in the way that Excel would calculate a KURT.P function if it had one, i.e., as if the set of count values is the entire population.The specific formula used is shown below, in the "kurt" item:
This also illustrates how these statistical functions could be calculated in the Data Section of a script, though since they're provided built-in, there's no reason to do so.This function supports one-pass calculation when used in the Data Section with a non-variable count.See also StdDev and Skewness.
17.18.238. Left
357CategoryString FunctionsDescriptionReturn the left end of a stringSyntaxLeft(string, length)Parametersstring - a literal string or string function resultlength - the number of characters to include
17.18.239. Length
CategoryString FunctionsDescriptionReturn the number of characters in a stringSyntaxLength(string)Parametersstring - a literal string or string function result
17.18.240. Library
CategoryScript SectionsDescriptionNamed formulas calculated when they are referenced, using the current contextNotesSee LibrarySection for a more detailed description.
17.18.241. LimitExtra
CategoryStrategy ElementsDescriptionExcursion beyond a limit price to require before assuming the limit order was filledInputAny formula specifying dollars per share (points)
358NotesIf this element is not specified or evaluates to 0, then limit orders are assumed to fill completely whenever the limit price is within the range of the day. This will be true even if the price happens to match the exact high or low. In live trading it is not realistic to assume that limit orders very near the high or low of the day will be filled.By using LimitExtra, you can make your trading model more realistic.The value returned by this formula should specify a number of points (price per share) to require as the minimum extra excursion beyond the limit price.A very simple assumption is LimitExtra: TickSizeFor stocks, this is equivalent to Limitextra: 0.01To assume that a larger spread is required for higher priced stocks, use a percentage instead, such as LimitExtra: 0.001 * C {0.1% of price}It makes sense to use LimitExtra if you use standard limit orders when trading your strategy, or use LimitSlip if you use "market if touched" or "not held" (discretionary) limit orders.See also EntryLimit, ExitLimit.
17.18.242. LimitSlip
CategoryStrategy ElementsDescriptionSlippage amount, in points (dollars per share or contract), for each limit order transactionInputAny formula specifying dollars per share or contract (points)NotesDefines the amount of slippage to apply to each limit order transaction, in price points. LimitSlip is applied to any transaction that occurs at an EntryLimit or ExitLimit price.If LimitSlip is not specified then Slippage is applied instead.When a strategy uses both EntryStop and EntryLimit (enters positions with a stop-limit order) and the fill is at the stop price, StopSlip is applied.When using LimitSlip: 0 consider testing with non-zero LimitExtra.
17.18.243. LinReg
CategoryMulti-Bar FunctionsDescriptionLinear regressionSyntaxLinReg(expr, {expr2,} count)
359Parametersexpr - data series formula (Y values)expr2 - optional second data series formula (X values -- a linear series from 1 to count is used if omitted)count - lookback periodNotesCalculates the endpoint of a linear regression of expr evaluated for the previous count bars.This is equivalent to YInt + (Slope * latest_x_value).This function is equivalent to =FORECAST in Excel.
17.18.244. ListNum
CategoryStock/Contract InformationDescriptionThe number of the first import IncludeList which contained this symbolNotesSee also InList, which can be used to check whether the current symbol was in a specific IncludeList.For an import where each symbol only appears in one include list, ListNum==n is equivalent to InList(n).InList(n) will always be true when ListNum==n, but ListNum==n will only be true if n is the first list to contain the symbol.When CIIFamily and CIILevel are used with Norgate Import, corresponding industry index symbols are automatically imported for each specific symbol that has one. These automatically imported symbols are placed in a virtual include list with the number 99. See cii_rotate.rts in the Examples folder for further clarification on how this CII mechanism works.
17.18.245. Log
CategoryGeneral-Purpose FunctionsDescriptionNatural logarithm of a numberSyntaxLog(value)Parametersvalue - formulaNotesA daily log return could be calculated as Log(S.Equity/S.Equity[1]).Weekly would be Log(S.Equity/S.Equity[5]).The log return of a trade (for display in the trade list window, assuming long side) would be 
360Log(T.PriceOut/T.PriceIn).
17.18.246. LogFile
CategoryImport SpecificationDescriptionPath and name of an import log file to create NotesIf LogFile is specified, the file is created at the start of the import, written to during the import, and then opened to a Log Window when the import finishes.Here is a simple example where the DJIA components were imported but stocks above $100/share were excluded from the import. The log shows which those were.
361The "Events" column in this case shows how many ex-dividend dates there were in this time period for each stock. If a custom event list is used, the count of those events would be shown here as well.
17.18.247. Logit
CategoryGeneral-Purpose FunctionsDescriptionInverse Logistic FunctionSyntaxLogit(value)Parametersvalue - formulaNotesThe Logit function transforms probabilities from the range [0, 1] back to the real number line 
In trading, it can be used to revert normalized probability-based data to meaningful market values, aiding in the interpretation of logistic regression models.Logit(value) is calculated as Log(value / (1 - value)).
17.18.248. Low or L
CategoryBar Data ValuesDescriptionCurrent bar low price NotesEither Low or L can be used as the name of this value.
17.18.249. Lowest or LLV
CategoryMulti-Bar FunctionsDescriptionLowest (smallest) value in a seriesSyntaxLowest(expr, count) or LLV(expr, count)Parametersexpr - data series formulacount - lookback period
362NotesEither Lowest or LLV can be used as the name of this function.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.250. MA or Avg
CategoryMulti-Bar FunctionsDescriptionSimple Moving AverageSyntaxMA(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEither MA or Avg can be used as the name of this function.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.251. MACD
CategoryIndicator FunctionsDescriptionMoving Average Convergence DivergenceSyntaxMACD(len1, len2)Parameterslen1 - faster moving average period (typically 12)len2 - slower moving average period (typically 26)NotesMACD is the difference between two moving averages. It is calculated as EMA(C,len1) - EMA(C,len2).This indicator supports one-pass calculation when used in the Data Section with non-variable lengths.
17.18.252. MACDH
363CategoryIndicator FunctionsDescriptionMACD HistogramSyntaxMACDH(len1, len2, len3)Parameterslen1 - faster moving average period (typically 12)len2 - slower moving average period (typically 26)len3 - signal smoothing period (typically 9)NotesMACDH is the difference between MACD and its signal line.It is calculated as MACD(len1,len2) - MACDS(len1, len2, len3).This indicator supports one-pass calculation when used in the Data Section with non-variable lengths.
17.18.253. MACDS
CategoryIndicator FunctionsDescriptionMACD Signal LineSyntaxMACDS(len1, len2, len3)Parameterslen1 - faster moving average period (typically 12)len2 - slower moving average period (typically 26)len3 - signal smoothing period (typically 9)NotesMACDS is an EMA-smoothed version of MACD.This is also know as the "signal line".It is calculated as EMA(MACD(len1,len2),len3).This indicator supports one-pass calculation when used in the Data Section with non-variable lengths.
17.18.254. MarginIntPct
CategorySettingsDescriptionInterest rate paid for negative daily excess cash (margin loan)
364NotesIf the settings also provide a RiskFreeRateSym then MarginIntPct is added to the current daily interest rate as determined by today's value of the risk-free rate series. For example if your broker charges 1.5% more than the fed funds rate for margin loans then specify MarginIntPct: 1.5.If MarginIntPct is provided when there is no RiskFreeRateSym setting then MarginIntPct is simply the annualized margin interest rate, e.g. MarginIntPct: 6.5.Daily net interest received or paid is added to combined S.Equity and therefore becomes part of the total return of the backtest.The stats series S.Interest can be used to graph or reference the cumulative net interest received or paid in the account.See also CashIntPct which specifies the interest rate received for positive excess cash.
17.18.255. MarkToMarket
CategoryStrategy ElementsDescriptionDetermines whether strategy equity includes open-position mark-to-market valueChoicesTrue - equity includes mark-to-market (default)False - equity is closed-trade-basisNotesThis setting changes the value of S.Equity. By default, S.Equity is updated daily as (starting capital) + (net closed trade profits) + (net open position mark to market values). If MarkToMarket: False is added to a strategy, then its S.Equity series becomes (starting capital) + (net closed trade profits).This setting also affects the internal calculations of S.DDDlr, S.DDPct, S.MaxDDDlr, S.MaxDDPct, S.NetDlr and S.NetPct. It also affects the default value of Allocation if no formula is provided, since that default is Combined(S.Equity).
17.18.256. Match
CategoryString FunctionsDescriptionDetermine whether a string matches a patternSyntaxMatch(string, pattern)Parametersstring - a literal string enclosed in either double or single quotes ("string" or 'string') or a string functionpattern - a string (or function) defining the pattern to check the string againstNotesThe string and pattern are compared character by character.? in the pattern can match any single character in the string.
365* in the pattern can match zero or more characters in the string.Otherwise, the characters must match exactly (ignoring case for letters).ExamplesMatch("test1", "test2") is FalseMatch("test1", "test?") is TrueMatch("test1", "*test") is FalseMatch("test1", "test*") is TrueCommon UsesDoes string contain "XYZ"?ÃMatch(string, "*XYZ*")Does a string start with "XYZ"?ÃMatch(string, "XYZ*")Does string end with "XYZ"?ÃMatch(string, "*XYZ")Symbol Information (Norgate)Was a stock delisted in 1995?ÃMatch(?Symbol, "*-1995??") Is the current symbol an individual ES futures contract?ÃMatch(?Symbol, "ES-*") Does the industry of the current stock have anything to do with oil?ÃMatch(?Industry, "*oil*")
17.18.257. Max
CategoryGeneral-Purpose FunctionsDescriptionLargest of a group of valuesSyntaxMax(value1, value2, ...)Parametersvalue1 - any formulavalue2 - any formula... - any number of additional comma-separated formulasNotesThis function evaluates each of the formulas passed to it and returns the largest value found.
36617.18.258. MaxN
CategoryGeneral-Purpose FunctionsDescriptionNth largest of a group of valuesSyntaxMaxN(N, value1, value2, ...)ParametersN - number from 1 to count of valuesvalue1 - any formulavalue2 - any formula... - any number of additional comma-separated formulasNotesThis function evaluates each of the formulas passed to it and returns the Nth largest value found.MaxN(1, value1, value2) is the same as Max(value1, value2).
17.18.259. MaxCatExp
CategoryStrategy ElementsDescriptionPercent exposure limit for positions in the same category for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxCatExp is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups and open positions in that category would not exceed the percent of S.Alloc expressed as MaxCatExp.Use the Category formula to define the category of any security.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max cat exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxCatExp is not specified then there is no limit placed on same-category exposure level, though there might still be same-category constraints if the strategy specifies MaxCatInv or MaxSameCat.Note that opening gaps beyond a specified order price may cause actual same-category exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended exposure to the same category".See Also: Backtest Engine Details and Capacity Constraints
17.18.260. MaxCatInv
367CategoryStrategy ElementsDescriptionDollar investment limit for positions in the same category for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxCatInv is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups and open positions in that category would not exceed the dollar value expressed as MaxCatInv.Use the Category formula to define the category of any security.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max cat inv" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxCatInv is not specified then there is no limit placed on same-category investment, though there may still be same-symbol constraints if the strategy specifies MaxCatExp or MaxSameCat.Note that opening gaps beyond a specified order price may cause actual same-category investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended investment in the same category".See Also: Backtest Engine Details and Capacity Constraints
17.18.261. MaxEntries
CategoryStrategy ElementsDescriptionCaps the number of actual position entries per dayInputAny formula that returns a countNotesMaxEntries is a specialized formula that is only needed when modeling strategies that allow more setups than entries. It should NOT be used as a general-purpose strategy constraint. Use MaxNewPos if you want to cap the daily new position count at order time. See also EntryScore.
17.18.262. MaxExposure
CategoryStrategy Elements
368DescriptionOpen position exposure limit for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxExposure is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups selected so far plus current S.Invested of open positions divided by current S.Alloc would not exceed the percentage expressed as MaxExposure.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max exposure" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxExposure is not specified then there is no limit placed on total percent exposure, though there might still be investment limits if the strategy specifies MaxInvested and/or MaxPositions.To cap exposure at the strategy's current allocation use MaxExposure: 100.Note that opening gaps beyond a specified order price may cause actual exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended exposure".See Also: Backtest Engine Details and Capacity Constraints
17.18.263. MaxInvested
CategoryStrategy ElementsDescriptionDollar investment limit for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxInvested is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups selected so far plus current S.Invested of open positions would not exceed the dollar value expressed as MaxInvested.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max invested" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxInvested is not specified then there is no limit placed on total dollar investment level, though there might still be investment limits if the strategy specifies MaxExposure and/or MaxPositions.To cap investment at the strategy's current allocation use MaxInvested: S.Alloc, or more simply MaxExposure: 100.Note that opening gaps beyond a specified order price may cause actual investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended investment".See Also: Backtest Engine Details and Capacity Constraints
36917.18.264. MaxLongExp
CategoryStrategy ElementsDescriptionOpen long position exposure limit for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxLongExp is one of the Capacity Constraints formulas used in the setup selection process.A long setup is only selected if its position size plus those of other long setups selected so far plus current S.LongInv of open positions divided by current S.Alloc would not exceed the percentage expressed as MaxLongExp.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max long exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxLongExp is not specified then there is no limit placed on long percent exposure, though there might still be a long investment limit if the strategy specifies MaxLongInv.Note that opening gaps beyond a specified order price may cause actual long exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended long exposure".See Also: Backtest Engine Details and Capacity Constraints
17.18.265. MaxLongInv
CategoryStrategy ElementsDescriptionDollar investment limit in long positions for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxLongInv is one of the Capacity Constraints formulas used in the setup selection process.A long setup is only selected if its position size plus those of other long setups selected so far plus current S.LongInv of open positions would not exceed the dollar value expressed as MaxLongInv.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max long inv" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxLongInv is not specified then there is no limit placed on long dollar investment level, though there might still be a long investment limit if the strategy specifies MaxLongExp.Note that opening gaps beyond a specified order price may cause actual long investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended long 
370investment".See Also: Backtest Engine Details and Capacity Constraints
17.18.266. MaxNetExp
CategoryStrategy ElementsDescriptionMaximum net long-short position exposure for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxNetExp is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its signed position size plus those of other setups selected so far plus current net S.LongExp - S.ShortExp of open positions divided by current S.Alloc would not exceed the percentage expressed as MaxNetExp. (In practice only a long setup could trigger this constraint.)If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max net exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxNetExp is not specified then there is no upper limit placed on net percent exposure, though there might still be a net investment upper limit if the strategy specifies MaxNetInv.Note that opening gaps beyond a specified order price may cause actual long exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended net exposure".See Also: Backtest Engine Details and Capacity Constraints
17.18.267. MaxNetInv
CategoryStrategy ElementsDescriptionMaximum net long-short dollar investment for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxNetInv is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its signed position size plus those of other setups selected so far plus current net S.LongInv - S.ShortInv of open positions would not exceed the dollar value expressed as MaxNetInv. (In practice only a long setup could trigger this constraint.)If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max net inv" in the Reason column of the Trade List, 
371provided that the KeepTrades setting included Skipped.If MaxNetInv is not specified then there is no upper limit placed on net dollar investment level, though there might still be a net upper limit if the strategy specifies MaxNetExp.Note that opening gaps beyond a specified order price may cause actual net investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended net investment".See Also: Backtest Engine Details and Capacity Constraints
17.18.268. MaxNewExp
CategoryStrategy ElementsDescriptionCaps the added exposure from entry orders placed per day by a strategyInputAny formula that returns a percentageNotesAt each step of the setup selection process, MaxNewExp is considered along with each of the other top-down constraints.If, for example, MaxNewExp is 20 and there have already been two other setups with 10% position size selected for order placement, this setup will be rejected even if adding it would not violate any other constraint.See Also: Backtest Engine Details and Capacity Constraints
17.18.269. MaxNewInv
CategoryStrategy ElementsDescriptionCaps the added investment from entry orders placed per day by a strategyInputAny formula that returns a dollar amountNotesAt each step of the setup selection process, MaxNewInv is considered along with each of the other top-down constraints.If, for example, MaxNewInv is $10,000 and there have already been two other setups with $5,000 position size selected for order placement, this setup will be rejected even if adding it would not violate any other constraint.See Also: Backtest Engine Details and Capacity Constraints
17.18.270. MaxNewPos
CategoryStrategy Elements
372DescriptionCaps the number of entry orders placed per day when a strategy has more setups than can be enteredInputAny formula that returns a countNotesAt each step of the setup selection process, MaxNewPos is considered along with each of the other top-down constraints.If, for example, MaxNewPos is 3 and there have already been three other setups selected for order placement, this setup will be rejected even if adding it would not violate any other constraint.See Also: Backtest Engine Details and Capacity Constraints
17.18.271. MaxPerTurn
CategoryStrategy ElementsDescriptionDefines how many setups per turn a strategy can select during the top-down setup selection processInputAny formula that returns a countNotesThe default is 1, meaning that each strategy selects only one setup per turn of the selection process.To allow a strategy to select all of its setups on its first turn, use a large number (e.g. its maximum positions).Selecting a setup means adding that setup to the list of tomorrow's entry orders.See Also: Backtest Engine Details and Capacity Constraints
17.18.272. MaxPositions
CategoryStrategy ElementsDescriptionOpen position count limit for a strategy or group of strategiesInputAny formula specifying a countNotesMaxPositions is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if the count of currently open positions plus previously selected setups plus one would not exceed the value returned by this formula.Setups skipped for this reason display "max positions" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.
373If MaxPositions is not specified then there is no limit placed on the number of open positions, though there might still be investment limits if the strategy specifies MaxExposure and/or MaxInvested.See Also: Backtest Engine Details and Capacity Constraints
17.18.273. MaxSameCat
CategoryStrategy ElementsDescriptionLimits the number of same-category positions that can be open simultaneously in a strategy or group of strategiesInputAny formula specifying a countNotesMaxSameCat is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if the count with the same category as this setup of currently open positions plus previously selected setups plus one  would not exceed the value returned by this formula.Use the Category formula to define the category of any security.Setups skipped for this reason display "max same category" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxSameCat is not specified then there is no limit placed on the number of same-category positions.See Also: Backtest Engine Details and Capacity Constraints
17.18.274. MaxSameSym
CategoryStrategy ElementsDescriptionCount limit for positions in the same symbol for a strategy or group of strategiesInputAny formula specifying a countNotesMaxSameSym is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if the count of currently open positions plus previously selected setups plus one in that symbol would not exceed the value returned by this formula.Setups skipped for this reason display "max same symbol" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.The default MaxSameSym for each individual Strategy is 1, i.e., by default no strategy can hold more than one position in the same symbol.For StatsGroup or Combined, the default is "unlimited", though there might still be same-symbol limits if the strategy specifies MaxSymExp and/or MaxSymInv.
374See Also: Backtest Engine Details and Capacity Constraints
17.18.275. MaxSetups
CategoryStrategy ElementsDescriptionCaps the number of entry setups per day when a strategy has more setups than can be enteredInputAny formula that returns a countNotesMaxSetups is applied before any other capacity constraints. After building the list of symbols that meet the EntrySetup conditions, the list is sorted by SetupScore. The setup list is then truncated at MaxSetups.The only common use case for this constraint is to make tests run faster by trimming the setup list before processing the setups.See Also: Backtest Engine Details and Capacity Constraints
17.18.276. MaxShortExp
CategoryStrategy ElementsDescriptionOpen short position exposure limit for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxShortExp is one of the Capacity Constraints formulas used in the setup selection process.A short setup is only selected if its position size plus those of other short setups selected so far plus current S.ShortInv of open positions divided by current S.Alloc would not exceed the percentage expressed as MaxShortExp.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max short exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxShortExp is not specified then there is no limit placed on short percent exposure, though there might still be a short investment limit if the strategy specifies MaxShortInv.Note that opening gaps beyond a specified order price may cause actual short exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended short exposure".
375See Also: Backtest Engine Details and Capacity Constraints
17.18.277. MaxShortInv
CategoryStrategy ElementsDescriptionDollar investment limit in short positions for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxShortInv is one of the Capacity Constraints formulas used in the setup selection process.A short setup is only selected if its position size plus those of other short setups selected so far plus current S.ShortInv of open positions would not exceed the dollar value expressed as MaxShortInv.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max short inv" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxShortInv is not specified then there is no limit placed on short dollar investment level, though there might still be a short investment limit if the strategy specifies MaxShortExp.Note that opening gaps beyond a specified order price may cause actual short investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended short investment".See Also: Backtest Engine Details and Capacity Constraints
17.18.278. MaxSymExp
CategoryStrategy ElementsDescriptionPercent exposure limit for positions in the same symbol for a strategy or group of strategiesInputAny formula specifying a percentageNotesMaxSymExp is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups and open positions in that symbol would not exceed the percent of S.Alloc expressed as MaxSymExp.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max sym exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxSymExp is not specified then there is no limit placed on same-symbol exposure level, though 
376there might still be same-symbol constraints if the strategy specifies MaxSymInv or MaxSameSym.Note that opening gaps beyond a specified order price may cause actual same-symbol exposure to exceed the specified cap in some situations -- think of this constraint as "maximum intended exposure to the same symbol".See Also: Backtest Engine Details and Capacity Constraints
17.18.279. MaxSymInv
CategoryStrategy ElementsDescriptionDollar investment limit for positions in the same symbol for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMaxSymInv is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its position size plus those of other setups and open positions in that symbol would not exceed the dollar value expressed as MaxSymInv.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "max sym inv" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxSymInv is not specified then there is no limit placed on same-symbol investment, though there may still be same-symbol constraints if the strategy specifies MaxSymExp or MaxSameSym.Note that opening gaps beyond a specified order price may cause actual same-symbol investment to exceed the specified cap in some situations -- think of this constraint as "maximum intended investment in the same symbol".See Also: Backtest Engine Details and Capacity Constraints
17.18.280. MDI
CategoryIndicator FunctionsDescriptionWilder's Minus Directional IndexSyntaxMDI(len)Parameterslen - lookback periodNotesThis is the negative component of the ADX indicator, often referred to as -DI.This indicator supports one-pass calculation when used in the Data Section with a non-variable 
377length.
17.18.281. Median
CategoryMulti-Bar FunctionsDescriptionMedian of a series of valuesSyntaxMedian(expr, count)Parametersexpr - data series formulacount - lookback periodNotesValues are calculated and sorted, then the middle one is returned.
17.18.282. Mid
CategoryString FunctionsDescriptionReturn a segment of a stringSyntaxMid(string, start, length)Parametersstring - a literal string or string function resultstart - the position of the first character to include, beginning at 0length - the number of characters to include
17.18.283. Min
CategoryGeneral-Purpose FunctionsDescriptionSmallest of a group of valuesSyntaxMin(value1, value2, ...)Parametersvalue1 - any formula
378value2 - any formula... - any number of additional comma-separated formulasNotesThis function evaluates each of the formulas passed to it and returns the smallest value found.
17.18.284. MinN
CategoryGeneral-Purpose FunctionsDescriptionNth Smallest of a group of valuesSyntaxMinN(N, value1, value2, ...)ParametersN - number from 1 to count of valuesvalue1 - any formulavalue2 - any formula... - any number of additional comma-separated formulasNotesThis function evaluates each of the formulas passed to it and returns the Nth smallest value found.MinN(1, value1, value2) is the same as Min(value1, value2).
17.18.285. MinFreeCash
CategoryStrategy ElementsDescriptionMinimum free cash to keep on hand in the trading accountInputAny formula specifying a dollar amountNotesMinFreeCash is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if current S.Cash minus cash required to enter this position and other setups selected so far would not go below MinFreeCash.For a futures position the cash required to enter is the number of contracts to enter times the S.FuturesMargin required per contract.For a long stock position the cash required to enter is the number of shares to buy times the expected entry price.For a short stock position cash is received upon entry so a short setup cannot trigger this constraint and will make it less likely for a subsequent long setup to do so.If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.
379Setups skipped for this reason display "min free cash" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MinFreeCash is not specified and CashAccount is False or not specified then there is no lower limit placed on free cash in the account. If CashAccount is True then the default MinFreeCash is 0 (cannot go negative, i.e., cannot use margin).Note that opening gaps beyond a specified order price may cause actual free cash drop below the specified cap in some situations -- think of this constraint as "minimum intended free cash". Allow a bit of extra room in your MaxExposure level if this is an issue.See Also: Backtest Engine Details and Capacity Constraints
17.18.286. MinNetExp
CategoryStrategy ElementsDescriptionMinimum net long-short position exposure for a strategy or group of strategiesInputAny formula specifying a percentageNotesMinNetExp is one of the Capacity Constraints formulas used in the setup selection process.A setup is only selected if its signed position size plus those of other setups selected so far plus current net S.LongExp - S.ShortExp of open positions divided by current S.Alloc would not be less than the percentage expressed as MinNetExp. (In practice only a short setup could trigger this constraint.)If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "min net exp" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MinNetExp is not specified then there is no lower limit placed on net percent exposure, though there might still be a net investment lower limit if the strategy specifies MinNetInv.Note that opening gaps beyond a specified order price may cause actual long exposure to exceed the specified cap in some situations -- think of this constraint as "minimum intended net exposure".See Also: Backtest Engine Details and Capacity Constraints
17.18.287. MinNetInv
CategoryStrategy ElementsDescriptionMinimum net long-short dollar investment for a strategy or group of strategiesInputAny formula specifying a dollar amountNotesMinNetInv is one of the Capacity Constraints formulas used in the setup selection process.
380A setup is only selected if its signed position size plus those of other setups selected so far plus current net S.LongInv - S.ShortInv of open positions would not be less than the dollar value expressed as MinNetInv. (In practice only a short setup could trigger this constraint.)If a setup cannot be selected due to this constraint and the strategy specifies Reduce: True, then the position's Quantity will be reduced to allow the position to be ordered for entry at smaller size if possible.Setups skipped for this reason display "min net inv" in the Reason column of the Trade List, provided that the KeepTrades setting included Skipped.If MaxNetInv is not specified then there is no lower limit placed on net dollar investment level, though there might still be a net lower limit if the strategy specifies MinNetExp.Note that opening gaps beyond a specified order price may cause actual net investment to exceed the specified cap in some situations -- think of this constraint as "minimum intended net investment".See Also: Backtest Engine Details and Capacity Constraints
17.18.288. MissingBars
CategoryGeneral-Purpose FunctionsDescriptionNumber of bars missing before the current bar in this symbolSyntaxMissingBars(symbol {$CalSym})Parameterssymbol - the calendar symbol to use for comparison (optional)NotesA "missing bar" is a bar that is absent in this stock while being present in most other stocks from the same exchange.This function returns a count of missing bars preceding the current bar. (By definition the current bar must be present.)For most symbols on most dates, MissingBars() will return 0.A missing bar is detected when the comparison symbol has a bar for that date but the current symbol does not.The default comparison symbol is the CalendarSym for the current strategy.The optional argument can be used to specify a different comparison symbol if desired.See also the AllowMissingBar strategy setting, which determines whether trades can occur on a bar for which MissingBars() returns > 0.
17.18.289. Month
CategoryBar Data ValuesDescriptionCurrent bar month number 
381Negative offsets, e.g. Month[-5], can be legitimately used to obtain the month of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.290. Namespace
CategoryScript SectionsDescriptionSpecifies a prefix for user-defined items, to prevent duplication when including multiple scriptsSyntaxNamespace: xxxNotesAll names defined after a Namespace statement are internally converted to have the specified prefix.For example, Data: Universe: InSPX would internally become Data: xxx.Universe: InSPX.Subsequent statements in the same script could then refer to Universe as EITHER Universe or xxx.Universe.However, if the above Data statement was in an Included script, references in the including script would be required to use xxx.Universe.The most common use case for Namespace is e.g.:Namespace: ns1Include: myscript1.rtsNamespace: ns2Include: myscript2.rts// etc.This would ensure that all names defined in each included script remain unique.Use Namespace: none to remove the current Namespace and revert to not auto-prefixing the item names.A Namespace prefix, when specified, is applied to all User-Defined Item names.Namespace is also applied to these special-use names:Â· Import IncludeList user-defined names, e.g. IncludeList: SPY,TLT,GLD {"my_etfs"} would internally be named xxx.my_etfsÂ· InList references to the above, e.g., InList("my_etfs"), would internally become InList("xxx.my_etfs")Â· Names derived by the Item function, e.g., Item("factor{#}", factor_number) would return e.g. xxx.factor3 Another use case for Namespace is to prevent Item Name Overrides. By default, in most script sections, RealTest will replace the formula associated with a name with the new one found under the same name. Use Namespace to ensure that both formulas are preserved and given unique names.Finally, in many cases, it may be preferable to simply use unique item names across all of your scripts, rather than relying on Namespace to differentiate them.See also Combining Scripts.
38217.18.291. NextOpen
CategoryBar Data ValuesDescriptionNext bar open priceNotesThe ability to look ahead to the next open is included as a feature because it is often possible to learn approximately where a stock will open based on its pre-open live trading.For example, if you enter long positions using limit orders and want to skip those entries where the gap down is larger than 5%, you could use NextOpen < 0.95 * C as an EntrySkip formula.
17.18.292. NoNan
CategoryGeneral-Purpose FunctionsDescriptionEvaluate an expression with no possibility a of NaN resultSyntaxNoNan(expr, replacement {0})Parametersexpr - any formulareplacement {0} - any formulaReturn ValueThe result of the expression if it can be calculated, or replacement if it would result in NaN.NotesThe default (when only one argument) is to replace NaN with 0. You can optionally specify a different replacement value as needed.It is not usually necessary to use NoNan in any of the strategy element formulas. The backtest engine already equates "can't be evaluated" (NaN) with "false" or 0 in those formulas. The only exception is EntrySkip, for which "can't be evaluated" means "true" (do skip the entry).
17.18.293. Notes
CategoryScript SectionsDescriptionA free-form section in which to organize any notes about the scriptNotesThis section of a script is not parsed. It is therefore not necessary to use comments to avoid syntax errors within this section.
38317.18.294. NoWeekends
CategoryImport SpecificationDescriptionWhether to remove weekend bars from the dataChoicesFalse - keep all bars (default)True - remove weekend barsNotesAs of this writing, only crypto-currency data is known to have weekend bars.The purpose of this option is to facilitate data alignment, e.g. for correlation studies between crypto and non-crypto series.
17.18.295. NthOfMonth
CategoryGeneral-Purpose FunctionsDescriptionWhether current bar date is nth specific weekday of current monthSyntaxNthOfMonth(weekday, nth)Parametersweekday - 1 = Monday, 2 = Tuesday, ..., 7 = Sundaynth - 1 = first from start, -1 = first from end, 2 = second from start, -2 = second from end, ...Return Value1 if the current bar's day of week is the specified weekday and it is the nth instance of that weekday in the current month, else 0.(Again, where nth means from the start if positive, or from the end if negative.)NotesThis function applies to the date of the current bar being evaluated.The current bar must be the specified weekday for the result to be true.The other instances of that weekday that determine whether the current bar is the "nth" do NOT have to be market days.For example Monday September 9 is the second Monday in US markets even though the 2nd was a holiday (labor day).ExamplesIsThirdFriday: NthOfMonth(5, 3)IsFinalTuesday: NthOfMonth(2, -1)To find a past or future NthOfMonth date, use e.g.PrevFirstMondayDate: WhenTrue(NthOfMonth(1, 1), BarDate)
384NextThirdFridayDate: WhenTrue(NthOfMonth(5, 3), BarDate, 0, -1)Note that future NthOfMonth values cannot be determined beyond the last date of the current data file, i.e., they are only usable in backtests, not in order generation.
17.18.296. NumBars
CategorySettingsDescriptionNumber of data bars to include in a scan or testNotesUse in conjunction with either StartDate or EndDate to specify a bar count anchored to a date.(If all three of these date settings are specified then NumBars will count back from EndDate and StartDate will be ignored.)If a date range is not specified in a script then the dates from the Settings Panel will be used.When BarSize is Daily, NumBars is a count of market days. Otherwise it is a count of weeks or months, depending on BarSize.ExampleThis is a convenient way to run a daily scan for live trading candidates:
17.18.297. OBV
CategoryIndicator FunctionsDescriptionOn Balance Volume indicatorSyntaxOBV(len)Parameterslen - lookback periodNotesTraditional OBV is simply the sum of up-bar volume minus the sum of down-bar volume for the specified period.RealTest divides this value by the sum of all volume for the specified period to express it as a percentage.
385This indicator could be written as (Sum((C > C[1]) * V, len) - Sum((C < C[1]) * V, len)) / Sum(V, len).
17.18.298. Open or O
CategoryBar Data ValuesDescriptionCurrent bar open price NotesEither Open or O can be used as the name of this value.
17.18.299. OpenSlip
CategoryStrategy ElementsDescriptionSlippage amount, in points (dollars per share or contract), for each transaction that simulates a market order filling at the openInputAny formula specifying dollars per share or contract (points)NotesDefines the amount of slippage to apply to each market-at-open transaction, in price points. OpenSlip is applied to any transaction that logically occurs at the open and not at a specified limit or stop price.If OpenSlip is not specified then Slippage is applied instead.Note that OpenSlip will be applied to limit or stop orders when the fill is at the open but not at the limit or stop price, i.e., when the open gaps beyond the specified price.
17.18.300. OptimizeSettings
CategoryScript SectionsDescriptionDefines the settings to use only when the script run mode is Optimize.NotesThe table below lists all of the available Optimize Settings items. These correspond to the choices in the Multiple Tests and Optimization dialog box.Any optimize settings applied by a script become the new defaults for the dialog box and vice versa.The only optimize setting that is not in the dialog box is OptNoDialog.
386Setting Type Description
OptAnchor True or False whether and how to anchor multi-interval optimizations / walk-forwardOptByStrategy True or False run optimization separately for each strategyOptBySymbol True or False run optimization separately for each symbolOptClearResults True or False clear the active results window before running an optimizationOptimizeMode Combinatorial, Genetic, etc. type of optimization to be performedOptIterations number run the same optimization multiple times (e.g. for randomization)OptKeepBest number only keep the N best tests (requires OptSortResults)OptKeepByDate True or False apply OptKeepBest to each OptTimeUnit dateOptKeepBySymbol True or False apply OptKeepBest to each symbolOptKeepNoTrades True or False keep optimization results rows with zero tradesOptMultiSaveAs True or False SaveStatsAs and/or SaveTradesAs (if specified) for each test in an optimizationOptMutatePct number mutation probability for genetic optimizationOptNoDialog True or False run an optimization without displaying the Optimize dialog box firstOptScoreCol Results column name name of results column to use as optimization score (fitness function)OptSortResults True or False sort the results rows by OptScoreCol value after each test in an optimizationOptSummaryLog True or False display a summary log at the end of an optimization runOptTestInterval number OptTimeUnit test interval for multi-interval optimizations / walk-forwardOptTestLength number OptTimeUnit test length for multi-interval optimizations / walk-forwardOptTimeUnit None, Years, Months, Weeks, Days time unit for multi-interval optimizations or walk-forwardOptWalkForward True or False generate walk-forward parameter lists from multi-interval optimization
17.18.301. OrderClerkFolder
CategorySettings or OrderSettingsDescriptionPath of the folder that OrderClerk uses for the strategies in this script.NotesThis setting is required to run a script as "Orders" when OrdersMode is OrderClerk or OrderClerkStats.This will be the same folder that is selected at the top of the OrderClerk main window:
387RealTest will use the OrderClerkTrades.csv file in that folder as the TradeList to play back before generating tomorrow's orders, and will place the new order list in this folder to be processed by OrderClerk.
17.18.302. OrderNote / OrderExtra
CategoryStrategy ElementsDescriptionString to add to the text of each order and as the "note" value in a CSV Order BasketNotesHere is an example of how this works in a text order list:
This shows how OrderNote might be used with OrdersTemplate to allow different strategies from the same script to send their orders to different linked IB accounts:
388In addition to OrderNote, up to nine other strategy-specific values can be added to an orders template. The strategy formula names for these are OrderExtra1, OrderExtra2, ... OrderExtra9.These work the same as OrderNote except that their values will not appear in the text order list.The CSV template second-row value names for these are extra1, extra2, ... extra9.
17.18.303. OrderPrice
CategoryCurrent Position InformationDescriptionEntry order priceNotesOrderPrice is the actual or implied price per share or contract of the entry order of this position.For a strategy with EntryLimit and/or EntryStop this will be the limit or stop price that would have been used in an order generated by RealTest.For a market-order strategy, OrderPrice is the Close of the most recently completed bar when the order is made.Use FillPrice to obtain the actual entry price of the current position, which may differ from OrderPrice when there is a price gap between the close and next open.
17.18.304. OrderRank
CategoryCurrent Position InformationDescription
389Returns the TopDownMode order rank number for this position's entry across all strategies.NotesThe top-down order ranking mechanism can be observed in detail by running a test with both KeepTrades: Skipped and TestOutput: Log enabled.
17.18.305. OrdersComment
CategorySettingsDescriptionAn optional string to add to the top of the order list when orders are generated.NotesThe OrdersComment setting is interpreted as a formula. Use the Format function to build a string that displays whatever information from your script variables that would be useful to see in an order list.Note that formula output strings are limited to 80 characters in length.
17.18.306. OrderSettings
CategoryScript SectionsDescriptionDefines the settings to use only when the script run mode is Orders.NotesThe general-purpose Settings section is always applied first, then modified by any items specified in OrderSettings when applicable.See Settings Sections for details.
17.18.307. OrdersFile
CategorySettings or OrderSettings or Strategy ElementsDescriptionPath and name of the order list file to create when generating orders.NotesIf OrdersFile is not specified then the default path is c:\RealTest\Output\Orders (assuming RealTest is installed in c:\RealTest) and the default file is script_date_orders.txt (where script is the current script name and date is the order date).When OrdersMode is anything other than the default Text mode, two orders file are created: script_date_orders.txt and script_date_orders.csv.When OrdersFile is specified, the file name should end in .txt for the default OrdersMode or in .csv in any other mode.
390A settings-level OrdersFile path will override the default and will apply to every strategy in the script that does not provide its own path.A strategy-level OrdersFile path will override the default and the settings-level path if specified.See File Path Specification for helpful tips including special path expansion variables.See OrdersTemplate and CSV Order Baskets for details about CSV order lists.
17.18.308. OrdersFreeCash
CategorySettings or OrderSettings or Strategy ElementsDescriptionPath and name of a text file that contains the current Free Cash Value (cash available to invest or withdraw) of your brokerage accountNotesThis setting can be used to ensure that orders are generated using the correct MinFreeCash constraint for your actual account.See also OrdersNetLiq.
17.18.309. OrdersInclude
CategoryScript SectionsDescriptionAllows a script to include another script when run in Orders ModeSyntaxOrdersInclude: path where path is either a full file path (e.g. C:\RealTest\Scripts\script.rts) or a path relative to the Scripts folder (e.g. Examples\script.rts).NotesSee the general-purpose Include statement for further details.
17.18.310. OrdersLiveData
CategorySettings or OrderSettingsDescriptionAllows generation of intraday market orders when running in Orders modeChoicesTrue - generate today's live market ordersFalse - (default) generate tomorrow's orders as usualNotesThis is an advanced option provided for users who have found a way to import live "daily bars so far" just before the market close and wish to generate market orders for strategies that use 
391ThisClose as their EntryTime and/or ExitTime.
17.18.311. OrdersMktAsLmtPct
CategorySettings or OrderSettings or Strategy ElementsDescriptionAllows generated market orders to optionally be converted to limit orders X% beyond the last close.ValueA number expressing the desired percentage, e.g. 3 for 3%, or 0 if no conversion is desiredNotesThe purpose of this strategy option is to allow what is logically a market-order to be executed as a marketable limit order. This option provided to support order generation for exchanges that do not permit market orders, without having to convert the strategy to one that always uses limit orders.Market orders are typically generated in the following situations:Â· entry orders when EntryTime is NextOpen (or omitted) and neither EntryLimit nor EntryStop is specifiedÂ· exit orders when ExitRule is true and ExitTime is NextOpen (or omitted)Â· exit orders when ExitLimit touches the last close and ExitLimitTime is NextOpen Â· exit orders when ExitStop touches the last close and ExitStopTime is NextOpenIn all such cases, if OrdersMktAsLmtPct returns a non-zero value then the order is converted to a LMT order. For example, if 10 is the specificed percentage, then a long entry (buy) order would use Close * 1.1 as its limit price, and a long exit (sell) order would use Close * 0.9 as its limit price. The idea is to allow plenty of extra room to ensure a fill while still using a limit order.To selectively apply this option, e.g. in a strategy that trades on multiple exchanges, use a formula such as:OrdersMktAsLmtPct: if(?Exchange = "ASX", 10, 0)This will tell RealTest to convert market orders to limit orders for stocks that trade on the ASX but not for stocks that trade elsewhere.Note that this option only affects generated orders. Backtests still model the strategy with simple market order logic. 
17.18.312. OrdersMode
CategorySettings or OrderSettingsDescriptionSpecifies which format to use when generating Tomorrow's OrdersChoices
392Text - (default) only generate human-readable text ordersOrderClerk - run the backtest in Hybrid TradeList mode using the OrderClerkTrades.csv in the specified OrderClerkFolder to play back past live trades, then generate an OrderClerk-compatible CSV order list in the same OrderClerkFolder.OrderClerkSync - identical to OrderClerk mode unless there was a gap in time between the last trade in that mode and the end of available data, i.e., one or more recent days when orders were not generated. In that case, order playback switches to formula-based backtest for the missing period and additional orders are generated to re-synchronize the positions.OrderClerkStats - run a backtest in TradeList mode using the OrderClerkTrades.csv file in the specified OrderClerkFolder, for the purpose of generating live trading stats to review. Note that this mode still must be run as "Orders" (not "Test") even though no orders are generated.Rebalance - generate orders for a rotational strategy in a format compatible with IB's Portfolio Rebalance Tool.Template - use the CSV template specified in OrdersTemplate to generate an order list for use with IB Basket Trader or any other tool that requires a CSV-formatted order list which can be specified using this kind of template.NotesSee Generated Order Types for details about how RealTest maps strategy rules to generated orders.To generate any kind of orders other than Text, OrdersMode must always be specified in Settings or OrderSettings.Orders are only generated when a script is run by pressing the Orders button (not the Test button).Text orders are also generated for every other mode unless Always show text orders is unchecked in View / Program Options
17.18.313. OrdersNetLiq
CategorySettings or OrderSettings or Strategy ElementsDescriptionPath and name of a text file that contains the current Net Liquidation Value (mark to market account balance) of your brokerage accountNotesThis setting can be used to ensure that orders are generated with the correct Quantity (position size) for your current account value.If you have a way to automatically recreate this one-line text file each day, or a habit of doing so manually, this is the simplest way to get your order sizes right.The value found in the file becomes the value of S.Alloc for the purpose of order generation.To clarify how this works, imagine that daily order generation for live trading began at the start of this year with an account balance of $100K.Your Settings might look like this:Settings:   AccountSize: 100000   StartDate: 2022-01-01   EndDate: LatestWhen you generate tomorrow's orders, RealTest runs a backtest starting with $100K on 1/1/22 (or the first market day thereafter), models all the trades that should have occurred, and accumulates their net P/L in each strategy's S.Equity.
393On the last date of the test, orders are generated by evaluating all of the strategy rules to determine which open positions call for exits and which new setups call for entries in each strategy.For each strategy that uses a typical Quantity formula with either explicit or implied S.Alloc as its basis, if OrdersNetLiq was provided, it will become the value of S.Alloc. Otherwise, S.Alloc will be whatever it is at the end of the backtest segment.Examples of Quantity formulas that would use OrdersNetLiq:Quantity: 10QtyType: Percent
Quantity: S.Alloc / 10QtyType: Value
Quantity: S.Alloc / 10 / FillPriceQtyType: SharesExamples of Quantity formulas that would NOT use OrdersNetLiq:Quantity: 10000QtyType: Value
Quantity: S.StartEquity / 10QtyType: Value
Quantity: S.Equity / 10 / FillPriceQtyType: SharesAs always, position sizes for each backtest trade and generated order are calculated bottom-up, based on the Quantity formula provided. The default calculation of S.Alloc is Combined(S.Equity), which is always equivalent to the NLV of a model account running all of the strategies in the script using whatever their Quantity formulas happen to be.If you use a different Allocation formula to override the default S.Alloc, or if you don't base your sizes on S.Alloc (whether explicitly or implicitly), then it would not make sense to use an OrdersNetLiq file.Even if you are using the default Allocation, you may prefer to keep sizing new positions according to the system model rather than your live account balance. OrdersNetLiq simply gives you the choice of using live NLV, it's not a requirement.See also OrdersFreeCash.
17.18.314. OrdersTemplate
CategorySettings or OrderSettings or Strategy ElementsDescriptionPath and name of the CSV order list template file to use for generating this test's order basketNotesAn OrdersTemplate path must be specified when OrdersMode: Template is used and can optionally be specified for OrdersMode: OrderClerk.A settings-level OrdersTemplate path will apply to every strategy in the script that does not provide its own path.A strategy-level OrdersTemplate path will apply only to the strategy that specifies it.See OrdersFile and CSV Order Baskets for details about CSV order lists.
39417.18.315. OrdersUseQtyIn
CategorySettings or OrderSettingsDescriptionForces generated exit order quantities to match the position's entry quantityChoicesTrue - change exit quantity to match entry quantity if needed (ignore any splits between them)False - (default) adjust exit quantity for any splits that happened since entryNotesThis is an advanced option provided for users who want to use Adjustment: TotalReturn data in their strategies.Total-return adjustment literally means convert dividends to splits. Once data is imported that way, dividends become indistinguishable from normal stock splits (which are more rare).A normal stock split changes the number of shares held in any open positions on the ex-split date. RealTest by default accounts for this fact when it generates exit orders (also in the trade lists of backtests).It is generally recommended to avoid using total-return adjustment for any live strategies because it can make exit order quantities incorrect, since the actual corporate action was a dividend, not a split.This option is provided to support users who nevertheless prefer total-return adjustment.If you use this option, be sure to keep an eye out for real splits in your positions. You will need to manually correct their exit order sizes.
17.18.316. OrderSum
CategoryGeneral-Purpose FunctionsDescriptionEvaluates an expression for each non-skipped setup and returns the sum of the valuesSyntaxOrderSum(expression)NotesThis is a specialized function meant to be used in entry-related formulas that want to the sum of something across all current non-skipped setups (stocks for which an entry order will be placed).OrderSum(1) can be used to count today's orders for the current strategy.Use SetupSum to count or calculate something for all setups, not just the non-skipped ones.Note that OrderSum cannot be used to refer to past setups in a strategy. It only has access to setups for the current date in the test. Therefore OrderSum(expression)[offset] will probably not have meaningful results.
17.18.317. PadAlignSym
395CategoryImport SpecificationDescriptionSymbol to use for Padding: AlignWithSymbolSyntaxPadAlignSym: symbolNotesThe AlignWithSymbol Padding choice forces all imported stocks to have the same set of bar dates as the PadAlignSym stock by adding missing bars and removing extra bars.This alignment is performed only within the existing date range of each stock. Extra bars are not added before the start or after the end of its data.Since this setting is always simply one symbol, it should not be preceded by a $ as is normally done to reference a symbol within a formula.
17.18.318. Padding
CategoryImport SpecificationDescriptionImport data padding typeSyntaxPadding: choiceChoicesNone - don't add any padding bars (this is the default and can be used most of the time)AllMarketDays - add a padding bar for any market day in a symbol's date range where the symbol has no barAllWeekDays - add a padding bar for any weekday in a symbol's date range where the symbol has no bar (including holidays)AllCalendarDays - add a padding bar for any date in a symbol's date range where the symbol has no bar (including weekends)AlignWithSymbol - add padding bars that the PadAlignSym symbol has but this symbol lacks, and remove bars from this symbol that the PadAlignSym lacksNotesWhen Norgate is the data source, padding of any of the above types is provided by Norgate.For other data sources, RealTest does the padding in the same way that Norgate does.When data is imported for multiple markets that have different holiday schedules, "AllMarketDays" means any day where any of the included markets is open.See also the general topic of Calendar Alignment.
17.18.319. Parameters
CategoryScript Sections
396DescriptionOptimization Parameter Definitions NotesSee Parameters Section and Optimization Dialog.
17.18.320. PDI
CategoryIndicator FunctionsDescriptionWilder's Plus Directional IndexSyntaxPDI(len)Parameterslen - lookback periodNotesThis is the positive component of the ADX indicator, often referred to as +DI.This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.321. Peak
CategoryMulti-Bar FunctionsDescriptionValue of the nth most recent peak of a series of prices or other valuesSyntaxPeak(expr, pctChg, nth {1})Parametersexpr - data series formulapctChg - percent change required to delimit peaks and troughsnth - which peak to locate (1, i.e., most recent if omitted)NotesThe definition of a Peak is the highest value which is then followed by one or more values that are at least n% below that most recent high.Most technical analysis software (which is designed primarily for charting purposes) attaches Peak and Trough values to the bars on which they occur. RealTest (being designed for realistic backtesting) does not commit this look-ahead error. Instead, the most recent peak is only returned starting with the subsequent bar that completes the n% drop following that peak. This makes it completely safe and legitimate to use these functions in backtesting.The SPY chart below shows how this works. The bar marked by the pink vertical line is the first bar for which 417.39 is returned, even though that peak happened six bars earlier (as reflected in the 
397PeakBars calculation).The same rules apply to the Trough and TroughBars functions.
17.18.322. PeakBars
CategoryMulti-Bar FunctionsDescriptionCount of bars since the nth most recent peak of a series of prices or other valuesSyntaxPeakBars(expr, pctChg, nth {1})Parametersexpr - data series formulapctChg - percent change required to delimit peaks and troughsnth - which peak to locate (1, i.e., most recent if omitted)NotesThe definition of a Peak is the highest value which is then followed by one or more values that are at least n% below that most recent high.See Peak for important additional information about how these functions work in RealTest.
17.18.323. PercentRank
CategoryMulti-Bar FunctionsDescription
398Percent rank among valuesSyntaxPercentRank(expr, count)Parametersexpr - data series formulacount - lookback periodNotesexpr is calculated for each bar, then results are sorted (ranked) from highest to lowest. The highest value is given a Rank of 1, the next highest 2, and so on.PercentRank is calculated as: 100 / (count-1) * (count-rank), or simply 100 if count is 1.For the highest value, this will always be 100.For the lowest value, this will always be 0 (unless there is only one value).For three values, PercentRank will always be 0, 50, or 100.For four values, PercentRank will always be 0, 33.33, 66.66, or 100.etc.This implementation of PercentRank is identical to the function of the same name in Microsoft Excel.For AmiBroker users, please note that their PercentRank function adds one to count, so if you're trying to exactly match their PercentRank(expr, count) for the same set of data, use PercentRank(expr, count + 1).
17.18.324. PercentRankN
CategoryMulti-Bar FunctionsDescriptionValue with a specific percent rank (the Nth percentile value)SyntaxPercentRankN(pctl, expr, count)Parameterspctl - formula specifying a percent rank levelexpr - data series formulacount - lookback periodNotesPerforms the PercenRank function and then returns the value with the requested percentile.
17.18.325. PointValue
CategoryStock/Contract InformationDescription
399Futures contract point value NotesSpecifies the notional value of a 1-point change in price for a futures contract. This is also known as the "multiple".Point values are obtained automatically when importing futures data from Norgate.For CSV futures data import, it would be necessary to provide point values for each contract using a SymInfo file.PointValue is assumed to always be $1.00 for stocks.
17.18.326. PrevExitLimit
CategoryCurrent Position InformationDescriptionPrevious exit limit (target) priceNotesAt position entry time, PrevExitLimit is set to 0. On each bar that the position is open, after the ExitLimit formula is calculated, its value is placed in PrevExitLimit. This makes it possible to implement a "trailing target", or any type of price target concept that needs to refer to its own prior value to be calculated. (Previously this required using the Data Section and was therefore more complex.)It is also possible for a strategy to refer to the current exit limit price of another strategy by using Extern(@other, PrevExitLimit).
17.18.327. PrevExitStop
CategoryCurrent Position InformationDescriptionPrevious exit stop priceNotesAt position entry time, PrevExitStop is set to 0. On each bar that the position is open, after the ExitStop formula is calculated, its value is placed in PrevExitStop. This makes it possible to implement a "trailing stop", or any type of price stop concept that needs to refer to its own prior value to be calculated. (Previously this required using the Data Section and was therefore more complex.)It is also possible for a strategy to refer to the current exit stop price of another strategy by using Extern(@other, PrevExitStop).ExamplesThis is a very simple trend-following strategy with a 3*ATR trailing stop:
40017.18.328. Product
CategoryMulti-Bar FunctionsDescriptionProduct of valuesSyntaxProduct(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEvaluates expr for each of count bars and returns the product of the values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.329. PositionSum
CategoryGeneral-Purpose FunctionsDescriptionEvaluates an expression for each currently open position and returns the sum of the valuesSyntaxPositionSum(expression)NotesThis is a specialized function meant to be used in entry-related formulas that need to know how many positions are open or will still be open after tomorrow's exits.Referring to PositionSum(1) is equivalent to referring to S.Positions in that context.Assuming a strategy uses ExitRule: my_rule where my_rule is an exit condition formula, and does exits at the next open (the default), PositionSum(Not(my_rule)) can be used to count the number of positions that will be open after tomorrow morning's exits but before any new entries. This kind of logic may be necessary when using a TestScan to produce a list of daily orders for the kind of strategy where you only want to use available position slots with no extra entry orders. Other than the above example, in most use cases it is not necessary to deliberately calculate how many position slots will be available after tomorrow's exits. RealTest handles this automatically in both backtests and automatic order generation. In these more typical scenarios, S.Positions, PositionSum(1), and PositionSum(Not(my_rule)) will all return the same value.Another possible use of PositionSum would be to calculate your own statistics about currently open positions, e.g. PositionSum(Shares * (C - FillPrice)) would (assuming a long position) tell you the 
401current net mark-to-market value of your open positions (equivalent to S.M2M).One more use of PositionSum might be to count how many other positions have the same characteristic (e.g. economic sector or industry) as the current one. For this purpose use the This function, e.g. PositionSum(Top(InfoTRBC,2) = This(Top(InfoTRBC,2))).Note that PositionSum cannot be used to refer to past positions in a strategy. It only has access to positions open on the current date in the test. Therefore PositionSum(expression)[offset] will probably not have meaningful results.
17.18.330. PriceRound
CategoryStrategy ElementsDescriptionSpecifies how to round trade prices in backtests and order listsInputAny formula specifying a rounding interval (step value)NotesIf not specified, the default rounding interval is the TickSize of the symbol.PriceRound: 0.01 means round to the nearest penny (which is also the default TickSize if not known)PriceRound: 0 means don't do any rounding (include all available decimal places).PriceRound: if(C < 1, 0.0001, 0.01) means round to nearest penny for stocks above $1/share or nearest hundredth of a penny for penny stocksPrices are rounded before being used to calculate trade profits/losses, which makes those figures more realistic.Since RealTest always uses split-unadjusted (as-traded) prices in formulas, we do not need to worry about the extra decimal places that might be required for a past date of a stock that later had one or more splits. Prices by default are rounded to the as-traded TickSize.Unless you have a specific need to control trade price rounding, it is recommended to NOT include this element in your Strategy definitions, so that the default (TickSize) rounding will be applied.
17.18.331. QtyFinal
CategoryStrategy ElementsDescriptionCan be used to modify entry position sizes after top-down setup selection has been completedNotesThe initial desired Quantity of each setup must be specified prior to application of constraints such as MaxExposure or MaxInvested.The final count of setups that can become orders is therefore not known yet when initial quantities are set.QtyFinal is provided for cases where you want position sizes to be influenced by the number of orders that will be placed after constraints have been applied.An example use case might be:
402This sets the initial position sizes to 10%.After selecting today's setups while applying the MaxExposure constraint, positions are resized to use all remaining capital divided equally among the new orders to be placed (S.EntryOrders).(Arbitrarily growing position sizes to use available exposure may increase position-specific risk and is probably not advisable, but if you wanted to test it, this would be a way to do so.)See Also: Backtest Engine Details and Capacity Constraints
17.18.332. QtyPrice
CategoryStrategy ElementsDescriptionSpecifies which price to use when calculating Quantity (Percent or Value types), trade fraction, and exposureChoicesOrderPrice - use the order price (default)FillPrice - use the entry priceNotesThis new strategy-level setting replaces and augments the former PercentOrder and ValueOrder selections for QtyType.The QtyPrice setting has several implications:Â· which price to use when calculating Quantity for types other than sharesÂ· how to interpret FillPrice on the day a position is entered, e.g. when used in ExitLimit or ExitStopÂ· which price to use when calculating T.Fraction Â· which fraction value to therefore use when checking MaxExposure and calculating S.Exposure and S.Usage In most cases the best practice will be to accept the default for this setting.Using QtyPrice: FilPrice implies that you are able to size your positions and calculate your entry-day target and stop prices at the moment of entry based on the actual fill price or that you have automation software that can do so.Using QtyPrice: FillPrice also implies that your rank-based final setup selection (depending on capacity constraints) is done at entry time.
40317.18.333. QtyRound
CategoryStrategy ElementsDescriptionSpecifies how to round the result of the Quantity formulaInputAny formula specifying a rounding interval (step value)NotesIf not specified, the default rounding interval is 1 (whole shares).QtyRound: 0 means don't do any rounding (include all available decimal places).QtyRound: 10 means round to the next lower ten-share interval.QtyRound: 0.1 means round to the next lower tenth-of-a-share interval.When rounded, Quantity is always rounded down (truncated), e.g. 12.99 will be rounded to 12 if QtyRound: 1 is in use.Quantity is rounded down by default to avoid the possibility of share rounding pushing a position value slightly over the MaxInvested threshold.If you want to round up, or round nearest, specify QtyRound: 0 and use the Round function in your Quantity formula while keeping QtyType as Shares (the default).
17.18.334. QtyType
CategoryStrategy ElementsDescriptionSpecifies how to interpret the Quantity formulaChoicesShares - Quantity represents the number of shares or contracts (default if not specified)Value - Quantity represents the notional value of the position (e.g. dollars) based on entry fill pricePercent - Quantity represents a percentage of current allocation (S.Alloc)NotesDuring setup selection, Quantity is calculated and constraints (such as MaxInvested) are applied based on the OrderPrice of the EntrySetup. To "look ahead" to the actual entry price when calculating position sizes, specify QtyPrice: FillPrice. The following are all equal position sizes:
40417.18.335. Quantity
CategoryStrategy ElementsDescriptionSpecifies the number of shares or contracts to buy or sell short when opening a new positionInputAny formula specifying a number of shares or contracts, or a position value, or an allocation percentageNotesThe Quantity formula specifies the position size to use each trade in a strategy. Quantity is calculated at setup selection time using the same current bar context as EntrySetup. If there is no Quantity formula then a strategy will always invest 100% of current Allocation in each position.If Quantity returns 0 then the entry is skipped and "zero quantity" is displayed as the skip reason.Quantity can optionally be used to specify the Side (long vs. short) of a trade in a strategy that can go either way, such as a hedging strategy.If Side is specified for a strategy, then the strategy always trades that side only and Quantity should always be expressed as a positive number.If Side is not specified, then Quantity should return a positive number to enter a long position or a negative number to enter a short position.See QtyType for important information about how Quantity is interpreted.See Asset Allocation and Position Sizing for additional information.See DynamicSizing for information how Quantity can be used differently in this special alternative strategy mode.
17.18.336. Random
CategoryGeneral-Purpose FunctionsDescription
405Returns a uniformly distributed random numberSyntaxRandom(min {0}, max {0}, step {0})Parametersmin {0} - the lowest value to possibly returnmax {0} - the highest value to possibly returnstep {0} - the smallest possible interval between return valuesNotesIf called with no parameters, i.e. Random(), the return value is a decimal number between 0 and 1.To obtain a random integer between 1 and 100, use Random(1,100,1).To obtain a random limit price between 2% and 4% above yesterday's close, use Random(c*1.02, c*1.04, 0.01).
17.18.337. RandomSeed
CategorySettingsDescriptionPermits use of the same sequence of pseudo-random numbers every time a script is runNotesPseudo-random numbers can be used explicitly by scripts via the Random function and are used implicitly in Optimization (some modes) and Monte-Carlo analysis.If RandomSeed is not specfied or is 0 then random numbers are different every time RealTest runs and are selected from a much larger set of possible values (the C runtime library function rand_s is used).When RandomSeed is specified, the provided value is passed to the C srand function and the rand function is then used for each random value needed.It is recommended to not specify a RandomSeed unless you have a particular need for it, as the rand_s function is significantly more robust than rand is.
17.18.338. Range or R
CategoryBar Data ValuesDescriptionCurrent bar intraday range NotesThis is simply H-L of a bar. Either Range or R can be used.See also TrueRange.
40617.18.339. Rank
CategoryMulti-Bar FunctionsDescriptionNumeric rank among valuesSyntaxRank(expr, count)Parametersexpr - data series formulacount - lookback periodNotesexpr is calculated for each bar, then results are sorted (ranked) from highest to lowest. The highest value is given a rank of 1, the next highest 2, and so on.See also PercentRank.
17.18.340. RankN
CategoryMulti-Bar FunctionsDescriptionValue with a specific numeric rankSyntaxRankN(rank, expr, count)Parametersrank - formula specifying a rank numberexpr - data series formulacount - lookback periodNotesPerforms the Rank function and then returns the value with the requested rank.
17.18.341. Reason
CategoryGeneral-Purpose FunctionsDescriptionReturns both a value and a stringSyntaxReason(value, string)
407Parametersvalue - numeric return valuestring - string return valueNotesThis special-purpose function serves to allow a single ExitLimit or ExitStop formula to return different prices under different conditions and cause the resulting trade record to include a description of the condition that triggered the exit in its T.Reason field.This capability was previously supported only in ExitRule by using Select. That worked implicitly because ExitRule is a true/false condition. If the formula returned any string value, that was interpreted as "true".In contrast, ExitLimit and ExitStop need to return a specific price, so a function that can return both a value and a string was required to enable reason strings.ExampleExitStop: if(Extern($SPY, C > MA(C, 100)), Reason(FillPrice * 0.6, "bull market stop"), Reason(FillPrice * 0.9, "bear market stop"))
17.18.342. Reduce
CategoryStrategy ElementsDescriptionSpecifies whether to reduce quantity when a new position's size would push total investment above a capacity constraintInput0 or false - don't reduce (default)value or true - reduce to available capacity (but not less than this dollar size value) if necessaryNotesIf a non-zero value is specified, a new position that would exceed a capacity constraint is reduced to the size of the remaining available capacity, provided it is not less than the dollar value specified. Otherwise the entry is skipped.When "true" is specified, this is internally represented as 1, so the minimum position size is $1.
17.18.343. RemoveLatest
CategoryImport SpecificationDescriptionWhether to remove the global latest bar from any symbol that has itChoicesFalse - don't remove the latest bar (default)True - remove the latest barNotesWhen this import setting is true, the latest bar is removed from any symbol that had the global 
408latest (latest latest) bar.No bars are removed from symbols that do not have the global latest bar.This option can be used either to remove the latest bar from all symbols when they all have the same latest bar, or to equalize the latest bar when some symbols have an extra bar (e.g. in a mixed US and ASX import done between the ASX and US closes).
17.18.344. Replace
CategoryString FunctionsDescriptionReplace all instances of a string within another stringSyntaxReplace(string, find, replace)Parametersstring - a literal string or string function resultfind - the string (or function result) to findreplace - the string (or function result) to replace it with
17.18.345. ReportContent
CategorySettingsDescriptionSpecifies which optional sections to include when a Test Summary Report is generatedChoices (multiple, separated by commas)Settings - include the test settings and parameter listStats - include the test summary statsMonthly - include the monthly returns tableCorrel - include the strategy correlation matrixGraphs - include the stats graphsPlots - include trade scatter and Monte Carlo plotsScript - include the script used to run the testNotesWhen ReportContent is specified by a script, the choices persist until changed later, either by script or in the Report Options Dialog.
17.18.346. ReportsFolder
CategorySettings or TestSettings
409DescriptionPath of the folder in which Test Summary Reports are created.NotesThe default ReportsFolder is (RealTest Installation Folder)\Output\Reports.If Output has been changed under Default Folder Paths in Program Options then the default is Reports in that folder.Each new report is created in a separate sub-folder of the Reports folder.
17.18.347. Rescale
CategoryGeneral-Purpose FunctionsDescriptionMaps a value from one scale to anotherSyntaxRescale(value, valmin, valmax, scalemin, scalemax, bound {0})Parametersvalue - the value to rescalevalmin - the bottom of the range that value comes fromvalmax - the top of the range that value comes fromscalemin - the bottom of the range to scale value toscalemax - the top of the range to scale value tobound {0} - whether value < valmin or value > valmax should be adjusted before rescalingReturn ValueIf bound is zero or omitted: (value - valmin) / (valmax - valmin) * (scalemax - scalemin) + scaleminIf bound is non-zero:  (Bound(value, valmin, valmax) - valmin) / (valmax - valmin) * (scalemax - scalemin) + scaleminExampleNormalizedTurnover: Rescale(Close * Volume, 1e5, 1e12, 1, 10, 1)
17.18.348. Results
CategoryScript SectionsDescriptionResults column definitions NotesSee Results Section and Results Windows.
17.18.349. ResultsFile
410CategorySettingsDescriptionPath and name of a results file (RTR) to open or create before a test is run, and save at the end of the runNotesBy default when a test is run, RealTest uses the most recently opened results window, or creates a new untitled one for the purpose.This setting allows you to choose a specific RTR file to use when running tests with this script.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. See File Path Specification for helpful tips including special path expansion variables.
17.18.350. Right
CategoryString FunctionsDescriptionReturn the right end of a stringSyntaxRight(string, length)Parametersstring - a literal string or string function resultlength - the number of characters to include
17.18.351. RiskFreeRateSym
CategorySettingsDescriptionSymbol of an imported data series to store in the test statistics for later use when calculating Sharpe or other stats that require this.NotesThe daily closing values of this data series are stored in S.RiskFreeRate when a test is run.This in turn is used in the calculation of Sharpe Ratio in the default Results.rts formula:
For this to work correctly the data must be a rate series, e.g. close=5 means 5%, as in the Norgate symbols %FFYE or %3MTCM.Do not prefix the symbol with $ -- that is only required for symbol references within formulas.The referenced symbol must also have been added to the Import of the current data file.
41117.18.352. ROC or PctChg
CategoryMulti-Bar FunctionsDescription%gain/lossSyntaxROC(expr, count) or PctChg(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEither ROC or PctChg can be used as the name of this function.Return value is equivalent to 100 * (expr / expr[count] - 1).
17.18.353. RollCost
CategoryStrategy ElementsDescriptionTotal cost of each roll transaction while holding a futures position.InputFormula specifying a dollar amount.NotesRollCost is only applied to trades in a strategy that uses CSI Futures back-adjusted data.Each time an open position is held across a roll date boundary, the RollCost formula is evaluated. The dollar amount that it returns is added to the running total of roll costs for this position.When the trade exits, this total is subtracted from its net profit calculation (similarly to commissions).To see the total roll costs for a trade, add a column to your Trades.rts that shows T.RollCosts.To see the total daily roll costs for all trades exited that day, add an item to your Graphs.rts that shows S.RollCosts.Note that RollCost should calculate the total commissions plus slippage impact for both transactions (or for a spread trade).ExampleIf your Commission is $1.50 per contract and your Slippage averages one tick, then your formula would be:RollCost: 2 * Contracts * (1.5 + (1 * TickSize * PointValue))
41217.18.354. Round
CategoryGeneral-Purpose FunctionsDescriptionRound value to nearest stepSyntaxRound(value, step {1}, direction {0})Parametersvalue - formula specifying a numeric valuestep - formula specifying a rounding interval (optional, defaults to 1)direction - formula specifying a rounding direction (optional, defaults to 0)NotesThe direction parameter is interpreted as follows:Â· 0 means round to the nearest step, e.g. if step is 1, round UP if the decimal part of value is >= 0.5 else round downÂ· 1 means always round upÂ· -1 means always round downFor example, to round a calculated price to the nearest penny, use Round(price, 0.01).Note that negative values are always rounded "away from zero", e.g.Â· round(-1.5, 1, 0) = -2Â· round(-1.5, 1, 1) = -2Â· round(-1.5, 1, -1) = -1In other words negative values are rounded as if they were positive and then the minus sign is applied to the result.(This is consistent with how =Round, =RoundUp, and =RoundDown work in Excel.)
17.18.355. RSI
CategoryIndicator FunctionsDescriptionWilder's relative strength indexSyntaxRSI(len)Parameterslen - lookback periodNotes
413Calculation uses the original Welles Wilder formula. Wilder's exponential smoothing is equivalent to using 2*len-1 in a regular exponential moving average.It's a little-known fact RSI(len) crossing above or below 50 is the same as C crossing above or below EMA(C,2*len-1).This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.356. RRSI
CategoryIndicator FunctionsDescriptionReverse RSI (price required for RSI to reach level)SyntaxRRSI(len, level)Parameterslen - lookback periodlevel - formula specifying the desired RSI levelNotesThis function can be used to calculate entry or exit limit prices based on RSI reaching a specific level.Calculation uses the original Welles Wilder formula. Wilder's exponential smoothing is equivalent to using 2*len-1 in a regular exponential moving average.This indicator supports one-pass calculation when used in the Data Section with a non-variable length.
17.18.357. RsiF
CategoryMulti-Bar FunctionsDescriptionRSI as a functionSyntaxRsiF(expr, count)Parametersexpr - data series formulacount - lookback periodNotesThe standard RSI indicator always uses the series of closing prices for its calculations. 
414This function makes it possible to calculate RSI for any series of values.Calculation uses the original Welles Wilder formula. Wilder's exponential smoothing is equivalent to using 2*len-1 in a regular exponential moving average.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.358. S.Alloc
CategoryDaily Test StatisticsDescriptionThe amount of money allocated to this strategy on this test dateNotesS.Alloc is the most recently calculated value of the Allocation formula.If no Allocation formula was given, S.Alloc defaults to Combined(S.Equity).S.Alloc is calculated once per backtest date, before any trade entries or exits are processed. Think of it as the "overnight" account value. Use S.Alloc to access your current allocation value in the Quantity (position size) formula, if your QtyType is Shares (default) or Value. If QtyType is Percent, then S.Alloc is automatically used as the value of which to calculate the percentage.In contrast to S.Alloc, S.Equity is updated every time a trade exit is processed. Since exits are typically processed before entries, S.Alloc may therefore be slightly different from Combined(S.Equity) if referenced in strategy entry-related formulas such as Quantity. Using S.Alloc rather than Combined(S.Equity) in these formulas ensures that backtest position sizes match what the order quantities would have been without knowledge of that morning's exit details.S.Alloc is used in many of the default test statistics formulas provided in the Results and Graphs scripts. It is also used internally as the denominator of built-in stats such as S.DDPct, S.MaxDDPct, and S.NetPct.See Asset Allocation and Position Sizing for additional information.
17.18.359. S.BPx
CategoryDaily Test StatisticsDescriptionNumber of stat bars (dates) per period in the current test stats dataNotesSpecific values are:Â· S.BPY = bars per yearÂ· S.BPQ = bars per quarter (S.BPY / 4)Â· S.BPM = bars per month (S.BPY / 12)
415Â· S.BPW = bars per week (S.BPY / 52)The size of each stat period in a test will always be the smallest bar size used in any strategy. For example, if a script includes a daily bar strategy and a weekly bar strategy, there will 252 stat periods per year for both strategies, and S.BPY will return 252 by default.Use the DaysPerYear setting to specify a number of daily stat periods per year other than 252.If a script only includes weekly bar strategies, there will be 52 stat periods per year and S.BPY will return 52.The purpose of S.BPY is to facilitate calculation of formulas such as ROR that need to "annualize" a value (see Results.rts).The purpose of the other intervals is to facilitate rolling return graphs of various durations (see Graphs.rts).Because these are test-level statistic, the values returned will be the same for every strategy regardless of strategy-specific bar size.
17.18.360. S.CashInOut
CategoryDaily Test StatisticsDescriptionThe running total net CashInOut for this strategy as of this dateNotesThe net cash in-out for one stats period can be calculated as S.CashInOut - S.CashInOut[1]Unlike S.FeesInOut, S.CashInOut is NOT included in backtest stats such as the annual return, max drawdown, and daily net percent gain or loss.
17.18.361. S.Comms
CategoryDaily Test StatisticsDescriptionThe sum of all commissions paid by this strategy on this test date
17.18.362. S.Compounded
CategoryDaily Test StatisticsDescriptionStats compounding flag NotesReturns 1 (true) if the test used compounding, or 0 (false) otherwise.A test uses compounding if the Allocation or Quantity formula of any strategy refers to S.Equity.If neither formula refers to S.Equity in any strategy then the test does not use compounding.
416If either formula is absent in any strategy, then the test does use compounding, because the default formula for both of these strategy elements is, in fact, S.Equity.Because this is a test-level statistic, the value returned will be the same for every strategy (hence no need for "Combined").
17.18.363. S.Date
CategoryDaily Test StatisticsDescriptionThe current test date
17.18.364. S.DDBars
CategoryDaily Test StatisticsDescriptionThe duration, in bars, of the current drawdown for this strategy as of this test date
17.18.365. S.DDDlr
CategoryDaily Test StatisticsDescriptionThe size, in dollars, of the current drawdown for this strategy as of this test dateNotesThe internal daily equity value used to calculate drawdown includes the mark-to-market value of open positions.
17.18.366. S.DDPct
CategoryDaily Test StatisticsDescriptionThe size, in percentage, of the current drawdown for this strategy as of this test dateNotesThe internal daily equity value used to calculate drawdown includes the mark-to-market value of open positions.See Compounding for details on how drawdown percentage is calculated for compounded vs. non-compounded tests.
41717.18.367. S.Dividends
CategoryDaily Test StatisticsDescriptionThe sum of all dividends received or paid by this strategy on this test dateNotesTotal dividends in a backtest can be added to Results.rts as Dividends: Sum(S.Dividends, S.Number).
17.18.368. S.Entries
CategoryDaily Test StatisticsDescriptionThe number of new positions entered by this strategy on this test dateNotesIf referenced from any entry-related strategy formula, S.Entries will return the prior test day's entry count, not that of the current day.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.369. S.EntryOrders
CategoryDaily Test StatisticsDescriptionThe number of entry orders placed on this test dateNotesS.EntryOrders becomes available at the end of the daily setup selection and ranking process.It can be used in the QtyFinal formula as needed to change position sizes based on order count vs. exposure capacity.S.EntryOrders can also be used as a statistic showing how many orders were "placed" each day.For strategies that enter "at market" S.EntryOrders will usually be the same as S.Entries.For strategies that enter using stop and/or limit orders, S.EntryOrders will usually be more than S.Entries.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.370. S.Equity
418CategoryDaily Test StatisticsDescriptionThe current account value of a strategy or group of strategies as of this test date NotesBy default, S.Equity includes the mark-to-market value, S.M2M, of currently open positions. To get closed-trade-only equity, use S.Equity - S.M2M.If MarkToMarket is set to False, then S.Equity does not include S.M2M, and will only change value when a position is closed.S.Equity also includes net cash deposits and withdrawals (from the CashInOut strategy element). To factor those out, use S.Equity - S.CashInOut.Likewise for FeesInOut and S.FeesInOut, the difference being that CashInOut is not included in backtest stats while FeesInOut are included.Use Combined to access the combined equity value of all strategies, i.e., Combined(S.Equity), which is also the default value of S.Alloc if a different Allocation was not specified.Use Extern to access the combined equity of a specific group of strategies defined by a StatsGroup, e.g, Extern(@group_name, S.Equity).
17.18.371. S.Exits
CategoryDaily Test StatisticsDescriptionThe number of positions exited by this strategy on this test date
17.18.372. S.Exposure
CategoryDaily Test StatisticsDescriptionTotal value of positions held overnight as a fraction of current allocation (typically mark-to-market account value)NotesS.Exposure is S.Invested / S.AllocUse Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.373. S.FeesInOut
Category
419Daily Test StatisticsDescriptionThe running total net FeesInOut for this strategy as of this dateNotesThe net fees in-out for one stats period can be calculated as S.FeesInOut - S.FeesInOut[1]Unlike S.CashInOut, S.FeesInOut are included in all the stats calculations of a backtest, such as the annual return, max drawdown, and daily net percent gain or loss.
17.18.374. S.First
CategoryDaily Test StatisticsDescriptionThe number of the first stat period in a test in which a position was enteredNotesIn the default Results Section, "Periods" is defined as S.Number - S.First + 1, and is then used in all of the stats calculations that require a test period count.By using Periods in this way, the stats accurately reflect the span of time which which actual trading occurs, and omit any "warm-up" bars where indicators are still being calculated.The Combined S.First value is the smallest value for any strategy (benchmark strategies are not included in combined stats).In the Summary Report, the individual strategy stats will each reflect that strategy's number of periods (assuming default results.rts formulas).The bar size units of S.First will always be the test-level bar size, not the strategy-specific bar size.
17.18.375. S.FreeCash
CategoryDaily Test StatisticsDescriptionThe current free cash balance of the accountNotesS.FreeCash is calculated as: (starting equity) + (closed trade net profit incl. dividends) + (net cash in-out) + (net interest received-paid)+ (proceeds from currently open short stock positions)- (cost basis of currently open long stock positions)- (margin requirements of currently open futures positions)Combined(S.FreeCash) represents the current "free cash balance" of the trading account.See also: CashIntPct,  MarginIntPct, FuturesMargin, MinFreeCash
42017.18.376. S.FuturesMargin
CategoryDaily Test StatisticsDescriptionThe current total dollar margin requirement to hold open futures positionsNotesSee FuturesMargin for details about how RealTest models futures margin.
17.18.377. S.Interest
CategoryDaily Test StatisticsDescriptionThe net interest received and/or paid for excess cash and/or margin loan and/or short borrow fees on this dateNotesS.Interest is only relevant in the Combined stats series. It will always be 0 for individual strategies.Cumulative net interest can be calculated as Sum(S.Interest, S.Number).See CashIntPct, MarginIntPct, and RiskFreeRateSym for details on how interest received and/or charged is calculated and applied.
17.18.378. S.Invested
CategoryDaily Test StatisticsDescriptionTotal dollar value of positions held overnightNotesS.Invested is the sum of (shares * latest price) plus dividends received so far of open positions when MarkToMarket is True (the default).When MarkToMarket is False S.Invested is the sum of (shares * entry price) of open positions. To see this original investment value when MarkToMarket is True, use S.Invested - S.M2M.For futures positions "shares" above means (contracts * point value), i.e., S.Invested uses notional dollars.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
42117.18.379. S.LongExp
CategoryDaily Test StatisticsDescriptionTotal value of long positions held overnight as a fraction of current allocation (typically mark-to-market account value)NotesS.LongExp is S.LongInv / S.AllocUse Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.380. S.LongInv
CategoryDaily Test StatisticsDescriptionTotal dollar value of long positions held overnightNotesS.LongInv is the sum of (shares * latest price)  plus dividends received so far of open long positions when MarkToMarket is True (the default).When MarkToMarket is False S.LongInv is the sum of (shares * entry price) of open long positions.To see this original long investment value when MarkToMarket is True, use S.LongInv - S.M2M.For futures positions "shares" above means (contracts * point value), i.e., S.LongInv is the notional dollar value fo open longs.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.381. S.LossAmt
CategoryDaily Test StatisticsDescriptionThe sum of dollar (or base currency) losses for all trades exited as losses by this strategy on this test date (expressed as a positive value).Can also be written as S.LossDlr.
17.18.382. S.LossBars
CategoryDaily Test StatisticsDescriptionThe sum of durations, in bars, for trades exited as losses by this strategy on this test date
42217.18.383. S.Losses
CategoryDaily Test StatisticsDescriptionThe number of trades exited as losses by this strategy on this test date
17.18.384. S.LossPct
CategoryDaily Test StatisticsDescriptionThe sum of dollar loss / dollar position size for all trades exited as losses in this strategy on this test date (expressed as a positive value)NotesUse S.LossPctAlloc if you need the sum of dollar loss / strategy allocation.
17.18.385. S.LossPctAlloc
CategoryDaily Test StatisticsDescriptionThe sum of dollar loss / strategy allocation for all trades exited as losses in this strategy on this test date (expressed as a positive value)NotesUse S.LossPct if you need the sum dollar loss / dollar position size.
17.18.386. S.M2M
CategoryDaily Test StatisticsDescriptionNet gain or loss, in dollars, of all positions remaining open in this strategy on this test dateNotesThe default "M2M" daily stats graph is calculated as S.M2M / S.Alloc and displayed as a percentage.
17.18.387. S.MAE
Category
423Daily Test StatisticsDescriptionWorst-case ("adverse") net gain or loss, in dollars, of all positions remaining open in this strategy on this test dateNotesThis is theoretically the worst daily net P&L (M2M) value that could have occurred during this day, had all positions touched their least favorable prices simultaneously.The default "MAE" daily stats graph is calculated as S.MAE / S.Alloc and displayed as a percentage.
17.18.388. S.MFE
CategoryDaily Test StatisticsDescriptionBest-case ("favorable") net gain or loss, in dollars, of all positions remaining open in this strategy on this test dateNotesThis is theoretically the best daily net P&L (M2M) value that could have occurred during this day, had all positions touched their most favorable prices simultaneously.The default "MFE" daily stats graph is calculated as S.MFE / S.Alloc and displayed as a percentage.
17.18.389. S.MarginReq
17.18.390. S.MaxAlloc
CategoryDaily Test StatisticsDescriptionThe amount, in dollars, of the largest allocation value of this strategy as of this test date.
17.18.391. S.MaxDDBars
CategoryDaily Test StatisticsDescriptionThe duration, in bars, of the longest drawdown as of this test dateNotesThe longest drawdown is not necessarily the largest one.
42417.18.392. S.MaxDDDlr
CategoryDaily Test StatisticsDescriptionThe size, in dollars, of the largest drawdown of this strategy as of this test dateNotesThe internal daily equity value used to calculate drawdown includes the mark-to-market value of open positions.
17.18.393. S.MaxDDPct
CategoryDaily Test StatisticsDescriptionThe size, in percentage, of the largest drawdown of this strategy as of this test dateNotesThe internal daily equity value used to calculate drawdown includes the mark-to-market value of open positions.See Compounding for details on how drawdown percentage is calculated for compounded vs. non-compounded tests.
17.18.394. S.MaxEquity
CategoryDaily Test StatisticsDescriptionThe amount, in dollars, of the largest net liquidation value of this strategy as of this test date.NotesSee S.Equity for notes on what is included in this value.
17.18.395. S.MinAlloc
CategoryDaily Test StatisticsDescriptionThe amount, in dollars, of the smallest allocation value of this strategy as of this test date.
17.18.396. S.MinEquity
425CategoryDaily Test StatisticsDescriptionThe amount, in dollars, of the smallest net liquidation value of this strategy as of this test date.NotesSee S.Equity for notes on what is included in this value.
17.18.397. S.NetDlr
CategoryDaily Test StatisticsDescriptionThe daily dollar change in net liquidation value of the portion of the account allocated to this strategy as of this test date NotesThis is equivalent to S.Equity - S.Equity[1].
17.18.398. S.NetFx
CategoryDaily Test StatisticsDescriptionThe sum of net currency exchange rate change impact on trade profit or loss (T.NetFx) for all trades closed this periodNotesThe value will always be 0 unless your test was correctly set up for multi-currency strategy modeling and one or more stocks traded had different base currency than your account's base currency.See Currency and Testing Multi-Currency Strategies for details on how this works.
17.18.399. S.NetPct
CategoryDaily Test StatisticsDescriptionThe daily percent change in net liquidation value of the portion of the account allocated to this strategy as of this test date NotesThis is equivalent to (S.Equity - S.Equity[1]) / S.Alloc[1].
17.18.400. S.Number
426CategoryDaily Test StatisticsDescriptionThe number of this stat period in a testNotesIn the context of the Graphs Section, S.Number is also the count of stat periods so far as of this test date.In the context of the Results Section, S.Number is also the total number of stat periods in the test.The size of each stat period in a test will always be the smallest bar size used in any strategy. For example, if a script includes a Daily bar strategy and a Weekly bar strategy, and is run for one year, there will by default be 252 stat periods for both strategies, and S.Number will be 252 for the final period of either strategy.Use the DaysPerYear setting to specify a number of daily stat periods per year other than 252.If a script only includes weekly bar strategies and is run for one year, there will be 52 stat periods and S.Number will be 52 for the final period.Because this is a test-level statistic, the value returned will be the same for every strategy (hence no need for "Combined").
17.18.401. S.Positions
CategoryDaily Test StatisticsDescriptionThe number of positions that are currently open in the current strategy.NotesWhen referenced from entry-related formulas in a strategy that enters positions at the open or at the close, S.Positions will have been reduced by any exits that occurred at that same time, allowing it to effectively be used in your entry-related strategy formulas to may need to calculate the number of available "position slots".Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.402. S.RiskFreeRate
CategoryDaily Test StatisticsDescriptionThe daily closing value of the data series specified by the RiskFreeRateSym symbolNotesThis is mainly useful when calculating the Sharpe Ratio, as in the default formula from Results.rts:
If RiskFreeeRateSym is not specified or if it refers to a symbol that is not available in the current 
427data file, S.RiskFreeRate will be a series of zeros.
17.18.403. S.RollCosts
CategoryDaily Test StatisticsDescriptionThe sum of all roll costs paid by this strategy on this test date
17.18.404. S.Setups
CategoryDaily Test StatisticsDescriptionThe number of stocks that met the EntrySetup criteria in the current strategy.NotesIf referenced from any entry-related strategy formula, S.Setups will return the prior test day's setup count, not that of the current day.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.405. S.ShortExp
CategoryDaily Test StatisticsDescriptionTotal value of short positions held overnight as a fraction of current allocation (typically mark-to-market account value)NotesS.ShortExp is S.Shortnv / S.AllocUse Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.406. S.ShortInv
CategoryDaily Test StatisticsDescriptionTotal dollar value of short positions held overnightNotesS.ShortInv is the sum of (shares * latest price) minus dividends paid so far of open short positions when MarkToMarket is True (the default).
428When MarkToMarket is False S.ShortInv is the sum of (shares * entry price) of open positions.To see this original short investment value when MarkToMarket is True, use S.ShortInv + S.M2M.For futures positions "shares" above means (contracts * point value), i.e., S.ShortInv is the notional dollar value of open shorts.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.407. S.Slips
CategoryDaily Test StatisticsDescriptionThe sum of all slippage amounts applied to trade entries or exits by this strategy on this test date
17.18.408. S.StartEquity
CategoryDaily Test StatisticsDescriptionThe starting equity, in dollars, for this strategyNotesThis value will be the same for every test date.See Allocation for more information.
17.18.409. S.Stops
CategoryDaily Test StatisticsDescriptionThe number of trades that exited because of their ExitStop for this strategy on this test date
17.18.410. S.Targets
CategoryDaily Test StatisticsDescriptionThe number of trades that exited because of their ExitLimit for this strategy on this test date
42917.18.411. S.TradeBars
CategoryDaily Test StatisticsDescriptionThe sum of durations, in bars, for all trades exited by this strategy on this test date
17.18.412. S.TradeDlr
CategoryDaily Test StatisticsDescriptionThe sum of dollar gains-losses for all trades exited in this strategy on this test date
17.18.413. S.TradePct
CategoryDaily Test StatisticsDescriptionThe sum of net dollar gain or loss / trade position size for all trades exited in this strategy on this test dateNotesUse S.TradePctAlloc if you need the sum of dollar gain or loss / strategy allocation.
17.18.414. S.TradePctAlloc
CategoryDaily Test StatisticsDescriptionThe sum of net dollar gain or loss / strategy allocation for all trades exited in this strategy on this test dateNotesUse S.TradePct if you need the sum of dollar gain or loss / trade position size.
17.18.415. S.TWEQ
CategoryDaily Test StatisticsDescriptionThe time-weighted equity of this strategy as of this test date 
430NotesIf a test uses compounded stats (if S.Compounded is 1) then S.TWEQ is a compounded series of daily returns.In this case, S.TWEQ starts a $1 and then is multiplied each day by (1 + that day's percent return), resulting in a "growth of $1" series.When a test does not use compounding, S.TWEQ is the same as S.Equity. 
17.18.416. S.Usage
CategoryDaily Test StatisticsDescriptionTotal value of positions held any time this period as a fraction of current allocation (typically mark-to-market account value)NotesS.Usage is the maximum intraday value of S.Exposure.Use Combined or Extern to obtain this value for all strategies or for a specific other strategy or StatsGroup.
17.18.417. S.WinAmt
CategoryDaily Test StatisticsDescriptionThe sum of dollar (or base currency) gains for all trades exited as wins in this strategy on this test date.Can also be written as S.WinDlr.
17.18.418. S.WinBars
CategoryDaily Test StatisticsDescriptionThe sum of durations, in bars, for all trades exited as wins in this strategy on this test date
17.18.419. S.WinPct
CategoryDaily Test StatisticsDescriptionThe sum of dollar gain / trade position size for all trades exited as wins in this strategy on this test 
431dateNotesUse S.WinPctAlloc if you need the sum of dollar gain / strategy allocation.
17.18.420. S.WinPctAlloc
CategoryDaily Test StatisticsDescriptionThe sum of dollar gain / strategy allocation for all trades exited as wins in this strategy on this test dateNotesUse S.WinPct if you need the sum of dollar gain / trade position size.
17.18.421. S.Wins
CategoryDaily Test StatisticsDescriptionThe number of trades exited as wins by this strategy on this test date
17.18.422. SAR
CategoryIndicator FunctionsDescriptionWilder's Parabolic Stop And ReverseSyntaxSAR(accel {0.02}, max {0.2}, len {100})Parametersaccel {0.02} - initial acceleration factormax {0.2} - maximum acceleration factorlen {100} - number of bars to use in the calculationNotesImplements the Parabolic Time/Price System as an indicator function for use in trading strategies. The standard SAR is calculated using price highs and lows.To calculate SAR using a single non-standard value series, use SarF.
17.18.423. SarF
432CategoryMulti-Bar FunctionsDescriptionSAR as a functionSyntaxSarF(expr, accel {0.02}, max {0.2}, count {100})Parametersexpr - data series formulaaccel {0.02} - initial acceleration factormax {0.2} - maximum acceleration factorcount {100} - number of bars to use in the calculationNotesUse SarF to calcuate SAR using a single non-standard value series.Use SAR for the standard indicator based on price highs and lows.
17.18.424. SaveAs
CategoryImport SpecificationDescriptionPath and name of the data file (.RTD) to save at the end of an importNotesIf the SaveAs file already exists, it will be overwritten without confirmation.If SaveAs is not specified, RealTest will show a standard file save dialog at the end of the import.
17.18.425. SaveChartsTo
CategorySettingsDescriptionPath of a folder in which to automatically save a chart for every row of the scanNotesIf this setting is present, then every time a scan is run, a chart will be automatically created for every item (row) of the scan. Charts are created in the specified folder using symbol_date.png (e.g. MSFT_20210518.png) as their file names.Existing folder contents are not deleted before new charts are added, but existing chart files with the same names will be overwritten without asking.Saved charts have the same width and height and other display options as the most recently viewed chart window.This feature was added to aid discretionary traders in creating a "chart book" for study purposes.
433Charts for all items in a scan that has already been run can be saved via the Scan Menu.
17.18.426. SavePositionsAs
CategorySettingsDescriptionPath and name of a CSV file to optionally produce at the end of a test to list positions that were still openNotesIf SavePositionsAs is specified, on the last date of a backtest, before the "end of test" exits are processed, a list of open positions in all strategies is created and saved to the specified CSV file.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. See File Path Specification for helpful tips including special path expansion variables.
17.18.427. SaveScanAs
CategorySettingsDescriptionPath and name of CSV file to optionally createNotesIf SaveScanAs is specified, then the contents of the scan window are automatically saved to the specified file in CSV format each time a scan is run. If the file already exists, it will be overwritten without confirmation.If SaveScanAs is not specified, there is no prompt to save a scan, but you can easily do so using the Scan Menu.Most scans that you run are likely to be quick one-off explorations that do not require saving. The SaveScanAs setting was added mainly to make it easier to create a daily candidate list for live trading.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. See File Path Specification for helpful tips including special path expansion variables.
17.18.428. SaveStatsAs
CategorySettingsDescriptionPath and name of CSV file to optionally createNotesIf SaveStatsAs is specified, then all formulas in the Graphs section are evaluated for each date of the test and written to a CSV file. If the file already exists, it will be overwritten without confirmation.
434The CSV file will contain a separate row per date for each individual Strategy, each StatsGroup, and Combined.The columns in each row are Date and Strategy followed by a column for each Graphs item.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. This setting is ignored when running multiple tests unless the Multi Save As CSV box is checked in the Optimize dialog.See File Path Specification for helpful tips including special path expansion variables.
17.18.429. SaveTestListAs
CategorySettingsDescriptionPath and name of CSV file to optionally createNotesIf SaveTestListAs is specified, then at the end of a script run the visible contents of the Results Window are saved as a CSV file. If the file already exists, it will be overwritten without confirmation.This is equivalent to manually selecting Save List as CSV File from the Results Menu after the test or optimization run finishes.The purpose of this setting is to facilitate automation of optimization runs with summary stats saved in CSV format for external processing.To automatically save the detailed stats from a single test to CSV, use SaveStatsAs.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. See File Path Specification for helpful tips including special path expansion variables.
17.18.430. SaveTradesAs
CategorySettingsDescriptionPath and name of CSV file to optionally createNotesIf SaveTradesAs is specified, then all standard and custom trade items for every trade in the test are written in CSV columns as raw values (format codes are ignored). If the file already exists, it will be overwritten without confirmation.The content of this CSV file is the same as would be produced by opening the Trade List for the test and then saving it in CSV format.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist. This setting is ignored when running multiple tests unless the Multi Save As CSV box is checked in the Optimize dialog.See File Path Specification for helpful tips including special path expansion variables.
43517.18.431. SaveTradesType
CategorySettingsDescriptionFormat to use when creating the SaveTradesAs output fileNotesChoices are Full or Compact.If Full is specified or if SaveTradesType is not specified, then all of the Trade List columns are written to the CSV file.If Compact is specified then the CSV file is written with only the fields required for Imported Trade List playback.Unlike some Scan and Test Settings, there is no Settings Panel equivalent for this particular option and the setting does not persist.
17.18.432. Scan
CategoryScript SectionsDescriptionScan definitionNotesSee Scan Section for details.
17.18.433. ScanInclude
CategoryScript SectionsDescriptionAllows a script to include another script when run in Scan ModeSyntaxScanInclude: path where path is either a full file path (e.g. C:\RealTest\Scripts\script.rts) or a path relative to the Scripts folder (e.g. Examples\script.rts).NotesSee the general-purpose Include statement for further details.
17.18.434. ScanNoDefCols
CategorySettingsDescriptionAllows the default Date and Symbol columns to optionally be omitted from Scan Window and SaveScanAs output
436NotesBy default every scan begins with Date and Symbol columns, followed by the columns defined in the Scan section of the script. In certain cases you may want more control over this. This setting suppresses the Date and Symbol columns, so that only your columns are shown. 
17.18.435. ScanNoHeader
CategorySettingsDescriptionAllows the header row to optionally be omitted from any SaveScanAs output filesNotesThere is no way to suppress the column headers in a Scan Window, but this setting can be used if needed to create a CSV file with no header row.
17.18.436. ScanNoWindow
CategorySettingsDescriptionAllows a Scan to create a CSV output file without also creating a Scan Window.NotesThe purpose of this option is to allow large-scale data-generation scans to be run more quickly and with less memory usage.SaveScanAs must be specified to use this setting.The Sort definition, if specified, is ignored in this scan mode.
17.18.437. ScanSettings
CategoryScript SectionsDescriptionDefines the settings to use only when the script run mode is Scan.NotesThe general-purpose Settings section is always applied first, then modified by any items specified in ScanSettings when applicable.See Settings Sections for details.
17.18.438. Select
CategoryGeneral-Purpose Functions
437DescriptionConditional choice functionSyntaxSelect(condition, if_true, condition, if_true, ...)Parameterscondition - formula specifying a true/false condition (non-zero means true)if_true - formula to evaluate and return the result of if condition is trueNotesSelect is similar to IF in that it provides a kind of conditional branch function. In fact, the following two statements are equivalent:Â· if(cond1, value1, value2)Â· select(cond1, value1, 1, value2)The purpose of select becomes more apparent when multiple if statements need to be nested:Â· if(cond1, if(cond2, if(cond3, value3, NaN), value2), value1)Â· select(cond1, value1, cond2, value2, cond3, value3)In this example, the select expression is clearly simpler.If select finds no conditions that return non-zero ("true"), then the function returns NaN. This is different from if, which will never return NaN unless done explicitly as in the above example.To make select always return a default value if no conditions match (as in the first select example above), either make the final condition simply "1" (or any non-zero value), or use an odd number of arguments:Â· select(cond1, value1, value2)When an odd number of arguments is used, the last argument becomes the default value.
17.18.439. Sequence
CategoryMulti-Bar FunctionsDescriptionLook for a sequence of conditions within a specified number of barsSyntaxSequence(count, condition1, condition2, ...)Parameterscount - the count of bars to look withincondition1 - the first conditioncondition2 - the second condition... - any number of additional conditionsNotesReturns 1 (true) if condition1 and condition2 and any other conditions specified all occurred within the most recent count bars and occurred in the specified sequence.Returns 0 (false) otherwise.It does not matter how many bars separate the condition occurrences nor what happens during 
438those intervening bars, only that these conditions occurred in this sequence within this many bars.ExampleLook for a breakout to a new 100-day high followed by a pullback lasting at least 5 bars followed by another new high, all within the past 10 bars:
17.18.440. Settings
CategoryScript SectionsDescriptionDefines the settings to apply each time the script runs.NotesUse the Settings section for all of your common settings. Use ScanSettings, TestSettings, and OrderSettings as needed to override common settings for these specific run modes.See Settings Sections for details.
17.18.441. SetupRank
CategoryCurrent Position InformationDescriptionReturns the rank number for this position when SetupScore was evaluated at entry time.NotesSetupRank can be referred to in any non-entry-related strategy formula or in QtyFinal.The setup ranking mechanism can be observed by running a test with TestOutput: Log enabled.
17.18.442. SetupScore
CategoryStrategy ElementsDescriptionRanks entry setups when a strategy has more setups than can be enteredInputNumeric formulaNotesSetups with higher scores are entered first. If SetupScore is not specified, setups will be ranked in alphabetical order by symbol.
439The number of positions that a strategy can enter per day is determined by evaluating the MaxSetups, MaxEntries, MaxInvested and, MaxPositions.For more information on how the backtest engine works in general, see Backtest Engine Details.
17.18.443. SetupSkip
CategoryStrategy ElementsDescriptionEnables skipping a setup if a condition appliesInputAny formula specifying a true/false condition (non-zero means true)NotesSetupSkip is evaluated during the top-down setup selection process. If the return value is true (non-zero) then this setup does not become an order and its slot is made available to another setup.This is in contrast to EntrySkip, which is not evaluated until the entry simulation phase of a backtest.See BackTest Engine Details for more information about how setup selection works.
17.18.444. SetupSum
CategoryGeneral-Purpose FunctionsDescriptionEvaluates an expression for each setup and returns the sum of the valuesSyntaxSetupSum(expression)NotesThis is a specialized function meant to be used in entry-related formulas that want to the sum of something across all current setups.SetupSum(1) returns the count of today's setups, which is not yet available in S.Setups at position entry time.Use OrderSum to count or calculate something for non-skipped setups only.Note that SetupSum cannot be used to refer to past setups in a strategy. It only has access to setups for the current date in the test. Therefore SetupSum(expression)[offset] will probably not have meaningful results.
17.18.445. Shares or Contracts
CategoryCurrent Position InformationDescriptionReturns the number of shares or contracts held in the current position 
440NotesThis element can be referred to as either Shares or Contracts, regardless of the type of instrument being traded.The number returned is the number of shares (or contracts) held in the current position for the current strategy only. To get the number of shares of the current symbol held in a different strategy, use Extern(strategy_name, Shares).To get the number of shares of the current symbol held in all strategies, use Combined(Shares).Shares is always a positive number, regardless of the side (long vs. short) of the position. Multiply Shares by Side if you need the sign of the result to reflect the position's side. To get the net long-short position of the current symbol across all strategies use Combined(Shares * Side).A common usage of Shares is in Commission calculations such as Max(1.0, 0.005 * Shares).
17.18.446. ShortLoanIntPct
CategorySettingsDescriptionAnnualized interest rate paid for daily value of short stock positions (short borrow fee rate).NotesDaily short borrow fees are subtracted from combined S.Equity and therefore become part of the total return of the backtest.Use ShortPrcdsIntPct to specify interest received for the cash value of short positions, if applicable to your broker.
17.18.447. ShortPrcdsIntPct
CategorySettingsDescriptionInterest rate received for value of proceeds from short stock positions held in the account.NotesIf the settings also provide a RiskFreeRateSym then ShortPrcdsIntPct is added to the current daily interest rate as determined by today's value of the risk-free rate series. In this case, ShortPrcdsIntPct would typically be negative, e.g. -0.5 if your broker pays 0.5% less than the fed funds rate (with floor of zero).If ShortPrcdsIntPct is provided when there is no RiskFreeRateSym then ShortPrcdsIntPct is simply a fixed annual interest rate.Daily net interest received or paid is added to combined S.Equity and therefore becomes part of the total return of the backtest.The stats series S.Interest can be used to graph or reference the cumulative net interest received or paid in the account.See also CashIntPct, MarginIntPct, and ShortLoanIntPct.
44117.18.448. Side (position)
CategoryCurrent Position InformationDescriptionPosition sideNotesReturns 1 for a long position or -1 for a short position.Multiply Shares or FillValue by Side if you want them to be negative for short positions.
17.18.449. Side (strategy)
CategoryStrategy ElementsDescriptionDefines the side (long vs. short) on which a strategy will take positionsChoicesLong - all entries are long buys Short - all entries are short salesBoth - entries can be either long or short (default)NotesIn most cases, it is best to use side-specific strategies when modeling a multi-strategy trading system.Both-way strategies are mainly useful for special needs such as hedging a long/short strategy pair using an index.When Side is not specified, the sign of the value of Quantity is used to determine the side of each entry.
17.18.450. Sign
CategoryGeneral-Purpose FunctionsDescriptionReturns the sign of a numberSyntaxSign(value)Parametersvalue - formula specifying a numberNotesReturns 1 if the number is positive, -1 if the number is negative, or 0 if the number is 0.
44217.18.451. SigSpike
CategoryIndicator FunctionsDescriptionAdam Grimes' Sigma Spike indicatorSyntaxSigSpike(len)Parameterslen - lookback periodNotesSigma Spike is defined as ROC(C,1) / StdDev(ROC(C,1),len)[1]. 
17.18.452. SinceHigh
CategoryMulti-Bar FunctionsDescriptionCount of bars since the highest value of an expression in a number of barsSyntaxSinceHigh(expr, count)Parametersexpr - data series formulacount - lookback periodNotesIf today's value is the highest (largest) value in count days, the function returns 0. If the high was yesterday, the return value is 1, and so on.If there are multiple instances of the highest value then the most recent one is used.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.453. SinceLow
CategoryMulti-Bar FunctionsDescriptionCount of bars since the lowest value of an expression in a number of barsSyntaxSinceLow(expr, count)
443Parametersexpr - data series formulacount - lookback periodNotesIf today's value is the lowest (smallest) value in count days, the function returns 0. If the high was yesterday, the return value is 1, and so on.If there are multiple instances of the lowest value then the most recent one is used.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.454. SinceTrue
CategoryMulti-Bar FunctionsDescriptionCount of bars since a condition was last trueSyntaxSinceTrue(condition, count {0})Parameterscondition - data series formulacount - lookback period (optional)NotesCondition will be evaluated for the most recent bar first, then proceed back in time until a non-zero value is found or count bars have been checked, whichever comes first.For each bar, condition is evaluated as if that bar were the current bar, i.e. without knowledge of future splits relative to that bar.If count is omitted then there is no maximum (all bars before this one are potentially checked).If condition was never true, the return value is -1.If condition is currently true, the return value is 0.If condition was most recently true yesterday, the return value is 1, and so on.This function supports one-pass calculation when used in the Data Section without a count argument.
17.18.455. Sine
CategoryGeneral-Purpose FunctionsDescriptionTrigonometric sine of a number of degreesSyntaxSine(value)Parameters
444value - formulaNotesThe parameter value is assumed to be degrees (0-360).To convert radians to degrees, multiply by 57.2957795131 (180/Ï).
17.18.456. Skewness
CategoryMulti-Bar FunctionsDescriptionStatistical measure of the lopsidedness of a distribution of valuesSyntaxSkewness(expr, count)Parametersexpr - data series formulacount - lookback periodNotesSkewness is calculated in the same way that Excel calculates the SKEW.P function, which is as if the set of count values is the entire population.The specific formula used is shown below, in the "skew" item:
This also illustrates how these statistical functions could be calculated in the Data Section of a script, though since they're provided built-in, there's no reason to do so.This function supports one-pass calculation when used in the Data Section with a non-variable count.See also StdDev and Kurtosis.
17.18.457. SkipTestIf
CategorySettingsDescriptionFormula with condition which, if true, causes an entire test to be skippedNotesThis special formula in TestSettings is meant to be used when running optimizations.As an example, if you were optimizing a simple RSI or Stochastics crossover strategy, you might use something like this:
445Without the SkipTestIf filter, there would be 81 tests, including many "illogical" combinations (albeit perhaps interesting to test these...)Adding the filter as shown above reduces the actual test count to 45 by eliminating the tests that don't "make sense" for this strategy idea.This kind of filtering can help large optimizations run significantly faster.Note that in the context of this formula there is specific strategy or stock. It is only evaluated once per test, before the run begins. The only meaningful elements to use in the formula will be your Parameters values.Note also that the test count shown in the optimization dialog and in the status bar when the test runs indicates the full combination count without the filter. The filtered tests are simply skipped over and the final row count in the results window will be the count of non-skipped tests.
17.18.458. Slippage
CategoryStrategy ElementsDescriptionSlippage amount, in points (dollars per share or contract), for each transactionInputAny formula specifying dollars per share or contract (points)NotesDefines the amount of slippage to apply to to each transaction, in price points. Slippage is calculated and applied to each side of the trade (entry and exit) separately.If FillPrice is used in the Slippage formula, it automatically retrieves the entry price for entry slippage and the exit price for exit slippage calculation.Slippage, if specified, is applied by default to every transaction, regardless of order type (market, stop or limit) or time (open, intraday or close).To specify a different slippage amount for limit-order transactions (fills at a limit price), use LimitSlip.To specify a different slippage amount for stop-order transactions (fills at a stop price) use StopSlip.To specify a different slippage amount for at-open market transactions use OpenSlip.To specify a different slippage amount for at-close market transactions use CloseSlip.If all four of these specific slippage types are specified then there is no need to also specify Slippage.Use Slippage when a simple average assumption is sufficient for your modeling needs.
For futures, a simple assumption is "one tick" slippage for any market, e.g. Slippage: TickSize.For stocks, percent-based slippage usually makes the most sense, e.g. Slippage: 0.002 * FillPrice.A more complex example for less liquid futures, would be: Max(2 * TickSize, 0.02 * ATR(5)), meaning  "2 ticks or 2% of daily average true range, whichever is greater".A more complex example for less liquid stocks would be: Max(0.05, 0.002 * FillPrice, 0.1 *  Shares / 
446Volume), meaning "0.05/share or 0.2% of price or 10% of the ratio of your shares to the total daily volume, whichever is greater". 
17.18.459. Slope
CategoryMulti-Bar FunctionsDescriptionLinear regression slopeSyntaxSlope(expr, {expr2,} count)Parametersexpr - data series formula (Y values)expr2 - optional second data series formula (X values -- a linear series from 1 to count is used if omitted)count - lookback periodNotesCalculates the slope of a linear regression of expr evaluated for the previous count bars.See also LinReg and YInt.
17.18.460. Spearman
CategoryMulti-Bar FunctionsDescriptionSpearman Rank Correlation of two seriesSyntaxSpearman(expr1, expr2, count)Parametersexpr1 - data series formulaexpr2 - data series formulacount - lookback periodNotesSee this link for a general description of this approach to correlation.This implementation handles ties correctly. Output will match Python scipy.spearmanr.A typical use case is this indicator, i.e., 100 * Spearman(C, FunBar, 10).See also Correl, CorrelAvg, etc.
17.18.461. Split
447CategoryBar Data ValuesDescriptionCurrent bar split factorNotesThe split factor of a past bar is defined as the as-traded price divided by the split-adjusted price (unadjusted/adjusted).If no stock splits have occurred since the date of the past bar, the split factor is therefore 1.0.Therefore, if split is not 1.0, it means there will be splits in the future relative to the current bar being evaluated.Since RealTest always provides price or volume values "as-traded" (unadjusted), and multi-bar indicators adjusted for past splits (to avoid distortion) but not future ones,  there is rarely a need to explicitly refer to a bar's split factor.Care must be taken to avoid implicit look-ahead bias when using split because, by definition, if split is not 1.0, this indicates a future split, not a past one.See also Split Handling.
17.18.462. Sqr
CategoryGeneral-Purpose FunctionsDescriptionSquare Root of a numberSyntaxSqr(value)Parametersvalue - formula specifying a numeric value
17.18.463. StartDate (Import)
CategoryImport SpecificationDescriptionThe first date to include in a data importChoicesDate Constant - a literal date Earliest - 1/1/1990 or the oldest available date, which ever is more recentNotesTo start an import with a date earlier than 1/1/1990, use the desired date rather than Earliest. (The actual earliest data date can't be known until the import is completed.)The default interpretation of Earliest can be changed if desired by editing RealTest.ini (when RT is 
448not running) and changing EarliestImportYear.See also EndDate and NumBars.
17.18.464. StartDate (Setting)
CategorySettingsDescriptionThe first date to include in a scan or testChoicesDate Constant - a literal date Earliest - the oldest date of any symbol in the current data fileNotesIf a date range is not specified in a script then the dates from the Settings Panel will be used.If DateSym is specified then Earliest means the oldest date of that specific symbol.
17.18.465. StartPercent
CategoryStrategy ElementsDescriptionPercent of initial AccountSize to give to this strategyInputAny formula specifying a percentageNotesBoth S.StartEquity and the initial value of S.Equity for the strategy will be this percentage of the initial account size.The default StartPercent is 100. This models each strategy having the entire account at its disposal.Specifying StartPercent less than 100 is useful when modeling strategies running in separate accounts. In this case *AccountSize* would be the sum of your initial account values and StartPercent would specify the relative percent sizes of each sub-account.When using StartPercent: 100 (or not using it since this is the default), multiple strategies should apply their desired allocation fractions via their Quantity formulas.
17.18.466. StatsGroup
CategoryScript SectionsDescriptionDefines a group of strategies to combine for test statistics reporting and for application of multi-strategy constraints such as MaxExposure, MaxInvested, MaxPositions, etc.
449NotesThe strategies in a StatsGroup are specified with the Using statement.StatsGroups can include Strategies or Benchmarks but cannot include other StatsGroups.A Strategy or Benchmark can be included in any number of StatsGroups.See Special Strategy Types for details.
17.18.467. StatsIncludeCash
CategorySettingsDescriptionWhether to include cash deposits and withdrawals (from CashInOut or CashList) in percent-based test statsChoicesFalse - exclude cash from stats (stats are "time weighted")True - include cash in stats (stats are "net of cash")NotesUse False (the default) to see your "pure" trading stats independent of cash withdrawals or deposits (e.g. for taxes).Use True to see trading stats that treat cash transactions like trading gains or losses (e.g. for client "net of fees" stats).The management_fees.rts example script can be used to apply and report management fees by simply including it at the end of any other script.
17.18.468. StdDev
CategoryMulti-Bar FunctionsDescriptionStatistical measure of the variance of a distribution of valuesSyntaxStdDev(expr, count)Parametersexpr - data series formulacount - lookback periodNotesStdDev is calculated in the same way that Excel calculates the STDEV.P function, which is as if the set of count values is the entire population.The specific formula used is shown below, in the "sdev" item:
450This also illustrates how these statistical functions could be calculated in the Data Section of a script, though since they're provided built-in, there's no reason to do so.This function supports one-pass calculation when used in the Data Section with a non-variable count.See also Skewness and Kurtosis.
17.18.469. StdErr
CategoryMulti-Bar FunctionsDescriptionStandard error of predicted vs. actual values in a regressionSyntaxStdErr(expr, {expr2,} count)Parametersexpr - data series formula (Y values)expr2 - optional second data series formula (X values -- a linear series from 1 to count is used if omitted)count - lookback periodNotesFor each value in the expr data series formula, the Slope and YInt are calculated for count values.Each expr value is then compared to the predicted value of that point on the line thus defined.The StdError is the square root of the sum of squared differences between actual expr values and LinReg predictions.This function is equivalent to =STEYX in Excel.Example
45117.18.470. STOC
CategoryIndicator FunctionsDescriptionStochastics IndicatorSyntaxSTOC(len, avg)Parameterslen - lookback periodavg - smoothing average periodNotesThe Stochastic Oscillator measures the position of a value in a range of similar values, with optional smoothing.STOC(len, avg) could also be expressed as 100 * Avg((C - Lowest(L, len)) / (Highest(H, len) - Lowest(L, len)), avg).STOC(1,1) is therefore a simple way to calculate "Internal Bar Strength", i.e., 100*(C-L)/(H-L).In case you're looking for the "Williams %R" indicator, that is simply -1 * (100 - STOC(len, 1)).
45217.18.471. StopSlip
CategoryStrategy ElementsDescriptionSlippage amount, in points (dollars per share or contract), for each stop order transactionInputAny formula specifying dollars per share or contract (points)NotesDefines the amount of slippage to apply to to each stop order transaction, in price points. StopSlip is applied to any transaction that occurs at an EntryStop or ExitStop price.If StopSlip is not specified then Slippage is applied instead.When a strategy uses both EntryStop and EntryLimit (enters positions with a stop-limit order) and the fill is at the limit price, LimitSlip is applied.
17.18.472. StratData
CategoryScript SectionsDescriptionNamed formulas calculated and stored in memory arrays for each strategy each date while tests are runNotesSee TestData and StratData Sections for a more detailed description.
17.18.473. Strategy
CategoryScript SectionsDescriptionDefines a trading strategyNotesSee Strategy Section for details.
17.18.474. StrategyScore
CategoryStrategy ElementsDescription
453Provides a value to use for this strategy when ranking all strategies to determine setup prioritization in top-down modeInputNumeric formulaNotesStrategyScore is evaluated for each strategy at each turn of the setup selection process.The strategy with the highest score gets first choice to add its next setup(s) at that step.If StrategyScore is not provided, the default is simply the negative strategy number (first strategy gets top rank, then second, etc.)Typically all strategies will use the same score formula (use a shared Template if so) though this is not a requirement.Here are some examples of common StrategyScore formulas:Â· StratNum
       
          
// highest strategy number (reverse script order)Â· -S.Positions
    
          
// fewest open positionsÂ· -OrderSum(1)
 
          
// fewest new orders so far todayÂ· ROC(S.Equity,20)
      
// best recent performance (m2m)Â· S.DDPct
         
          
// worst current drawdown The fewer setup constraints are in place, the more significant this formula becomes. For example if the only constraint is e.g. Combined: MaxExposure: 100, then StrategyScore will play a large role in deciding which strategy or set of strategies are most likely to receive that exposure.StrategyScore also gains significance when MaxPerTurn is used to allow a strategy to select all of its setups on its first turn, or more than one setup per turn.Use the multi_moc_top_down.rts and oex_tf_top_down.rts example scripts to experiment with these.See Also: Backtest Engine Details and Capacity Constraints
17.18.475. StratNum
CategoryCurrent Strategy InformationDescriptionOrdinal number of the current strategy in the scriptNotesThis can be useful in a StrategyScore formula.See also ?Strategy, which returns the current strategy name, and StratRef, which allows dynamic strategy lookup.
17.18.476. StratRef
CategoryGeneral-Purpose FunctionsDescription
454Find the number of a given strategy, and/or allow dynamic external symbol usageSyntaxStratRef(strategy)Parametersstrategy - any formula returning a string or a numberReturn ValueThe StratNum of the specified strategy, or 0 if not foundNotesIf the current strategy is "mr_long", then @mr_long, StratNum, StratRef(StratNum), StratRef(?Strategy), and StratRef("mr_long") will each return the same number.StratRef can also be used as the first argument to Extern, for cases where you need to dynamically refer to other strategies.
17.18.477. Sum
CategoryMulti-Bar FunctionsDescriptionSum of valuesSyntaxSum(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEvaluates expr for each of count bars and returns the sum of the values.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.478. SumSince
CategoryMulti-Bar FunctionsDescriptionSum of values since a condition was last true, or until it becomes trueSyntaxSumSince(condition, expression, count {0}, nth {1})Parameterscondition - formula to evaluate for each bar until true (non-zero)expression - formula to evaluate for each non-true condition bar and add to a running sum
455count - how many bars back to go (optional)nth - which instance of condition to use (optional)NotesFor each bar until condition is true, expression is evaluated and added to the sum.The sum does not include the value of expression for the bar where the condition becomes true.If condition is immediately true, the result is 0.If nth is positive, condition is evaluated for the most recent bar, then continues back in time until the nth non-zero value is found.If nth is negative, condition will be evaluated for the most recent bar, then continues forward in time until the abs(nth) non-zero value is found. If nth is not specified, the default is 1.Count most be provided if nth is to be provided (use 0 for the default of "all bars")This function supports one-pass calculation when used in the Data Section without the optional arguments.
17.18.479. SumSQ
CategoryMulti-Bar FunctionsDescriptionSum of squared valuesSyntaxSumSQ(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEvaluates expr for each of count bars and returns the sum of the squares of the values.
17.18.480. SuperTrend
CategoryIndicator FunctionsDescriptionOlivier Seban's SuperTrend indicatorSyntaxSuperTrend(len, mult)Parameterslen - ATR lookback length
456mult - ATR multiplierNotesSuperTrend is like a trailing stop above or below typical price.Typical price (TP) is (H + L) / 2.The trend line is TP +/- ATR(len) * mult.When TP crosses above trend, trend flips to TP - ATR * mult.When TP crosses below trend, trend flips to TP + ATR * mult.Trend direction is therefore defined by whether TP is above or below trend.ATR is calculated using Wilder's smoothing.
17.18.481. Switch
CategoryGeneral-Purpose FunctionsDescriptionValue switch functionSyntaxSwitch(value, match1, value1, match2, value2, ...)Parametersvalue - the value to switch onmatch1...matchN - values to compare it tovalue1...valueN - value to return for corresponding matchNotesSwitch(Symbol, $AAPL, 1, $GOOGL, 2, $MSFT, 3) is equivalent to:Select(Symbol = $AAPL, 1, Symbol = $GOOGL, 2, Symbol = $MSFT, 3)or to:if(Symbol = $AAPL, 1, if(Symbol = $GOOGL, 2, if(Symbol = $MSFT, 3)))As with Select, the final match, value pair can be replaced by a single value to specify what to return if there are no matches, e.g.Switch(Symbol, $AAPL, 1, $GOOGL, 2, 3)would return 3 for all other symbols, whereas the prior example would return nan if there were no matches.Arguments can be numeric or strings. If strings then comparison is case-insensitive.
17.18.482. Symbol
Category
457Stock/Contract InformationDescriptionNumeric code for the symbol of the current securityNotesThe value returned is the alphabetical ordinal number of the symbol in the currently loaded DataFile. You don't need to know the actual number to use it. Use constant Symbol References like $MSFT to compare specific symbols to the value of this variable.See also ?Symbol, which returns the current symbol as a string, and SymRef, which allows dynamic symbol lookup.?Symbol = "MSFT" and Symbol = $MSFT would both accomplish the same purpose, but it is slightly more efficient to use symbol constants. Symbol constants also have the advantage of smart auto-complete when entering them.
17.18.483. SymChangeList
CategorySettingsDescriptionSpecifies the path to a CSV file containing a list of symbol changes to use when processing imported trade listsNotesThis feature is provided as an optional alternative to editing old trade lists themselves.The default if not specified is symchanges.csv in (a) the current OrderClerkFolder or (b) the RealTest installation folder.It is not necessary to use the SymChangeList for trade list symbols which have since been delisted. When using Norgate Data with delisted stocks included, RealTest will automatically find the delisted version of such symbols, e.g. CATM would be found as CATM-202105, assuming that the trade occurred before that date.The SymChangeList file has two required and two optional columns: OldSymbol, NewSymbol, ChangeDate, Exchange. It doesn't matter what the columns are called or whether there's a header row.The ChangeDate column is optional. If supplied, RealTest will only apply the symbol change to imported trades which occurred prior to that date.The Exchange column is optional (ChangeDate must also be provided but can be left blank). If supplied it overrides the exchange for this symbol when orders are generated.Here is an example of a SymChanges.csv file used for trade lists:
Here is an excerpt from the default ibfutures_ndu.csv file that is included with RealTest in the Examples folder:
458To correctly generate orders for IB futures trades using Norgate futures data, it is necessary to use this list. Edit as needed for other data sources and/or futures markets.To use this list, either rename it as SymChanges.csv or add SymChangeList: Examples\ibfutures_ndu.csv to your settings.If using CSI futures data, use Examples\ibfutures_csi.csv instead.
17.18.484. SymInfoFile
CategoryImport SpecificationDescriptionSpecifies a symbol information file to be used during data importInputPath to a symbol information file. NotesSee Symbol Information File for details.
17.18.485. SymRef
CategoryGeneral-Purpose FunctionsDescription
459Find the number of a given symbol, and/or allow dynamic external symbol usageSyntaxSymRef(symbol)Parameterssymbol - any formula returning a string or a numberReturn ValueThe current symbol number of the specified symbol, or 0 if not foundNotesIf the current symbol is MSFT, then $MSFT, Symbol, SymRef(Symbol), SymRef(?Symbol), and SymRef("MSFT") will each return the same number.SymRef can also be used as the first argument to Extern, for cases where you need to dynamically refer to other symbols.
17.18.486. T.Bars
CategoryTrade Record ItemsDescriptionDuration of a trade in barsNotesEntry and exit the same bar has duration of 0.Trade duration in days depends on the BarSize used to run the test.
17.18.487. T.CommIn
CategoryTrade Record ItemsDescriptionCommission paid for the entry transaction of a trade, in dollars
17.18.488. T.CommOut
CategoryTrade Record ItemsDescriptionCommission paid for the exit transaction of a trade, in dollars
17.18.489. T.DateIn
460CategoryTrade Record ItemsDescriptionEntry date of a trade as a number in yyyymmdd format
17.18.490. T.DateOut
CategoryTrade Record ItemsDescriptionExit date of a trade as a number in yyyymmdd format
17.18.491. T.Div
CategoryTrade Record ItemsDescriptionDividend amount(s) received or paid over the duration of a trade
17.18.492. T.Fraction
CategoryTrade Record ItemsDescriptionThe fraction of allocation at trade entry time that was used as the initially ordered position sizeNotesSee FillFraction for details about how this is calculated.
17.18.493. T.FxIn
CategoryTrade Record ItemsDescriptionCurrency exchange rate on trade entry dateNotesThis is the ratio of security currency divided by account currency.The value will always be 1 unless your test was correctly set up for multi-currency strategy modeling and the stock traded has a different base currency than your account's base currency.See Currency and Testing Multi-Currency Strategies for details on how this works.
46117.18.494. T.FxOut
CategoryTrade Record ItemsDescriptionCurrency exchange rate on trade exit dateNotesThis is the ratio of security currency divided by account currency.The value will always be 1 unless your test was correctly set up for multi-currency strategy modeling and the stock traded has a different base currency than your account's base currency.See Currency and Testing Multi-Currency Strategies for details on how this works.
17.18.495. T.Highest
CategoryTrade Record ItemsDescriptionThe highest high during a tradeNotesIf there was a split during the trade, price is expressed using the exit date split factor.
17.18.496. T.Lowest
CategoryTrade Record ItemsDescriptionThe lowest low during a trade NotesIf there was a split during the trade, price is expressed using the exit date split factor.
17.18.497. T.NetFx
CategoryTrade Record ItemsDescriptionNet currency exchange rate change impact on trade profit or lossNotesThis returns the portion of this trade's net profit or loss that is attributable to the change in currency exchange rate between position entry and exit dates.The value will always be 0 unless your test was correctly set up for multi-currency strategy modeling and the stock traded has a different base currency than your account's base currency.
462See Currency and Testing Multi-Currency Strategies for details on how this works.
17.18.498. T.NetPct
CategoryTrade Record ItemsDescriptionThe net trade profit or loss of a trade after commission and dividend are applied, expressed as a fraction (%/100) of the entry position sizeNotesThis is calculated as T.Profit / (T.QtyIn * T.PriceIn * T.FxIn) / T.PtValSee also T.Profit
17.18.499. T.Points
CategoryTrade Record ItemsDescriptionThe net points (split-adjusted $/share) gained or lost in a trade (negative for a loss)
17.18.500. T.PriceIn
CategoryTrade Record ItemsDescriptionTrade entry price
17.18.501. T.PriceOut
CategoryTrade Record ItemsDescriptionTrade exit price
46317.18.502. T.Profit
CategoryTrade Record ItemsDescriptionThe net trade profit or loss of a trade after commission and dividend are applied, expressed in dollarsNotesSee also T.NetPct
17.18.503. T.PtVal
CategoryTrade Record ItemsDescriptionThe point value of symbol of a trade
17.18.504. T.QtyIn
CategoryTrade Record ItemsDescriptionThe number of shares or contracts bought or shorted when a trade was entered
17.18.505. T.QtyOut
CategoryTrade Record ItemsDescriptionThe number of shares or contracts sold or covered when a trade was exited
17.18.506. T.Reason
CategoryTrade Record ItemsDescriptionThe reason a trade was exited or an entry was skippedNotes
464Trade reason codes are displayed as text in the trade list window. This element is here in case you need to refer to a trade's reason code in a formula.Exit Reason Codes:Code Reason1 exit rule2 exit limit3 exit stop4 end of test5 end of data6 trade list7 reduce position8 roll forward
Setup/Entry Skip Reason Codes:Code Reason1 max invested2 max positions3 max entries4 max same category5 max same symbol6 zero quantity7 limit not hit8 stop not hit9 ambiguous timing10 entry skip formula11 max setups12 max exposure13 max new positions14 max new exposure15 max new invested16 stop+limit not hit17 no data18 zero volume19 setup skip20 max long exposure21 max long invested22 max net exposure23 max net invested24 max short exposure25 max short invested26 min free cash27 min net exposure28 min net invested29 max symbol exposure30 max symbol invested31max category exposure32 max category invested
46517.18.507. T.RollCosts
CategoryTrade Record ItemsDescriptionTotal roll costs paid for a futures trade, in dollars.NotesUse the RollCost strategy formula to specify the cost of each roll transaction (both sides).Use S.RollCosts to see the total roll costs for all trades closed that day.
17.18.508. T.Side
CategoryTrade Record ItemsDescriptionThe side of a trade (1=long, -1=short) 
17.18.509. T.SlipIn
CategoryTrade Record ItemsDescriptionThe amount of slippage applied to the entry price of a trade, in total dollars
17.18.510. T.SlipOut
CategoryTrade Record ItemsDescriptionThe amount of slippage applied to the exit price of a trade, in total dollars
17.18.511. T.SplitIn
CategoryTrade Record ItemsDescriptionThe bar split factor (actual price / adjusted price) at trade entry time 
17.18.512. T.SplitOut
466CategoryTrade Record ItemsDescriptionThe bar split factor (actual price / adjusted price) at trade exit time 
17.18.513. T.Strat
CategoryTrade Record ItemsDescriptionThe strategy number of a tradeNotesStrategies are numbered by the order in which they appeared in a script that was used to run the test
17.18.514. T.TimeIn
CategoryTrade Record ItemsDescriptionEntry time-of-day code of a tradeNotesTrade time codes are displayed as text in the trade list window. This element is here in case you need to refer to a trade's entry time in a formula.Time codes are: 1=Open, 2=Intraday, 3=Close.
17.18.515. T.TimeOut
CategoryTrade Record ItemsDescriptionExit time-of-day code of a tradeNotesTrade time codes are displayed as text in the trade list window. This element is here in case you need to refer to a trade's exit time in a formula.Time codes are: 1=Open, 2=Intraday, 3=Close.
17.18.516. T.ValueIn
467CategoryTrade Record ItemsDescriptionValue calculated by EntryTradeValue when position was enteredNotesThis item can be useful in Trade Statistics Functions
17.18.517. T.ValueOut
CategoryTrade Record ItemsDescriptionValue calculated by ExitTradeValue when position was exitedNotesThis item can be useful in Trade Statistics Functions
17.18.518. Tangent
CategoryGeneral-Purpose FunctionsDescriptionTrigonometric tangent of a number of degreesSyntaxTangent(value)Parametersvalue - formulaNotesThe parameter value is assumed to be degrees (0-360).To convert radians to degrees, multiply by 57.2957795131 (180/Ï).
17.18.519. TanH
CategoryGeneral-Purpose FunctionsDescriptionHyberbolic Tangent of a numberSyntaxTanH(value)Parametersvalue - formulaNotes
468The TanH function normalizes financial time series to a range of -1 to 1, aiding in creating smooth, bounded trading indicators and improving the detection of overbought and oversold conditions. Its properties include being linear in the middle, which helps in interpreting small changes clearly, and bounding outliers, which prevents extreme values from disproportionately affecting the analysis.
17.18.520. TargetPrice
CategoryGeneral-Purpose FunctionsDescriptionCalculate the value of tomorrow's close that would cause an indicator to reach a specific levelSyntaxTargetPrice(expression, value, range {50})Parametersexpression - an indicator formula value - the desired return value of the indicatorrange {50} - today's close plus/minus this percentage sets the range of prices to tryReturn ValueThe price that, if it were tomorrow's close, would come nearest to producing the desired indicator value.NotesThis function uses binary search logic to govern an iterative process:Â· temporarily coerce tomorrow's OHLC values to a specific value in the data (adding an extra bar at the end if needed)Â· call the indicator function with a one-bar lookahead offset e.g. MA(C, 20)[-1]Â· narrow the search range based on whether the result was too low or too highThe optional range argument lets you control how wide a range to allow. For example if today's close was 100 and the default 50% range is used, it will start with the range 50 to 150 and narrow it from there. If the required price is outside the range, the result will be the range boundary, not the correct price.For a quick test of how this works, compare TargetPrice(RSI(2), 50) to RRSI(2, 50) -- the results will be the same (or very close).(RRSI is much faster than TargetPrice because it can calculate the needed price deterministically. TargetPrice is meant for use with other indicators that don't support a deterministic reverse version, e.g. CRSI.)The expression passed to TargetPrice should not be a reference to a Data array containing a previously-calculated indicator. The iterative search process requires multiple recalculations of the indicator while searching for the needed price. Data items are not recalculated for this purpose.It is NOT recommended to use TargetPrice within a Data Section formula. It is best suited for use in an EntryLimit or ExitLimit formula, where it will only be evaluated for each setup or open position respectively, not for every bar of every stock in the universe. This is not a speedy function, especially when used with long-lookback indicators.
17.18.521. TEMA
Category
469Multi-Bar FunctionsDescriptionTriple Exponential Moving AverageSyntaxTEMA(expr, count)Parametersexpr - data series formulacount - lookback periodNotesCount is usually thought of as an integer representing a number of bars, but can actually be any decimal value. An EMA is constructed by multiplying each difference between the result so far and the next value by a factor equal to 2 / (count + 1).Triple EMA is calculated as 3 * EMA(expr, count) - 3 * EMA(EMA(expr, count)) + EMA(EMA(EMA(expr, count)))Unlike the EMA function, TEMA applies the exponential weight factor from the start of available data rather than beginning with MA(expr, count). This is consistent with how other backtesting software calculates this indicator.This function supports one-pass calculation when used in the Data Section with a non-variable count.
17.18.522. Template
CategoryScript SectionsDescriptionDefines a strategy templateNotesSee Special Strategy Types for details.
17.18.523. TestInclude
CategoryScript SectionsDescriptionAllows a script to include another script when run in Test ModeSyntaxTestInclude: path where path is either a full file path (e.g. C:\RealTest\Scripts\script.rts) or a path relative to the Scripts folder (e.g. Examples\script.rts).NotesSee the general-purpose Include statement for further details.
17.18.524. TestData
470CategoryScript SectionsDescriptionNamed formulas calculated and stored in memory arrays for each symbol each date while tests are runNotesSee TestData Section for a more detailed description.
17.18.525. TestName
CategorySettingsDescriptionString that should appear in the "Name" column of the Test Results row after the test is runNotesIf TestName is not specified in a script then the name from the Settings Panel will be used, and if that is blank then the script name is used as the test name.If TestName is specified, it is evaluated as a Formula that returns a String Value. To specify a literal test name, it must be enclosed in quotation marks. String Functions such as Format can optionally be used to generate a test name that is relevant to the current set of Parameters.
17.18.526. TestOutput
CategorySettingsDescriptionSpecifies additional output and actions during and after a single test runChoices (multiple, separated by commas)None - no additional test outputReport - generate a Test Summary ReportGraph - open a stats graph and dynamically update it as the test runsLog - generates a detailed transaction and position log and displays it at the end of the testOrders - generate the list of Tomorrow's OrdersScan - run a special scan allowing position-level formula elements to be used to output the list of positions remaining open and/or other detailsDebug - show output from DebugEntry, DebugExit and DebugTargetStop statementsNotesIf TestOutput is not specified in a script then the choices from the Settings Panel will be used.
17.18.527. TestScan
471CategoryScript SectionsDescriptionTest Output Scan definitionNotesThis section defines a special type of scan that is run at the end of a test and has full access to the test context including open positions.See Test Output Scan for more information.
17.18.528. TestScanAllDates
CategorySettingsDescriptionAllows a TestScan to include a row for every date of a testChoicesTrue - include all datesFalse - (default) only run the scan on the last date of the test (before doing end-of-test exits)NotesSee Test Output Scan for more information.
17.18.529. TestSettings
CategoryScript SectionsDescriptionDefines the settings to use only when the script run mode is Test or Optimize.NotesThe general-purpose Settings section is always applied first, then modified by any items specified in TestSettings when applicable.See Settings Sections for details.
17.18.530. This
CategoryGeneral-Purpose FunctionsDescriptionAnchors a value in multi-bar or multi-position function calculationsSyntaxThis(value)
472Parametersvalue - the value to anchorNotesIn functions such as CountTrue, SinceTrue and TrueInRow, we sometimes want to compare a number of prior bar values to one specific bar value.For example, say you want to know how many bars it has been since there was more volume than today's volume. You might try using SinceTrue(V[1] > V), but since this is a multi-bar function, the entire expression "V[1] > V" is rolled back through time and evaluated for each bar as if it was the current bar. So instead of telling you how many bars since volume exceeded today's volume, it is telling you how many bars since any day's volume was greater than the following day's volume.To get what you're looking for, you'd instead use SinceTrue(V > This(V)). When SinceTrue rolls back through time, it now only rolls the first 'V' in the expression, while keeping the 'This(V)' anchored to the current bar.To further understand how this works, consider a simple price with offset C[n]. If n=0, this is today's close, if n=1, yesterday's close, and so on. Now consider that This(C)[n] might mean. Since This has anchored C to today's bar, the [n] offset has no effect, so C will always be returned regardless of the value of n. The Debug Panel is a useful place to study complex functions such as this one.In addition to the above, This can also be used in PositionSum, OrderSum, and SetupSum to compare each other position in the loop to the current one.
17.18.531. TickSize
CategoryStock/Contract InformationDescriptionFutures contract tick size NotesSpecifies the smallest possible price change for a futures contract.Tick sizes are obtained automatically when importing data from Norgate.For CSV futures data import, it would be necessary to provide tick sizes for each contract using a SymInfo file.If not provided, TickSize defaults to 0.01 for stocks.Note that TickSize is not used in any internal calculations in RealTest. All available decimal places in data bar values used in every calculation.
17.18.532. TLAdjusted
CategoryStrategy ElementsDescriptionSpecifies whether the prices and quantities of trades in a TradeList are split-adjustedChoices
473False - not adjusted, i.e. as-traded (default)True - adjustedNotesRealTest assumes that tradelist prices are not split-adjusted, as in most cases they will have come from actual trades that occurred in the market.This setting is mainly for use when exporting a trade list from other software such as AmiBroker and then importing it to RealTest.
17.18.533. TLAdoptPos
CategoryStrategy ElementsDescriptionSpecifies whether trades from a TradeList that were entered prior to the test's StartDate should be "adopted" by the strategyChoicesFalse - do not adopt positions entered before the start date (default)True - do adopt themNotesTrades entered before the start date will only be adopted by the strategy if they were exited after the start date or have no exit specified.When such trades are adopted, their entry dates are changed to match the test's start date.
17.18.534. TLDateFmt
CategoryStrategy ElementsDescriptionSpecifies whether the dates in a TradeList are in M/D/Y vs. D/M/Y formatChoicesDMY - dates are D/M/YMDY - dates are M/D/YNotesThe default if a strategy does not specify TLDateFormat is to use the Date Display Format setting from the Program Options Dialog.This strategy setting lets you use trade lists with the opposite of your standard date format more easily, and/or use two trade lists with opposite formats in the same script.Other date formats are supported which are not ambiguous and therefore do not require TLDateFmt to be specified.
17.18.535. TLDelim
474CategoryStrategy ElementsDescriptionSpecifies the column delimiter in a TradeList file.ChoicesCommaSemicolonTabNotesThe default column delimiter is Comma when TLNumFmt is Point or Semicolon when TLNumFmt is Comma.
17.18.536. TLEndDate
CategoryStrategy ElementsDescriptionThe date to switch from pure TradeList playback to pure strategy formula processing.Choices0 - (default) play back the trade list and superimpose strategy formulas (if provided) on those imported trades Latest - play back the trade list verbatim and ignore the strategy definitionany date - play back the trade list verbatim up through that date, then ignore the rest of the imported trades and apply the strategy definition thereafterNotesThe default "0" choice (or omitting this element) runs a TradeList strategy as was always done prior to release 2.0.29.2. The EntrySetup formula is ignored. Other strategy formulas, if specified, will modify the behavior of the imported trade.The "Latest" choice, or specifying any date after the backtest end date, causes a pure trade list playback regardless of what else is in the strategy definition.Specifying a date that is earlier than the backtest end date runs a pure trade list playback through that date and then switches to a pure strategy backtest.This strategy setting only applies when run mode is Test. In Orders run mode, the trade list (if present) is played back verbatim until the test end date and then the strategy rules are applied generate tomorrow's orders in so-called Hybrid Trade List mode.Another way to think of TLEndDate is that it enables hybrid trade list playback in Test mode.
17.18.537. TLFields
CategoryStrategy ElementsDescription
475Imported trade list CSV field order specification (comma-separated list)ChoicesAssetId - the stock's Norgate asset ID (overrides Symbol if provided)Symbol - the stock symbolStrategy - the strategy name (if present, must match script strategy name)Side - the round-trip trade side (long or 1 for long, short or -1 for short)Action - the transaction type (BUY/SELL) and its presence identifies the file as a transaction listDateTime - this field includes both date and time of a transaction, with a space between themShares - the quantity of a transaction or of both sides of a round-trip tradeDateIn - the date of a transaction or the entry date of a round-trip tradeTimeIn - the time of a transaction or the entry time of a round-trip tradeQtyIn - the quantity of a transaction or the entry quantity of a round-trip tradePriceIn - the price of a transaction or the entry price of a round-trip tradeFeesIn - the commission/fees of a transaction or the entry fees of a round-trip tradeValueIn - the EntryTradeValue if RealTest generated the trade list or any user-defined valueDateOut - the exit date of a round-trip tradeTimeOut - the exit time of a round-trip tradeQtyOut - the exit quantity of a round-trip tradePriceOut - the exit price of a round-trip tradeFeesOut - the exit fees of a round-trip tradeValueOut - the ExitTradeValue if RealTest generated the trade list or any user-defined valueNotesThe TLFields order must be specified for a TradeList strategy to work.If the CSV file includes a header row with column labels, these are simply ignored.If TLFields includes Strategy, then only those trades where the contents of that column match the name of the strategy that contains the TLFields statement will be included. If TLFields does not include Strategy values, then all trades in the list will be used by this strategy.Here is an example of how a TradeList strategy might look:
Note that the field names (like all names in RealTest) are not case-sensitive.To ignore a column in a trade list file, add an extra comma to the field order list, as shown in the example above.To ignore the first one or more columns, add extra comma(s) at the start of the list, e.g. ",,symbol,side," etc.See Using an Imported Trade List for a detailed description of this mechanism.
17.18.538. TLNumFmt
Category
476Strategy ElementsDescriptionSpecifies whether numbers (prices) in a TradeList use a point or a comma as their decimal separatorChoicesPoint - point (period) is used (default)Comma - comma is usedNotesBy default comma is the field separator in a CSV trade list file, and point is the decimal separator.This optional item enables European-format "CSV" trade lists to be imported by RealTest.Specify TLNumFmt: Comma if your trade lists use comma in place of point as the decimal delimiter.When using TLNumFmt: Comma, be sure to also specify SemiColon as your TLDelim.
17.18.539. TLStratName
CategoryStrategy ElementsDescriptionSpecifies which strategy name within a TradeList maps to the script strategy that imports the TradeListInputA strategy nameNotesBy default a strategy that imports trades must have the same name as its trades in the list.This optional strategy setting allows a strategy of any name to import trades of the specified strategy name.
17.18.540. TLTimeShift
CategoryStrategy ElementsDescriptionSpecifies the timezone shift, in hours, to apply to trade dates and times in a TradeList InputA number of hours.NotesThis setting is mainly for use with IB Flex Query output for non-US markets where Date/Time is nevertheless reported in NYC time.For example, if your ASX trades are shown in NYC time, add TLTimeShift: 14 to your strategy definition.
47717.18.541. TLValueIn
CategoryCurrent Position InformationDescriptionThe ValueIn value for a position that originated from a TradeListNotesTLValueIn provides a way for strategy formulas to access an arbitrary value from a trade list.The intended use case is to test combined strategies without having to merge separate scripts.This is done by running them separately with SaveTradesAs and then combining them by playing back those saved trade lists together.Typically each separate script would use EntryTradeValue and/or ExitTradeValue to save information such as OrderPrice or FillFraction.The combined playback script can then access these values using TLValueIn or TLValueOut, typically for use in a Quantity override.See mr_sample_long_only.rts, mr_sample_short_only.rts, and mr_sample_tradelist.rts for a complete example of how this works.
17.18.542. TLValueOut
CategoryCurrent Position InformationDescriptionThe ValueOut value for a position that originated from a TradeListNotesTLValueOut provides a way for strategy formulas to access an arbitrary value from a trade list.The intended use case is to test combined strategies without having to merge separate scripts.This is done by running them separately with SaveTradesAs and then combining them by playing back those saved trade lists together.Typically each separate script would use EntryTradeValue and/or ExitTradeValue to save information such as OrderPrice or FillFraction.The combined playback script can then access these values using TLValueIn or TLValueOut, typically for use in a Quantity override.See mr_sample_long_only.rts, mr_sample_short_only.rts, and mr_sample_tradelist.rts for a complete example of how this works.
17.18.543. ToDate
CategoryString FunctionsDescriptionConvert a string to a date valueSyntaxToDate(string)
478Parametersstring - a literal string or string function result that can be parsed as a dateNotesThe following date formats can be parsed by this function:Â· yyyymmdd (as a string)Â· mm/dd/yy or mm/dd/yyyy, where mm and dd are either 1 or 2 digitsÂ· dd-mmm-yy or dd-mmm-yyyy, where mmm is Jan, Feb, etc. (not case-sensitive)If the string is not a valid date, the result will be 0.
17.18.544. ToLower
CategoryString FunctionsDescriptionConvert a string to all lowercaseSyntaxToLower(string)Parametersstring - a literal string or string function result
17.18.545. ToNum
CategoryString FunctionsDescriptionConvert a string to a numeric valueSyntaxToNum(string, nth)Parametersstring - a literal string or string function result that can be parsed as an integer or decimal numbernth - the instance of a number to find within the string (optional)NotesIf nth is not specified then this function only looks for a number at the beginning of the string.If nth is 1 then the first number found within the string (or at the beginning) is returned.If nth is 2 the second number found is returned, and so on.A return value of 0 means either the number found was 0 or no number was found.
17.18.546. ToUpper
479CategoryString FunctionsDescriptionConvert a string to all uppercaseSyntaxToUpper(string)Parametersstring - a literal string or string function result
17.18.547. Top
CategoryGeneral-Purpose FunctionsDescriptionUse the top N digits of a number to make a new numberSyntaxTop(value, digits)Parametersvalue - the number to get top digits fromdigits - the count of digits to getNotesThis function was added to make it easier to use different levels of the TRBC industry codes, though it can be used with any numeric value.The TRBC codes are 10-digit numbers from which every pair of digits going from left to right makes the industry designation more specific.For the economic sector code, use Top(TRBC, 2).For the business sector code, use Top(TRBC, 4).For the industry group code, use Top(TRBC, 6).For the specific industry code, use Top(TRBC, 8).
17.18.548. Tracker
CategoryStrategy ElementsDescriptionSpecifies whether to automatically create a tracking benchmark copy of this strategy.ChoicesNone - do not add a tracking benchmark (default)Hidden - add a tracking benchmark that will not appear in graphs or reports
480Visible - add a tracking benchmark that will appear in graphs and reportsNotesWhen Tracker is specified (other than None), a Benchmark copy of the current strategy is internally created. Specifying Tracker: Hidden names the auto-generated benchmark as the strategy name with a leading underscore and with "_track" appended, e.g. the tracker for a strategy called "mr_long" would be added as "_mr_long_track".Specifying Tracker: Visible does the same, just without the leading underscore. (A leading underscore on a benchmark name means "do not show this benchmark in graphs or reports".)Use IsTracker in your strategy+tracker formulas to know which one is being evaluated.See the mr_sample_tracking.rts example script for a simple example of Tracker and IsTracker usage.See the oex_tf_auto_track.rts example script and its description in the StratData section topic for a more complex example.
17.18.549. TradeList
CategoryStrategy ElementsDescription Designates a strategy as being based on an external list of trades and provides the path to that listInputPath to a CSV file containing a list of trades to be used.NotesStrategies that include a TradeList must also include a TLFields definition.See Using an Imported Trade List for a detailed description of this mechanism.
17.18.550. Trades
CategoryScript SectionsDescriptionBacktest trade list column definitions See Trades Section and Trade List Windows.
17.18.551. TradeStatAvg
CategoryTrade Statistics FunctionsDescription
481The average of trade record values for the most recent N trades or for all tradesSyntaxTradeStatAvg(value, count, symbol)Parametersvalue - trade value formulacount - number of recent trades to include, or all trades if omittedsymbol - specific symbol to include, or all symbols if omittedNotesSee the link above for important information about this function category.
17.18.552. TradeStatMax
CategoryTrade Statistics FunctionsDescriptionThe largest of trade record values for the most recent N trades or for all tradesSyntaxTradeStatMax(value, count, symbol)Parametersvalue - trade value formulacount - number of recent trades to include, or all trades if omittedsymbol - specific symbol to include, or all symbols if omittedNotesSee the link above for important information about this function category.
17.18.553. TradeStatMin
CategoryTrade Statistics FunctionsDescriptionThe smallest of trade record values for the most recent N trades or for all tradesSyntaxTradeStatMin(value, count, symbol)Parametersvalue - trade value formulacount - number of recent trades to include, or all trades if omittedsymbol - specific symbol to include, or all symbols if omittedNotesSee the link above for important information about this function category.
48217.18.554. TradeStatStdDev
CategoryTrade Statistics FunctionsDescriptionThe standard deviation of trade record values for the most recent N trades or for all tradesSyntaxTradeStatStdDev(value, count, symbol)Parametersvalue - trade value formulacount - number of recent trades to include, or all trades if omittedsymbol - specific symbol to include, or all symbols if omittedNotesSee the link above for important information about this function category.
17.18.555. TradeStatSum
CategoryTrade Statistics FunctionsDescriptionThe sum of trade record values for the most recent N trades or for all tradesSyntaxTradeStatSum(value, count, symbol)Parametersvalue - trade value formulacount - number of recent trades to include, or all trades if omittedsymbol - specific symbol to include, or all symbols if omittedNotesSee the link above for important information about this function category.
17.18.556. Trough
CategoryMulti-Bar FunctionsDescriptionValue of the nth most recent trough of a series of prices or other valuesSyntaxTrough(expr, pctChg, nth {1})Parametersexpr - data series formulapctChg - percent change required to delimit peaks and troughs
483nth - which trough to locate (1, i.e., most recent if omitted)NotesThe definition of a Trough is the lowest value which is then followed by one or more values that are at least n% above that most recent low.See Peak for important additional information about how these functions work in RealTest.
17.18.557. TroughBars
CategoryMulti-Bar FunctionsDescriptionCount of bars since the nth most recent trough of a series of prices or other valuesSyntaxTroughBars(expr, pctChg, nth {1})Parametersexpr - data series formulapctChg - percent change required to delimit peaks and troughsnth - which trough to locate (1, i.e., most recent if omitted)NotesThe definition of a Trough is the lowest value which is then followed by one or more values that are at least n% above that most recent low.See Peak for important additional information about how these functions work in RealTest.
17.18.558. TrueInRow
CategoryMulti-Bar FunctionsDescriptionCount of bars in a row for which a condition was trueSyntaxTrueInRow(condition, count {0})Parameterscondition - data series formulacount - lookback period (optional)NotesCondition will be evaluated for the most recent bar first, then proceed back in time until a FALSE (0) value is found or count bars have been checked, whichever comes first. For each bar, condition is evaluated as if that bar were the current bar, i.e. without knowledge of future splits relative to that bar.If count is omitted then there is no maximum (all bars before this one are potentially checked). If condition was never true, the return value is 0. If condition is currently true, but wasn't true yesterday, the return value is 1. 
484If condition was true today and yesterday, the return value is 2, and so on.This function supports one-pass calculation when used in the Data Section without a count argument.
17.18.559. TrueRange or TR
CategoryBar Data ValuesDescriptionCurrent bar range including prior close NotesTrue Range is defined as Max(C[1],H) - Min(C[1],L).Either TrueRange or TR can be used.See also ATR, Range.
17.18.560. UntilTrue
CategoryMulti-Bar FunctionsDescriptionCount bars until a condition will be trueSyntaxUntilTrue(condition, count {0}) {WARNING: looks ahead}Parameterscondition - data series formulacount - lookback period (optional)NotesCondition will be evaluated for the most recent bar first, then proceed forward in time until a non-zero value is found or count bars have been checked, whichever comes first. For each bar, condition is evaluated as if that bar were the current bar, i.e. without knowledge of future splits relative to that bar.If count is omitted then there is no maximum (all bars after this one are potentially checked). If condition never becomes true, the return value is -1. If condition is currently true, the return value is 0. If condition will be true tomorrow, the return value is 1, and so on.Since this function looks into the future, it should generally not be used with price data in a backtest.The most likely usage scenario would be date-related, e.g. UntilTrue(Month <> Month[1]) to count the number of remaining trading days this month.This function supports one-pass calculation when used in the Data Section without a count argument.
48517.18.561. Update
CategoryImport SpecificationDescriptionNorgate data update requestChoicesTrue - launch a Norgate updateFalse - don't launch a Norgate update (default)NotesThis import option makes it easy to ensure that Norgate has updated the data before you import it.When a Norgate import is run with Update: TRUE, the update process is launched and RealTest waits for it to finish before starting the import. The status of this operation is shown in the Status Bar. It is fine to be editing scripts, reviewing test results, etc. while an import (or any other task) is running.
17.18.562. UseAvailableBars
CategorySettingsDescriptionControls what happens when there are not enough bars to calculate a simple average or indicatorChoicesTrue - calculate simple averages and indicators using how ever many bars are availableFalse - return NaN if not enough bars are available (default)NotesWhen UseAvailableBars is False, then any simple average or indicator that does not have enough data to calculate the correct value will return NaN (not a number), and the formula will stop being evaluated.When UseAvailableBars is True, simple averages and indicators are calculated using however many bars are available. For example, if a formula refers to Avg(C,200) and the current bar is only the 100th bar of the data for that symbol, then the 100-day average close will be returned instead.The UseAvailableBars setting has no effect on exponential averages or indicators. Exponential average calculation actually requires five times the "length" to reach full precision. RealTest will use this full-precision length when it is available, and will use however many bars are available otherwise. Unlike simple averages, however, this does not change the "length" parameter, which is really just the denominator of the fraction used to multiply each new value by the prior result during calculation. So for exponential averages, having too few bars available has a less significant impact on the result than it does for simple averages.See also Number of Bars Required.
17.18.563. Using
Category
486Strategy ElementsDescriptionTells a Strategy or Benchmark or Template to use elements from another strategy or benchmark or templateInputA list of comma-separated names of strategies or benchmarks of templatesNotesUsing is most often used by strategies to incorporate elements from templates, but any strategy type can inherit from any other with Using.All of the elements defined in the used strategy are copied into the using strategy. If the using strategy defines its own version of any of those elements, its own elements replace the ones from the used strategy.All this is here just to save you from having to re-type (or copy/paste) strategy elements that you use in multiple strategies in a script. Certain elements, such as Commission and Slippage formulas, are often the same for every strategy.Some of the example scripts, such as mr_sample.rts, incorporate the template/using concept.
17.18.564. Volume or V
CategoryBar Data ValuesDescriptionCurrent bar volume 
17.18.565. VWMA
CategoryMulti-Bar FunctionsDescriptionVolume-Weighted Moving AverageSyntaxVWMA(expr, count)Parametersexpr - data series formulacount - lookback periodNotesVWMA is calculated as Sum(expr * Volume, count) / Sum(Volume, count)VWMA(Close, count) is a way to calculate volume-weighted average price (VWAP).This function supports one-pass calculation when used in the Data Section with a non-variable count.
48717.18.566. WalkForward
CategoryScript SectionsDescriptionDefines lists of system parameter values by date for use in running a walk-forward test that was generated by a walk-forward optimization processNotesSee Optimization Dialog and Walk-Forward Tests for details.If a script includes a WalkForward section (not commented out), running it in single test mode will always use the variable parameter values as listed under WalkForward. To run such a script with constant parameter values, comment out the WalkForward section first.See spy_tlt_uis.rts in the Examples folder for an example that uses walk-forward optimization to implement a strategy from an article.
17.18.567. Week
CategoryBar Data ValuesDescriptionCurrent bar's week of the year (1-52)NotesThis function works identically to =WEEKNUM(cell, 2) in Excel.Neither Excel nor RealTest follow the ISO-8601 standard for week-of-year numbering.
17.18.568. WhenTrue
CategoryMulti-Bar FunctionsDescriptionEvaluates an expression for a past (or future) bar when a condition was (or will be) trueSyntaxWhenTrue(condition, expression, count {0}, nth {1})Parameterscondition - formula to evaluate for each bar until true (non-zero)expression - formula to evaluate when condition is truecount - how many bars back to go (optional)nth - which instance of condition to use (optional)NotesIf nth is positive, condition is evaluated for the most recent bar and continue back in time until the nth non-zero value is found.If nth is negative, condition will be evaluated for the most recent bar and continue forward in time 
488until the abs(nth) non-zero value is found.For each bar, condition is evaluated as if that bar were the current bar, i.e. without knowledge of future splits relative to that bar.When the specified nth condition is found, expression is then evaluated for that bar and the resulting value is returned.If condition is never found, the result is NaN.If nth is not specified, the default is 1.Count most be provided if nth is to be provided (use 0 for the default of "all bars").This function supports one-pass calculation when used in the Data Section without the optional arguments.
17.18.569. WMA or WAvg
CategoryMulti-Bar FunctionsDescriptionWeighted Moving AverageSyntaxWMA(expr, count)Parametersexpr - data series formulacount - lookback periodNotesEither WMA or WAvg can be used as the name of this function.This type of moving average is calculated by putting the most weight on the most recent bar, fractionally less weight on the next bar, and so on. This link describes how the calculation is done in more detail.
17.18.570. Year
CategoryBar Data ValuesDescriptionCurrent bar year number Negative offsets, e.g. Year[-2], can be legitimately used to obtain the year of a future bar. This works even if the offset goes beyond the range of the currently loaded data file. For best results when future dates are required, a HolidayList should also be provided.
17.18.571. YInt
Category
489Multi-Bar FunctionsDescriptionLinear regression y-interceptSyntaxYInt(expr, {expr2,} count)Parametersexpr - data series formula (Y values)expr2 - optional second data series formula (X values -- a linear series from 1 to count is used if omitted)count - lookback periodNotesCalculates the y-intercept of a linear regression of expr evaluated for the previous count bars.See also Slope and LinReg.
490